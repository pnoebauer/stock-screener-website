{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx\";\nimport React from 'react';\nimport './dropdown.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      defaultValue\n    } = props;\n    super(props);\n\n    this.handleClickOutside = event => {\n      if (this.container.current && !this.container.current.contains(event.target)) {\n        const priorValue = this.state.selectedValue; // console.log(priorValue, this.state.shownValue)\n\n        this.setState({\n          showList: false,\n          shownValue: priorValue\n        } //);\n        , () => console.log('click out', this.state.selectedValue));\n      }\n    };\n\n    this.handleDisplay = () => {\n      this.setState(prevState => {\n        console.log(prevState, 'prevState');\n\n        if (!prevState.showList) {\n          document.addEventListener('mousedown', this.handleClickOutside);\n        } else if (prevState.showList) {\n          document.removeEventListener('mousedown', this.handleClickOutside);\n        }\n\n        return {\n          showList: !prevState.showList // showList: false\n\n        };\n      });\n    };\n\n    this.handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(event.target.getAttribute('value'))\n      // console.log(event)\n      this.setState({\n        selectedValue: event.target.getAttribute('value'),\n        showList: false\n      }, () => this.props.onChange(this.state.selectedValue, headerCol, valueRow));\n    };\n\n    this.onTextChange = event => {\n      // console.log(event.currentTarget.textContent,'text change')\n      const {\n        options\n      } = this.props;\n      const currentInput = event.currentTarget.textContent; // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0; //filter all with the same start\n      });\n      console.log(newFilteredOptions);\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput\n      }, () => console.log(this.state));\n    };\n\n    this.container = /*#__PURE__*/React.createRef();\n    this.state = {\n      selectedValue: defaultValue,\n      showList: false,\n      displayedOptions: this.props.options\n    };\n  } // //on mounting add event listener to handle click outside the Custom Select Container\n  // componentDidMount() {\n  //   document.addEventListener('mousedown', this.handleClickOutside);\n  // }\n  // //remove the event listener on component unmounting\n  // componentWillUnmount() {\n  //   document.removeEventListener('mousedown', this.handleClickOutside);\n  // }\n  //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      options,\n      style\n    } = this.props;\n    const {\n      selectedValue,\n      showList,\n      displayedOptions,\n      shownValue\n    } = this.state; // console.log('a',this.props)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'dropdown-container',\n      style: {\n        gridRow: style.gridRow,\n        gridColumn: style.gridColumn\n      },\n      ref: this.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: showList ? 'selected-value active' : 'selected-value',\n        onClick: this.handleDisplay,\n        contentEditable: \"true\",\n        suppressContentEditableWarning: true,\n        onInput: this.onTextChange,\n        children: selectedValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"options-list\",\n        children: displayedOptions.map((value, index) => {\n          if (value !== selectedValue || shownValue !== selectedValue) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"dropdown-option\",\n              value: value,\n              onClick: e => this.handleOptionClick(e, style.gridColumn - 1, style.gridRow - 2),\n              children: value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 21\n            }, this);\n          } else return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","defaultValue","handleClickOutside","event","container","current","contains","target","priorValue","state","selectedValue","setState","showList","shownValue","console","log","handleDisplay","prevState","document","addEventListener","removeEventListener","handleOptionClick","headerCol","valueRow","getAttribute","onChange","onTextChange","options","currentInput","currentTarget","textContent","newFilteredOptions","filter","item","toLowerCase","indexOf","displayedOptions","createRef","render","style","gridRow","gridColumn","map","value","index","e"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport './dropdown.styles.css';\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n      const {defaultValue} = props;\n      super(props);\n      this.container = React.createRef();\n\n      this.state = {\n          selectedValue: defaultValue,\n          showList: false,\n          displayedOptions: this.props.options,\n\n      };\n    }\n    \n    // //on mounting add event listener to handle click outside the Custom Select Container\n    // componentDidMount() {\n    //   document.addEventListener('mousedown', this.handleClickOutside);\n    // }\n\n    // //remove the event listener on component unmounting\n    // componentWillUnmount() {\n    //   document.removeEventListener('mousedown', this.handleClickOutside);\n    // }\n\n    //if click happens outside the dropdown area close the list\n    handleClickOutside = event => {\n      if(this.container.current && !this.container.current.contains(event.target)) {\n        const priorValue = this.state.selectedValue;\n        // console.log(priorValue, this.state.shownValue)\n        \n        this.setState({\n          showList: false,\n          shownValue: priorValue\n        }//);\n        ,\n        ()=>console.log('click out',this.state.selectedValue));\n\n      }\n    }\n\n    //handle the displaying of the list (if currently shown, then hide and vice versa)\n    handleDisplay = () => {\n      this.setState(prevState => {\n        console.log(prevState,'prevState')\n\n        if(!prevState.showList) {\n          document.addEventListener('mousedown', this.handleClickOutside);\n        }\n        else if(prevState.showList) {\n          document.removeEventListener('mousedown', this.handleClickOutside);\n        }\n\n        return {\n            showList: !prevState.showList\n            // showList: false\n          }}\n      );\n\n\n    };\n\n    // set text based on click in displayed list\n    handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(event.target.getAttribute('value'))\n      // console.log(event)\n\n      this.setState({\n        selectedValue: event.target.getAttribute('value'),\n        showList: false\n      }, () => this.props.onChange(this.state.selectedValue, headerCol, valueRow)      \n      );\n    };\n\n    onTextChange = event => {\n      // console.log(event.currentTarget.textContent,'text change')\n      const { options } = this.props;\n\n      const currentInput = event.currentTarget.textContent;\n      // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0 //filter all with the same start\n      });\n\n      console.log(newFilteredOptions);\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput\n      },\n      ()=>console.log(this.state))\n\n      \n    }\n\n  \n    render() {\n      const { options, style } = this.props;\n      const { selectedValue, showList, displayedOptions, shownValue } = this.state;\n      // console.log('a',this.props)\n      \n\n      return (\n        <div \n          className={'dropdown-container'}\n          style={{ \n            gridRow: style.gridRow,\n            gridColumn: style.gridColumn,\n          }}\n          ref = {this.container}\n        >\n          <div \n            className={showList ? 'selected-value active' : 'selected-value'}\n            onClick={this.handleDisplay}  \n            contentEditable='true'\n            suppressContentEditableWarning={true}\n            onInput={this.onTextChange}\n          >\n            {selectedValue}\n          </div>\n          {/* WON'T WORK AS INPUT DOES NOT SUPPORT PSEUDO ELEMENTS\n          <input\n            className={showList ? 'selected-value active' : 'selected-value'}\n            type='text'\n            name='userInput'\n            value={selectedValue}\n            onClick={this.handleDisplay}  \n          /> */}\n\n            {showList && (<ul className='options-list'>\n              {displayedOptions.map((value, index) => {\n                if(value !== selectedValue || shownValue !== selectedValue) {\n                  return(\n                    <li \n                      className='dropdown-option'\n                      value={value} \n                      key={index}\n                      onClick={e => this.handleOptionClick(e, style.gridColumn-1, style.gridRow-2)}\n                    >\n                      {value}\n                    </li>\n                  )}\n                  else return null;\n              })}\n            </ul>)}\n        </div>\n      );\n    }\n  }\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}