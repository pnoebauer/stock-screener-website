{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withFetch.jsx\";\nimport React from 'react';\nimport { SYMBOLS } from '../../assets/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withFetch(WrappedComponent, urlRealTime, apikey) {\n  class WithFetch extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.fetchRealTimeData = async (urlRealTime, symbol) => {\n        // console.log('fetch')\n        const params = {\n          apikey,\n          symbol\n        };\n        const queryExt = new URLSearchParams(params).toString();\n        const queryString = urlRealTime.concat('?', queryExt);\n\n        try {\n          const response = await fetch(queryString);\n\n          if (!response.ok) {\n            const message = `An error has occured: ${response.status}`;\n            throw new Error(message);\n          }\n\n          const data = await response.json(); // console.log(data)\n\n          this.setState({\n            data\n          });\n          return data;\n        } catch (err) {}\n      };\n\n      this.state = {\n        data: []\n      };\n    }\n\n    componentDidMount() {\n      if (urlRealTime) {\n        this.fetchRealTimeData(urlRealTime, SYMBOLS.slice(0, 8)); // .then(data => console.log(data,'data'))\n      }\n    }\n\n    render() {\n      const { ...passThroughProps\n      } = this.props;\n      console.log(urlRealTime, 'url', passThroughProps, '...this.props');\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        data: this.state.data,\n        ...passThroughProps,\n        getData: this.fetchRealTimeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this);\n    }\n\n  }\n\n  return WithFetch;\n}\n\nexport default withFetch;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withFetch.jsx"],"names":["React","SYMBOLS","withFetch","WrappedComponent","urlRealTime","apikey","WithFetch","Component","constructor","props","fetchRealTimeData","symbol","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","data","json","setState","err","state","componentDidMount","slice","render","passThroughProps","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,wBAAxB;;;AAGA,SAASC,SAAT,CAAmBC,gBAAnB,EAAqCC,WAArC,EAAkDC,MAAlD,EAA0D;AACtD,QAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACpCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;;AADe,WAOnBC,iBAPmB,GAOC,OAAON,WAAP,EAAoBO,MAApB,KAA+B;AAC/C;AAEA,cAAMC,MAAM,GAAG;AAACP,UAAAA,MAAD;AAASM,UAAAA;AAAT,SAAf;AAEA,cAAME,QAAQ,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,QAA5B,EAAjB;AACA,cAAMC,WAAW,GAAGZ,WAAW,CAACa,MAAZ,CAAmB,GAAnB,EAAwBJ,QAAxB,CAApB;;AAEI,YAAI;AACA,gBAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAD,CAA5B;;AAEA,cAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AACd,kBAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,kBAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACH;;AAED,gBAAMG,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB,CARA,CASA;;AACA,eAAKC,QAAL,CAAc;AACVF,YAAAA;AADU,WAAd;AAGA,iBAAOA,IAAP;AACH,SAdD,CAeA,OAAOG,GAAP,EAAY,CAEX;AAER,OAlCkB;;AAEf,WAAKC,KAAL,GAAa;AACTJ,QAAAA,IAAI,EAAE;AADG,OAAb;AAGH;;AA+BDK,IAAAA,iBAAiB,GAAG;AAChB,UAAGzB,WAAH,EAAgB;AACZ,aAAKM,iBAAL,CAAuBN,WAAvB,EAAoCH,OAAO,CAAC6B,KAAR,CAAc,CAAd,EAAgB,CAAhB,CAApC,EADY,CAEZ;AACH;AACJ;;AAEDC,IAAAA,MAAM,GAAG;AACL,YAAM,EAAE,GAAGC;AAAL,UAA0B,KAAKvB,KAArC;AAEAwB,MAAAA,OAAO,CAACC,GAAR,CAAY9B,WAAZ,EAAwB,KAAxB,EAA8B4B,gBAA9B,EAA+C,eAA/C;AACA,0BACI,QAAC,gBAAD;AACI,QAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWJ,IADrB;AAAA,WAEQQ,gBAFR;AAGI,QAAA,OAAO,EAAE,KAAKtB;AAHlB;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH;;AAxDmC;;AA0DxC,SAAOJ,SAAP;AACH;;AAGD,eAAeJ,SAAf","sourcesContent":["import React from 'react';\n\nimport { SYMBOLS } from '../../assets/constants';\n\n\nfunction withFetch(WrappedComponent, urlRealTime, apikey) {\n    class WithFetch extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                data: []\n            };\n        }\n\n        fetchRealTimeData = async (urlRealTime, symbol) => {\n            // console.log('fetch')\n        \n            const params = {apikey, symbol};\n            \n            const queryExt = new URLSearchParams(params).toString();\n            const queryString = urlRealTime.concat('?', queryExt);\n            \n                try {\n                    const response = await fetch(queryString);\n                \n                    if (!response.ok) {\n                        const message = `An error has occured: ${response.status}`;\n                        throw new Error(message);\n                    }\n                \n                    const data = await response.json();\n                    // console.log(data)\n                    this.setState({\n                        data\n                    });\n                    return data;\n                }\n                catch (err) {\n\n                }\n            \n        }\n\n        componentDidMount() {\n            if(urlRealTime) {\n                this.fetchRealTimeData(urlRealTime, SYMBOLS.slice(0,8))\n                // .then(data => console.log(data,'data'))\n            }\n        }\n        \n        render() {\n            const { ...passThroughProps } = this.props;\n\n            console.log(urlRealTime,'url',passThroughProps,'...this.props')\n            return (\n                <WrappedComponent \n                    data={this.state.data} \n                    {...passThroughProps} \n                    getData={this.fetchRealTimeData}\n                \n                />\n            );\n        }\n    }\n    return WithFetch;\n} \n\n\nexport default withFetch;"]},"metadata":{},"sourceType":"module"}