{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown/dropdown.component.jsx\";\nimport React from 'react';\nimport './dropdown.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      children: _children\n    } = props;\n    super(props);\n\n    this.handleClickOutside = event => {\n      const {\n        options,\n        onChange,\n        gridColumn,\n        gridRow,\n        children\n      } = this.props;\n      const headerCol = gridColumn - 1;\n      const valueRow = gridRow - 2; // container exists and the click (event.target) occurs outside that container\n\n      if (this.container.current && !this.container.current.contains(event.target)) {\n        let insertValue;\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : children;\n          return {\n            showList: false,\n            shownValue: insertValue\n          };\n        }, () => {\n          if (this.selectionDisplay.current.innerText !== insertValue) {\n            //happens if typed in text does not match anything\n            this.selectionDisplay.current.innerText = insertValue; // this.setState(prevState => ({key: prevState.key+1}))\n          }\n\n          document.removeEventListener('mousedown', this.handleClickOutside);\n          return onChange(insertValue, headerCol, valueRow);\n        });\n      }\n    };\n\n    this.handleDisplay = (clickEvent, headerCol, valueRow) => {\n      const {\n        options\n      } = this.props;\n      const {\n        shownValue\n      } = this.state; // comment if statement to allow closing the list even if value does not exist in options list\n\n      if (options.includes(shownValue)) {\n        this.setState(prevState => {\n          if (!prevState.showList) {\n            document.addEventListener('mousedown', this.handleClickOutside);\n          } else if (prevState.showList) {\n            document.removeEventListener('mousedown', this.handleClickOutside);\n          }\n\n          return {\n            showList: !prevState.showList,\n            activeItem: prevState.displayedOptions.indexOf(prevState.shownValue)\n          };\n        });\n      }\n    };\n\n    this.handleOptionClick = (event, headerCol, valueRow) => {\n      const {\n        onChange\n      } = this.props;\n      this.setState({\n        showList: false,\n        shownValue: event.target.innerText\n      });\n      onChange(event.target.innerText, headerCol, valueRow);\n\n      if (this.selectionDisplay.current.innerText !== event.target.innerText) {\n        // occurs when we type in, the text is not completed and then click on the same value that was in before\n        // i.e. current value: Monthly,\n        //      type in: Mon\n        //      click on Monthly\n        //  Because the state has not changed Mon will remain in the cell\n        this.selectionDisplay.current.innerText = event.target.innerText; // this.setState(prevState => ({key: prevState.key+1}));\n      }\n\n      document.removeEventListener('mousedown', this.handleClickOutside); // onChange(event.target.innerText, headerCol, valueRow);\n    };\n\n    this.onTextChange = event => {\n      const {\n        options\n      } = this.props;\n      const currentInput = event.currentTarget.textContent;\n      const newFilteredOptions = options.filter(item => {\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0; //filter all with the same start\n      });\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      });\n    };\n\n    this.onKeyDown = (event, headerCol, valueRow) => {\n      const {\n        onChange\n      } = this.props;\n      const {\n        activeItem,\n        displayedOptions\n      } = this.state;\n\n      switch (event.keyCode) {\n        // down\n        case 40:\n          if (activeItem < displayedOptions.length - 1) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              };\n            });\n          }\n\n          break;\n        // up\n\n        case 38:\n          if (activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              };\n            });\n          }\n\n          break;\n        // enter\n\n        case 13:\n          event.preventDefault();\n          this.setState(prevState => {\n            const displayedValue = prevState.displayedOptions[prevState.activeItem];\n            return {\n              activeItem: 0,\n              showList: false,\n              shownValue: displayedValue\n            };\n          }, () => {\n            if (this.selectionDisplay.current.innerText !== this.state.shownValue) {\n              this.selectionDisplay.current.innerText = this.state.shownValue; // this.setState(prevState => ({key: prevState.key+1}));\n            }\n\n            return onChange(this.state.shownValue, headerCol, valueRow);\n          });\n          document.removeEventListener('mousedown', this.handleClickOutside);\n          break;\n\n        default:\n      }\n    };\n\n    this.container = /*#__PURE__*/React.createRef();\n    this.selectionDisplay = /*#__PURE__*/React.createRef();\n    console.log('ai', this.props.options.indexOf(_children), _children); // console.log(Math.max(this.props.options.indexOf(children), 0), 'b');\n\n    this.state = {\n      showList: false,\n      displayedOptions: this.props.options,\n      shownValue: _children,\n      activeItem: 0 // key: 0\n\n    };\n  } //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      gridRow,\n      gridColumn,\n      customStyles,\n      className,\n      children\n    } = this.props;\n    const {\n      showList,\n      displayedOptions,\n      activeItem\n    } = this.state; // console.log(displayedOptions, 'displayedOptions', showList);\n\n    console.log('activeItem', activeItem, displayedOptions[activeItem], children, this.state.shownValue);\n    let number = displayedOptions.length;\n    number = number > 5 ? 5 : number < 1 ? 1 : number;\n    const dropDownHeight = `${number * 100}%`;\n    const liHeight = `calc(${1 / number * 100}% - 1px)`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'dropdown-container',\n      style: { ...customStyles,\n        gridRow,\n        gridColumn: `${gridColumn + 1}`\n      },\n      ref: this.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `selected-value ${this.props.className} ${showList ? 'active' : ''}`,\n        onClick: clickEvent => this.handleDisplay(clickEvent, gridColumn - 1, gridRow - 2),\n        onKeyDown: e => this.onKeyDown(e, gridColumn - 1, gridRow - 2),\n        contentEditable: \"true\",\n        suppressContentEditableWarning: true,\n        onInput: this.onTextChange,\n        ref: this.selectionDisplay // key={key}\n        ,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 5\n      }, this), showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: `options-list`,\n        style: {\n          height: dropDownHeight\n        },\n        children: displayedOptions.map((value, index) => {\n          // exclude the selectedValue from dropdown list options\n          // except if the shownValue is different to the selectedValue (happens if user types into search field)\n          // if(value !== selectedValue || shownValue !== selectedValue) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              height: liHeight\n            },\n            className: `dropdown-option ${className} ${index === activeItem ? 'active' : ''}`,\n            value: value,\n            onClick: e => this.handleOptionClick(e, gridColumn - 1, gridRow - 2),\n            children: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 9\n          }, this); // }\n          //   else return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nDropdown.defaultProps = {\n  className: '',\n  customStyles: {}\n};\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","children","handleClickOutside","event","options","onChange","gridColumn","gridRow","headerCol","valueRow","container","current","contains","target","insertValue","setState","prevState","includes","shownValue","showList","selectionDisplay","innerText","document","removeEventListener","handleDisplay","clickEvent","state","addEventListener","activeItem","displayedOptions","indexOf","handleOptionClick","onTextChange","currentInput","currentTarget","textContent","newFilteredOptions","filter","item","toLowerCase","onKeyDown","keyCode","length","preventDefault","displayedValue","createRef","console","log","render","customStyles","className","number","dropDownHeight","liHeight","e","height","map","value","index","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport './dropdown.styles.css';\n\nclass Dropdown extends React.Component {\n\tconstructor(props) {\n\t\tconst {children} = props;\n\t\tsuper(props);\n\t\tthis.container = React.createRef();\n\t\tthis.selectionDisplay = React.createRef();\n\n\t\tconsole.log('ai', this.props.options.indexOf(children), children);\n\t\t// console.log(Math.max(this.props.options.indexOf(children), 0), 'b');\n\n\t\tthis.state = {\n\t\t\tshowList: false,\n\t\t\tdisplayedOptions: this.props.options,\n\t\t\tshownValue: children,\n\t\t\tactiveItem: 0,\n\t\t\t// key: 0\n\t\t};\n\t}\n\n\t//if click happens outside the dropdown area close the list\n\thandleClickOutside = event => {\n\t\tconst {options, onChange, gridColumn, gridRow, children} = this.props;\n\n\t\tconst headerCol = gridColumn - 1;\n\t\tconst valueRow = gridRow - 2;\n\n\t\t// container exists and the click (event.target) occurs outside that container\n\t\tif (this.container.current && !this.container.current.contains(event.target)) {\n\t\t\tlet insertValue;\n\n\t\t\tthis.setState(\n\t\t\t\tprevState => {\n\t\t\t\t\t// if the typed in value exists in the options list then use it,\n\t\t\t\t\t// if it does not exist replace it with the value that was in the cell before typing in\n\t\t\t\t\tinsertValue = options.includes(prevState.shownValue)\n\t\t\t\t\t\t? prevState.shownValue\n\t\t\t\t\t\t: children;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tshowList: false,\n\t\t\t\t\t\tshownValue: insertValue,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tif (this.selectionDisplay.current.innerText !== insertValue) {\n\t\t\t\t\t\t//happens if typed in text does not match anything\n\t\t\t\t\t\tthis.selectionDisplay.current.innerText = insertValue;\n\t\t\t\t\t\t// this.setState(prevState => ({key: prevState.key+1}))\n\t\t\t\t\t}\n\t\t\t\t\tdocument.removeEventListener('mousedown', this.handleClickOutside);\n\t\t\t\t\treturn onChange(insertValue, headerCol, valueRow);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t};\n\n\t//handle the displaying of the list (if currently shown, then hide and vice versa)\n\thandleDisplay = (clickEvent, headerCol, valueRow) => {\n\t\tconst {options} = this.props;\n\t\tconst {shownValue} = this.state;\n\t\t// comment if statement to allow closing the list even if value does not exist in options list\n\t\tif (options.includes(shownValue)) {\n\t\t\tthis.setState(prevState => {\n\t\t\t\tif (!prevState.showList) {\n\t\t\t\t\tdocument.addEventListener('mousedown', this.handleClickOutside);\n\t\t\t\t} else if (prevState.showList) {\n\t\t\t\t\tdocument.removeEventListener('mousedown', this.handleClickOutside);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tshowList: !prevState.showList,\n\t\t\t\t\tactiveItem: prevState.displayedOptions.indexOf(prevState.shownValue),\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t};\n\n\t// set text based on click in displayed list\n\thandleOptionClick = (event, headerCol, valueRow) => {\n\t\tconst {onChange} = this.props;\n\n\t\tthis.setState({\n\t\t\tshowList: false,\n\t\t\tshownValue: event.target.innerText,\n\t\t});\n\n\t\tonChange(event.target.innerText, headerCol, valueRow);\n\n\t\tif (this.selectionDisplay.current.innerText !== event.target.innerText) {\n\t\t\t// occurs when we type in, the text is not completed and then click on the same value that was in before\n\t\t\t// i.e. current value: Monthly,\n\t\t\t//      type in: Mon\n\t\t\t//      click on Monthly\n\t\t\t//  Because the state has not changed Mon will remain in the cell\n\t\t\tthis.selectionDisplay.current.innerText = event.target.innerText;\n\t\t\t// this.setState(prevState => ({key: prevState.key+1}));\n\t\t}\n\n\t\tdocument.removeEventListener('mousedown', this.handleClickOutside);\n\t\t// onChange(event.target.innerText, headerCol, valueRow);\n\t};\n\n\tonTextChange = event => {\n\t\tconst {options} = this.props;\n\n\t\tconst currentInput = event.currentTarget.textContent;\n\n\t\tconst newFilteredOptions = options.filter(item => {\n\t\t\treturn item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0; //filter all with the same start\n\t\t});\n\n\t\tthis.setState({\n\t\t\tdisplayedOptions: newFilteredOptions,\n\t\t\tshowList: true,\n\t\t\tshownValue: currentInput,\n\t\t\tactiveItem: 0,\n\t\t});\n\t};\n\n\tonKeyDown = (event, headerCol, valueRow) => {\n\t\tconst {onChange} = this.props;\n\t\tconst {activeItem, displayedOptions} = this.state;\n\n\t\tswitch (event.keyCode) {\n\t\t\t// down\n\t\t\tcase 40:\n\t\t\t\tif (activeItem < displayedOptions.length - 1) {\n\t\t\t\t\tthis.setState(prevState => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tactiveItem: prevState.activeItem + 1,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t// up\n\t\t\tcase 38:\n\t\t\t\tif (activeItem > 0) {\n\t\t\t\t\tthis.setState(prevState => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tactiveItem: prevState.activeItem - 1,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t// enter\n\t\t\tcase 13:\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tthis.setState(\n\t\t\t\t\tprevState => {\n\t\t\t\t\t\tconst displayedValue = prevState.displayedOptions[prevState.activeItem];\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tactiveItem: 0,\n\t\t\t\t\t\t\tshowList: false,\n\t\t\t\t\t\t\tshownValue: displayedValue,\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tif (this.selectionDisplay.current.innerText !== this.state.shownValue) {\n\t\t\t\t\t\t\tthis.selectionDisplay.current.innerText = this.state.shownValue;\n\t\t\t\t\t\t\t// this.setState(prevState => ({key: prevState.key+1}));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn onChange(this.state.shownValue, headerCol, valueRow);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tdocument.removeEventListener('mousedown', this.handleClickOutside);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t}\n\t};\n\n\trender() {\n\t\tconst {gridRow, gridColumn, customStyles, className, children} = this.props;\n\t\tconst {showList, displayedOptions, activeItem} = this.state;\n\n\t\t// console.log(displayedOptions, 'displayedOptions', showList);\n\t\tconsole.log(\n\t\t\t'activeItem',\n\t\t\tactiveItem,\n\t\t\tdisplayedOptions[activeItem],\n\t\t\tchildren,\n\t\t\tthis.state.shownValue\n\t\t);\n\n\t\tlet number = displayedOptions.length;\n\t\tnumber = number > 5 ? 5 : number < 1 ? 1 : number;\n\n\t\tconst dropDownHeight = `${number * 100}%`;\n\t\tconst liHeight = `calc(${(1 / number) * 100}% - 1px)`;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={'dropdown-container'}\n\t\t\t\tstyle={{\n\t\t\t\t\t...customStyles,\n\t\t\t\t\tgridRow,\n\t\t\t\t\tgridColumn: `${gridColumn + 1}`,\n\t\t\t\t}}\n\t\t\t\tref={this.container}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`selected-value ${this.props.className} ${showList ? 'active' : ''}`}\n\t\t\t\t\tonClick={clickEvent =>\n\t\t\t\t\t\tthis.handleDisplay(clickEvent, gridColumn - 1, gridRow - 2)\n\t\t\t\t\t}\n\t\t\t\t\tonKeyDown={e => this.onKeyDown(e, gridColumn - 1, gridRow - 2)}\n\t\t\t\t\tcontentEditable='true'\n\t\t\t\t\tsuppressContentEditableWarning={true}\n\t\t\t\t\tonInput={this.onTextChange}\n\t\t\t\t\tref={this.selectionDisplay}\n\t\t\t\t\t// key={key}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\n\t\t\t\t{showList && (\n\t\t\t\t\t<ul className={`options-list`} style={{height: dropDownHeight}}>\n\t\t\t\t\t\t{displayedOptions.map((value, index) => {\n\t\t\t\t\t\t\t// exclude the selectedValue from dropdown list options\n\t\t\t\t\t\t\t// except if the shownValue is different to the selectedValue (happens if user types into search field)\n\t\t\t\t\t\t\t// if(value !== selectedValue || shownValue !== selectedValue) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\tstyle={{height: liHeight}}\n\t\t\t\t\t\t\t\t\tclassName={`dropdown-option ${className} ${\n\t\t\t\t\t\t\t\t\t\tindex === activeItem ? 'active' : ''\n\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tonClick={e => this.handleOptionClick(e, gridColumn - 1, gridRow - 2)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t//   else return null;\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nDropdown.defaultProps = {\n\tclassName: '',\n\tcustomStyles: {},\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}