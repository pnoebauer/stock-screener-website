{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport AddStockUniverseButton from '../add-stock-universe-button/add-stock-universe-button.component';\nimport { INTERVALS, SYMBOLS, API_TO_INDICATORS, INDICATORS_TO_API } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst permanentHeaders = ['ID', 'Symbol', 'Interval'];\nlet updateKey = null;\n\nclass RadarScreen extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getHeaderTitle = () => {\n      let headerTitle = Object.keys(this.state).filter(key => this.state[key] !== undefined); // console.log(headerTitle)\n\n      headerTitle = headerTitle.filter(item => item !== 'ID');\n      return headerTitle;\n    };\n\n    this.fetchAndSetState = (Symbol, header, clearedState, valueRow) => {\n      const {\n        fetchRealTimeData\n      } = this.props; // map the header (= state keys) to INDICATORS_TO_API; do not include permanent headers\n\n      const apiIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [INDICATORS_TO_API[item]]);\n      let stateUpdates = {}; //fetch all symbols and apiIndicators\n\n      fetchRealTimeData(Symbol, apiIndicators).then(indicatorObject => {\n        // loop over all apiIndicators\n        apiIndicators.forEach(apiIndicator => {\n          // look up the name used for the column header (and state key)\n          const indicatorColumn = API_TO_INDICATORS[apiIndicator];\n          const updatedRows = valueRow !== undefined ? Object.assign([], this.state[indicatorColumn], {\n            [valueRow]: indicatorObject[apiIndicator][0]\n          }) : indicatorObject[apiIndicator]; // merge the result of the current indicator column with the temp state object\n\n          stateUpdates = { ...stateUpdates,\n            [indicatorColumn]: updatedRows\n          };\n        });\n        return stateUpdates;\n      }).catch(e => console.log(e, 'error during fetching')) // update state to the updated indicators and the clearedState (all unused indicators set to null)\n      .then(stateUpdates => this.setState({ ...clearedState,\n        ...stateUpdates\n      }, () => {\n        // console.log(stateUpdates,clearedState,'c',{...stateUpdates,...clearedState})\n        // console.log(this.getHeaderTitle())\n        localStorage.setItem('header', this.getHeaderTitle());\n        localStorage.setItem('Symbol', this.state.Symbol);\n        localStorage.setItem('Interval', this.state.Interval);\n        localStorage.setItem('ID', this.state.ID);\n      }));\n    };\n\n    this.onChange = (updatedValue, headerCol, valueRow, rowAdded) => {\n      const header = this.getHeaderTitle(); //update the changed cell (Symbol, Interval)\n\n      this.setState(prevState => {\n        const columnName = header[headerCol]; //which column changed (Symbol, Interval)\n        // console.log(prevState.ID,'prevState.ID')\n\n        const maxID = Math.max(...prevState.ID);\n        return {\n          [columnName]: Object.assign([], prevState[columnName], {\n            [valueRow]: updatedValue\n          }),\n          Interval: rowAdded ? Object.assign([], prevState.Interval, {\n            [valueRow]: 'Daily'\n          }) : prevState.Interval,\n          ID: rowAdded ? Object.assign([], prevState.ID, {\n            [valueRow]: maxID + 1\n          }) : prevState.ID\n        };\n      }, //fetch the data for the entire row based on Symbol, Interval\n      () => {\n        const Symbol = new Array(this.state.Symbol[valueRow]);\n        this.fetchAndSetState(Symbol, header, {}, valueRow);\n      });\n    };\n\n    this.sortTable = event => {\n      this.setState((prevState, props) => {\n        const sortedTable = props.onSort(event, prevState);\n        return sortedTable;\n      });\n    };\n\n    this.handleColumnUpdate = names => {\n      const {\n        Symbol\n      } = this.state; // merge permanentHeaders with the updated column names\n\n      const header = [...permanentHeaders, ...names];\n      const clearedState = JSON.parse(JSON.stringify(this.state));\n      Object.keys(clearedState).forEach(key => {\n        if (!header.includes(key)) {\n          clearedState[key] = undefined;\n        }\n      }); // console.log(clearedState,'cl')\n\n      this.fetchAndSetState(Symbol, header, clearedState);\n    };\n\n    this.handleRowDelete = e => {\n      const rowIdx = Number(e.target.id);\n      const stateClone = JSON.parse(JSON.stringify(this.state)); // console.log(stateClone, rowIdx)\n\n      Object.keys(stateClone).forEach(key => {\n        stateClone[key].splice(rowIdx, 1);\n      });\n      this.setState(stateClone, () => {\n        localStorage.setItem('header', this.getHeaderTitle());\n        localStorage.setItem('Symbol', this.state.Symbol);\n        localStorage.setItem('Interval', this.state.Interval);\n        localStorage.setItem('ID', this.state.ID);\n      });\n    };\n\n    this.handleDeleteAllRows = e => {\n      Object.keys(this.state).forEach(key => {\n        this.setState({\n          [key]: []\n        });\n      });\n    };\n\n    this.onRowAdd = (updatedValue, headerCol, valueRow) => this.onChange(updatedValue, headerCol, valueRow, true);\n\n    this.handleUniverseAdd = symbols => {\n      const numberAddedSymbols = symbols.length;\n      const stateClone = JSON.parse(JSON.stringify(this.state));\n      const maxID = Math.max(...stateClone.ID, 0); // console.log(maxID, 'maxID');\n\n      stateClone.Symbol = [...stateClone.Symbol, ...symbols];\n      stateClone.Interval = [...stateClone.Interval, ...Array(numberAddedSymbols).fill(INTERVALS[0])];\n      stateClone.ID = [...stateClone.ID, ...[...Array(numberAddedSymbols)].map((a, idx) => idx + maxID + 1)];\n      const header = this.getHeaderTitle();\n      this.fetchAndSetState(stateClone.Symbol, header, stateClone);\n    };\n\n    this.state = {\n      Symbol: SYMBOLS.slice(0, 5),\n      Interval: Array(5).fill(INTERVALS[0]),\n      ID: [...Array(5)].map((a, idx) => idx) // 'Last Price': Array(8).fill(0)\n\n    };\n  } // Returns all the headers based on state object keys\n\n\n  componentDidMount() {\n    let {\n      Symbol,\n      Interval,\n      ID\n    } = this.state;\n    let rehydrate = {};\n    let header;\n\n    try {\n      header = localStorage.getItem('header').split(',');\n      Symbol = localStorage.getItem('Symbol').split(',');\n      Interval = localStorage.getItem('Interval').split(',');\n      ID = localStorage.getItem('ID').split(',');\n      rehydrate = { ...rehydrate,\n        Symbol,\n        Interval,\n        ID\n      }; // console.log('rehydrate',rehydrate)\n    } catch {\n      header = this.getHeaderTitle();\n    }\n\n    this.setState(rehydrate, () => {\n      // console.log('mount h', header)\n      this.fetchAndSetState(Symbol, header);\n    });\n  } //used for dropdowns - updates one row\n\n\n  render() {\n    const header = this.getHeaderTitle(); // passed from the withSort HOC\n\n    const {\n      sortConfig\n    } = this.props;\n    const {\n      Symbol\n    } = this.state;\n    const usedIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [item]);\n    updateKey = header;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        style: {\n          gridTemplateColumns: `20px repeat(${header.length}, 1fr) 0`,\n          gridTemplateRows: `repeat(${Symbol.length + 1}, 1fr) 0`\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScreenHeader, {\n          header: header,\n          sortTable: this.sortTable,\n          sortConfig: sortConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddColumnButton, {\n          style: {\n            gridColumn: `${header.length + 2}`\n          },\n          handleColumnUpdate: this.handleColumnUpdate,\n          usedIndicatorsDefault: usedIndicators\n        }, updateKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(GenerateGrid, { ...this.state,\n          header: header,\n          onChange: this.onChange,\n          handleRowDelete: this.handleRowDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          options: SYMBOLS,\n          gridRow: Symbol.length + 2,\n          gridColumn: 1 // key={colIdx.toString()+rowIdx.toString()}\n          ,\n          onChange: this.onRowAdd,\n          customStyles: {\n            height: '30px',\n            borderBottom: '1px solid black',\n            borderLeft: '1px solid black',\n            marginLeft: '-1px'\n          },\n          className: 'add-row',\n          children: SYMBOLS[Symbol.length]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddStockUniverseButton, {\n          style: {\n            gridColumn: '1',\n            gridRow: '1'\n          },\n          handleUniverseAdd: this.handleUniverseAdd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: 'none',\n            gridColumn: '1',\n            gridRow: `${Symbol.length} + 2`,\n            height: '31px',\n            borderBottom: '1px solid black',\n            borderLeft: '1px solid black',\n            borderTop: '1px solid black',\n            marginLeft: '-1px'\n          },\n          onClick: this.handleDeleteAllRows,\n          children: \"XX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","AddColumnButton","Dropdown","AddStockUniverseButton","INTERVALS","SYMBOLS","API_TO_INDICATORS","INDICATORS_TO_API","permanentHeaders","updateKey","RadarScreen","Component","constructor","props","getHeaderTitle","headerTitle","Object","keys","state","filter","key","undefined","item","fetchAndSetState","Symbol","header","clearedState","valueRow","fetchRealTimeData","apiIndicators","flatMap","includes","stateUpdates","then","indicatorObject","forEach","apiIndicator","indicatorColumn","updatedRows","assign","catch","e","console","log","setState","localStorage","setItem","Interval","ID","onChange","updatedValue","headerCol","rowAdded","prevState","columnName","maxID","Math","max","Array","sortTable","event","sortedTable","onSort","handleColumnUpdate","names","JSON","parse","stringify","handleRowDelete","rowIdx","Number","target","id","stateClone","splice","handleDeleteAllRows","onRowAdd","handleUniverseAdd","symbols","numberAddedSymbols","length","fill","map","a","idx","slice","componentDidMount","rehydrate","getItem","split","render","sortConfig","usedIndicators","gridTemplateColumns","gridTemplateRows","gridColumn","height","borderBottom","borderLeft","marginLeft","gridRow","border","borderTop"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport AddStockUniverseButton from '../add-stock-universe-button/add-stock-universe-button.component';\n\nimport {\n\tINTERVALS,\n\tSYMBOLS,\n\tAPI_TO_INDICATORS,\n\tINDICATORS_TO_API,\n} from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst permanentHeaders = ['ID', 'Symbol', 'Interval'];\n\nlet updateKey = null;\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tSymbol: SYMBOLS.slice(0, 5),\n\t\t\tInterval: Array(5).fill(INTERVALS[0]),\n\t\t\tID: [...Array(5)].map((a, idx) => idx),\n\t\t\t// 'Last Price': Array(8).fill(0)\n\t\t};\n\t}\n\n\t// Returns all the headers based on state object keys\n\tgetHeaderTitle = () => {\n\t\tlet headerTitle = Object.keys(this.state).filter(\n\t\t\tkey => this.state[key] !== undefined\n\t\t);\n\t\t// console.log(headerTitle)\n\t\theaderTitle = headerTitle.filter(item => item !== 'ID');\n\t\treturn headerTitle;\n\t};\n\n\tfetchAndSetState = (Symbol, header, clearedState, valueRow) => {\n\t\tconst {fetchRealTimeData} = this.props;\n\n\t\t// map the header (= state keys) to INDICATORS_TO_API; do not include permanent headers\n\t\tconst apiIndicators = header.flatMap(item =>\n\t\t\tpermanentHeaders.includes(item) ? [] : [INDICATORS_TO_API[item]]\n\t\t);\n\n\t\tlet stateUpdates = {};\n\n\t\t//fetch all symbols and apiIndicators\n\t\tfetchRealTimeData(Symbol, apiIndicators)\n\t\t\t.then(indicatorObject => {\n\t\t\t\t// loop over all apiIndicators\n\t\t\t\tapiIndicators.forEach(apiIndicator => {\n\t\t\t\t\t// look up the name used for the column header (and state key)\n\t\t\t\t\tconst indicatorColumn = API_TO_INDICATORS[apiIndicator];\n\n\t\t\t\t\tconst updatedRows =\n\t\t\t\t\t\tvalueRow !== undefined\n\t\t\t\t\t\t\t? Object.assign([], this.state[indicatorColumn], {\n\t\t\t\t\t\t\t\t\t[valueRow]: indicatorObject[apiIndicator][0],\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: indicatorObject[apiIndicator];\n\n\t\t\t\t\t// merge the result of the current indicator column with the temp state object\n\t\t\t\t\tstateUpdates = {\n\t\t\t\t\t\t...stateUpdates,\n\t\t\t\t\t\t[indicatorColumn]: updatedRows,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn stateUpdates;\n\t\t\t})\n\t\t\t.catch(e => console.log(e, 'error during fetching'))\n\t\t\t// update state to the updated indicators and the clearedState (all unused indicators set to null)\n\t\t\t.then(stateUpdates =>\n\t\t\t\tthis.setState({...clearedState, ...stateUpdates}, () => {\n\t\t\t\t\t// console.log(stateUpdates,clearedState,'c',{...stateUpdates,...clearedState})\n\t\t\t\t\t// console.log(this.getHeaderTitle())\n\t\t\t\t\tlocalStorage.setItem('header', this.getHeaderTitle());\n\t\t\t\t\tlocalStorage.setItem('Symbol', this.state.Symbol);\n\t\t\t\t\tlocalStorage.setItem('Interval', this.state.Interval);\n\t\t\t\t\tlocalStorage.setItem('ID', this.state.ID);\n\t\t\t\t})\n\t\t\t);\n\t};\n\n\tcomponentDidMount() {\n\t\tlet {Symbol, Interval, ID} = this.state;\n\t\tlet rehydrate = {};\n\t\tlet header;\n\t\ttry {\n\t\t\theader = localStorage.getItem('header').split(',');\n\t\t\tSymbol = localStorage.getItem('Symbol').split(',');\n\t\t\tInterval = localStorage.getItem('Interval').split(',');\n\t\t\tID = localStorage.getItem('ID').split(',');\n\n\t\t\trehydrate = {...rehydrate, Symbol, Interval, ID};\n\t\t\t// console.log('rehydrate',rehydrate)\n\t\t} catch {\n\t\t\theader = this.getHeaderTitle();\n\t\t}\n\n\t\tthis.setState(rehydrate, () => {\n\t\t\t// console.log('mount h', header)\n\t\t\tthis.fetchAndSetState(Symbol, header);\n\t\t});\n\t}\n\n\t//used for dropdowns - updates one row\n\tonChange = (updatedValue, headerCol, valueRow, rowAdded) => {\n\t\tconst header = this.getHeaderTitle();\n\n\t\t//update the changed cell (Symbol, Interval)\n\t\tthis.setState(\n\t\t\tprevState => {\n\t\t\t\tconst columnName = header[headerCol]; //which column changed (Symbol, Interval)\n\t\t\t\t// console.log(prevState.ID,'prevState.ID')\n\t\t\t\tconst maxID = Math.max(...prevState.ID);\n\t\t\t\treturn {\n\t\t\t\t\t[columnName]: Object.assign([], prevState[columnName], {\n\t\t\t\t\t\t[valueRow]: updatedValue,\n\t\t\t\t\t}),\n\t\t\t\t\tInterval: rowAdded\n\t\t\t\t\t\t? Object.assign([], prevState.Interval, {[valueRow]: 'Daily'})\n\t\t\t\t\t\t: prevState.Interval,\n\t\t\t\t\tID: rowAdded\n\t\t\t\t\t\t? Object.assign([], prevState.ID, {[valueRow]: maxID + 1})\n\t\t\t\t\t\t: prevState.ID,\n\t\t\t\t};\n\t\t\t},\n\t\t\t//fetch the data for the entire row based on Symbol, Interval\n\t\t\t() => {\n\t\t\t\tconst Symbol = new Array(this.state.Symbol[valueRow]);\n\t\t\t\tthis.fetchAndSetState(Symbol, header, {}, valueRow);\n\t\t\t}\n\t\t);\n\t};\n\n\tsortTable = event => {\n\t\tthis.setState((prevState, props) => {\n\t\t\tconst sortedTable = props.onSort(event, prevState);\n\t\t\treturn sortedTable;\n\t\t});\n\t};\n\n\thandleColumnUpdate = names => {\n\t\tconst {Symbol} = this.state;\n\t\t// merge permanentHeaders with the updated column names\n\t\tconst header = [...permanentHeaders, ...names];\n\n\t\tconst clearedState = JSON.parse(JSON.stringify(this.state));\n\n\t\tObject.keys(clearedState).forEach(key => {\n\t\t\tif (!header.includes(key)) {\n\t\t\t\tclearedState[key] = undefined;\n\t\t\t}\n\t\t});\n\n\t\t// console.log(clearedState,'cl')\n\n\t\tthis.fetchAndSetState(Symbol, header, clearedState);\n\t};\n\n\thandleRowDelete = e => {\n\t\tconst rowIdx = Number(e.target.id);\n\t\tconst stateClone = JSON.parse(JSON.stringify(this.state));\n\n\t\t// console.log(stateClone, rowIdx)\n\n\t\tObject.keys(stateClone).forEach(key => {\n\t\t\tstateClone[key].splice(rowIdx, 1);\n\t\t});\n\n\t\tthis.setState(stateClone, () => {\n\t\t\tlocalStorage.setItem('header', this.getHeaderTitle());\n\t\t\tlocalStorage.setItem('Symbol', this.state.Symbol);\n\t\t\tlocalStorage.setItem('Interval', this.state.Interval);\n\t\t\tlocalStorage.setItem('ID', this.state.ID);\n\t\t});\n\t};\n\n\thandleDeleteAllRows = e => {\n\t\tObject.keys(this.state).forEach(key => {\n\t\t\tthis.setState({[key]: []});\n\t\t});\n\t};\n\n\tonRowAdd = (updatedValue, headerCol, valueRow) =>\n\t\tthis.onChange(updatedValue, headerCol, valueRow, true);\n\n\thandleUniverseAdd = symbols => {\n\t\tconst numberAddedSymbols = symbols.length;\n\n\t\tconst stateClone = JSON.parse(JSON.stringify(this.state));\n\t\tconst maxID = Math.max(...stateClone.ID, 0);\n\t\t// console.log(maxID, 'maxID');\n\n\t\tstateClone.Symbol = [...stateClone.Symbol, ...symbols];\n\t\tstateClone.Interval = [\n\t\t\t...stateClone.Interval,\n\t\t\t...Array(numberAddedSymbols).fill(INTERVALS[0]),\n\t\t];\n\t\tstateClone.ID = [\n\t\t\t...stateClone.ID,\n\t\t\t...[...Array(numberAddedSymbols)].map((a, idx) => idx + maxID + 1),\n\t\t];\n\n\t\tconst header = this.getHeaderTitle();\n\n\t\tthis.fetchAndSetState(stateClone.Symbol, header, stateClone);\n\t};\n\n\trender() {\n\t\tconst header = this.getHeaderTitle();\n\t\t// passed from the withSort HOC\n\t\tconst {sortConfig} = this.props;\n\t\tconst {Symbol} = this.state;\n\n\t\tconst usedIndicators = header.flatMap(item =>\n\t\t\tpermanentHeaders.includes(item) ? [] : [item]\n\t\t);\n\n\t\tupdateKey = header;\n\n\t\treturn (\n\t\t\t<div className='radarscreen'>\n\t\t\t\t<div\n\t\t\t\t\tid='grid-container'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tgridTemplateColumns: `20px repeat(${header.length}, 1fr) 0`,\n\t\t\t\t\t\tgridTemplateRows: `repeat(${Symbol.length + 1}, 1fr) 0`,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<ScreenHeader\n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tsortTable={this.sortTable}\n\t\t\t\t\t\tsortConfig={sortConfig}\n\t\t\t\t\t/>\n\t\t\t\t\t<AddColumnButton\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tgridColumn: `${header.length + 2}`,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\thandleColumnUpdate={this.handleColumnUpdate}\n\t\t\t\t\t\tusedIndicatorsDefault={usedIndicators}\n\t\t\t\t\t\tkey={updateKey}\n\t\t\t\t\t/>\n\t\t\t\t\t<GenerateGrid\n\t\t\t\t\t\t{...this.state}\n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\thandleRowDelete={this.handleRowDelete}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\toptions={SYMBOLS}\n\t\t\t\t\t\tgridRow={Symbol.length + 2}\n\t\t\t\t\t\tgridColumn={1}\n\t\t\t\t\t\t// key={colIdx.toString()+rowIdx.toString()}\n\t\t\t\t\t\tonChange={this.onRowAdd}\n\t\t\t\t\t\tcustomStyles={{\n\t\t\t\t\t\t\theight: '30px',\n\t\t\t\t\t\t\tborderBottom: '1px solid black',\n\t\t\t\t\t\t\tborderLeft: '1px solid black',\n\t\t\t\t\t\t\tmarginLeft: '-1px',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName={'add-row'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{SYMBOLS[Symbol.length]}\n\t\t\t\t\t</Dropdown>\n\n\t\t\t\t\t<AddStockUniverseButton\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tgridColumn: '1',\n\t\t\t\t\t\t\tgridRow: '1',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\thandleUniverseAdd={this.handleUniverseAdd}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborder: 'none',\n\n\t\t\t\t\t\t\tgridColumn: '1',\n\t\t\t\t\t\t\tgridRow: `${Symbol.length} + 2`,\n\t\t\t\t\t\t\theight: '31px',\n\t\t\t\t\t\t\tborderBottom: '1px solid black',\n\t\t\t\t\t\t\tborderLeft: '1px solid black',\n\t\t\t\t\t\t\tborderTop: '1px solid black',\n\t\t\t\t\t\t\tmarginLeft: '-1px',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={this.handleDeleteAllRows}\n\t\t\t\t\t>\n\t\t\t\t\t\tXX\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default RadarScreen;\n"]},"metadata":{},"sourceType":"module"}