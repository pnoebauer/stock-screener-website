{"ast":null,"code":"import React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\nimport './radarscreen.styles.css';\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\nconst headerConst = ['Symbol', 'Interval', 'Price'];\nconst selectTbl = {\n  Symbol: SYMBOLS,\n  Interval: INTERVALS\n}; // const fetchRealTimeData = async (symbol) => {\n// \tconst params = {apikey, symbol};\n// \tconst queryExt = new URLSearchParams(params).toString();\n// \tconst queryString = urlRealTime.concat('?', queryExt);\n// \tconst response = await fetch(queryString);\n// \tif (!response.ok) {\n// \t\tconst message = `An error has occured: ${response.status}`;\n// \t\tthrow new Error(message);\n// \t}\n// \tconst data = await response.json();\n// \treturn data;\n// }\n// Symbol: SP500.slice(0,8),\n// Interval: Array(8).fill(INTERVALS[0]),\n// Price: Array(8).fill(0)\n\nconst createSymbolRow = (Symbol, Interval, Price) => {\n  const rowArray = Symbol.map((value, index) => {\n    return {\n      Symbol: value,\n      Interval: Interval[index],\n      Price: Price[index],\n      idx: index\n    };\n  });\n  console.log(rowArray);\n  return rowArray;\n};\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    const Symbol = SP500.slice(0, 8);\n    const Interval = Array(8).fill(INTERVALS[0]);\n    const Price = Array(8).fill(0);\n    symbolRow = createSymbolRow(Symbol, Interval, Price);\n    this.state = {\n      header: headerConst,\n      symbolRow\n    };\n    console.log(this.state);\n  } // componentDidMount() {\n  // \tconst { Symbol } = this.state;\n  // \tfetchRealTimeData(Symbol)\n  // \t\t.then(data => {\n  // \t\t\tconst prices = Symbol.map((symbolName, index) => {\n  // \t\t\t\treturn data[symbolName].lastPrice;\n  // \t\t\t})\n  // \t\t\t// console.log(prices);\n  // \t\t\tthis.setState({\n  // \t\t\t\tPrice: prices\n  // \t\t\t});\n  // \t\t})\n  // }\n  // onChange = (updatedValue, headerCol, valueRow) => {\n  // \tconst stateKey = this.state.header[headerCol];\n  // \tconst values = [...this.state[stateKey]];\n  // \tconst prices = [...this.state.Price];\n  // \tvalues[valueRow] = updatedValue;\n  // \t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n  // \tlet symbol = updatedValue, interval = updatedValue;\n  // \tif (stateKey==='Symbol') {\n  // \t\tinterval = this.state.Interval[valueRow];\n  // \t}\n  // \telse if (stateKey==='Interval'){\n  // \t\tsymbol = this.state.Symbol[valueRow];\n  // \t}\n  // \t// console.log('symbol', symbol, 'interval', interval);\n  // \tfetchRealTimeData(symbol)\n  // \t\t.then(data => {\n  // \t\t\tconst lastPrice = data[symbol].lastPrice;\n  // \t\t\t// console.log(lastPrice);\n  // \t\t\tprices[valueRow] = lastPrice;\n  // \t\t\t// console.log(prices);\n  // \t\t\tthis.setState({\n  // \t\t\t\tPrice: prices\n  // \t\t\t});\n  // \t\t})\n  // \t\t.catch(e => {\n  // \t\t\tconsole.log('An error occurred during fetching: ' + e.message);\n  // \t  \t});\n  // \tthis.setState({\n  // \t\t[stateKey]: values\n  // \t});\n  // }\n  // render() {\n  // \tconst { header } = this.state;\n  // \tconsole.log(this.state)\n  // \treturn(\n  // \t\t<div className=\"radarscreen\">\n  // \t\t\t<div className='space'></div>\n  // \t\t\t<div id=\"grid-container\">\n  // \t\t\t\t{\n  // \t\t\t\t\theader.map((value, colIdx) => (\n  // \t\t\t\t\t\t\t<ScreenHeader \n  // \t\t\t\t\t\t\t\tkey={colIdx.toString()} \n  // \t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n  // \t\t\t\t\t\t\t>\n  // \t\t\t\t\t\t\t\t{value}\n  // \t\t\t\t\t\t\t</ScreenHeader>\n  // \t\t\t\t\t\t)\n  // \t\t\t\t\t)\n  // \t\t\t\t}\n  // \t\t\t\t{\n  // \t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n  // \t\t\t\t\theader.map((value, colIdx) => this.state[value].map((rowVal,rowIdx) => {\n  // \t\t\t\t\t\t\tif(selectTbl[header[colIdx]] !== undefined) {\n  // \t\t\t\t\t\t\t\treturn (\n  // \t\t\t\t\t\t\t\t\t<Dropdown \n  // \t\t\t\t\t\t\t\t\t\toptions={selectTbl[header[colIdx]]}\n  // \t\t\t\t\t\t\t\t\t\tdefaultValue={this.state[header[colIdx]][rowIdx]}\n  // \t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n  // \t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n  // \t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n  // \t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n  // \t\t\t\t\t\t\t\t\t/> \n  // \t\t\t\t\t\t\t\t)\n  // \t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\telse {\n  // \t\t\t\t\t\t\t\treturn (\n  // \t\t\t\t\t\t\t\t\t<ValueCell \n  // \t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n  // \t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n  // \t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n  // \t\t\t\t\t\t\t\t\t>\n  // \t\t\t\t\t\t\t\t\t\t{rowVal}\n  // \t\t\t\t\t\t\t\t\t</ValueCell>\n  // \t\t\t\t\t\t\t\t)\n  // \t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t})\n  // \t\t\t\t\t) \n  // \t\t\t\t}\n  // \t\t\t</div>\n  // \t</div>\n  // \t)\n  // }\n\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","Dropdown","ValueCell","SYMBOLS","INTERVALS","SP500","urlRealTime","apikey","headerConst","selectTbl","Symbol","Interval","createSymbolRow","Price","rowArray","map","value","index","idx","console","log","RadarScreen","Component","constructor","props","slice","Array","fill","symbolRow","state","header"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AAEA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,KAA7B,QAA0C,wBAA1C;AAEA,OAAO,0BAAP;AAEA,MAAMC,WAAW,GAAG,mDAApB;AACA,MAAMC,MAAM,GAAG,kCAAf;AAEA,MAAMC,WAAW,GAAG,CAAC,QAAD,EAAW,UAAX,EAAuB,OAAvB,CAApB;AAEA,MAAMC,SAAS,GAAG;AACjBC,EAAAA,MAAM,EAAEP,OADS;AAEjBQ,EAAAA,QAAQ,EAAEP;AAFO,CAAlB,C,CAKA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;;AAEA,MAAMQ,eAAe,GAAG,CAACF,MAAD,EAASC,QAAT,EAAmBE,KAAnB,KAA6B;AAEpD,QAAMC,QAAQ,GAAGJ,MAAM,CAACK,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC7C,WAAO;AACNP,MAAAA,MAAM,EAAEM,KADF;AAENL,MAAAA,QAAQ,EAAEA,QAAQ,CAACM,KAAD,CAFZ;AAGNJ,MAAAA,KAAK,EAAEA,KAAK,CAACI,KAAD,CAHN;AAINC,MAAAA,GAAG,EAAED;AAJC,KAAP;AAMA,GAPgB,CAAjB;AASAE,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAEA,SAAOA,QAAP;AACA,CAdD;;AAgBA,MAAMO,WAAN,SAA0BtB,KAAK,CAACuB,SAAhC,CAA0C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,UAAMd,MAAM,GAAGL,KAAK,CAACoB,KAAN,CAAY,CAAZ,EAAc,CAAd,CAAf;AACA,UAAMd,QAAQ,GAAGe,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcvB,SAAS,CAAC,CAAD,CAAvB,CAAjB;AACA,UAAMS,KAAK,GAAGa,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,CAAd,CAAd;AACAC,IAAAA,SAAS,GAAGhB,eAAe,CAACF,MAAD,EAASC,QAAT,EAAmBE,KAAnB,CAA3B;AAEA,SAAKgB,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAEtB,WADI;AAEZoB,MAAAA;AAFY,KAAb;AAKAT,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKS,KAAjB;AACA,GAdwC,CAgBzC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAnIyC;;AAuI1C,eAAeR,WAAf","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\n\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\n\nconst headerConst = ['Symbol', 'Interval', 'Price']\n\nconst selectTbl = {\n\tSymbol: SYMBOLS,\n\tInterval: INTERVALS\n}\n\n// const fetchRealTimeData = async (symbol) => {\n// \tconst params = {apikey, symbol};\n\t\n// \tconst queryExt = new URLSearchParams(params).toString();\n// \tconst queryString = urlRealTime.concat('?', queryExt);\n\n// \tconst response = await fetch(queryString);\n\n// \tif (!response.ok) {\n// \t\tconst message = `An error has occured: ${response.status}`;\n// \t\tthrow new Error(message);\n// \t}\n\n// \tconst data = await response.json();\n\n// \treturn data;\n// }\n\n// Symbol: SP500.slice(0,8),\n// Interval: Array(8).fill(INTERVALS[0]),\n// Price: Array(8).fill(0)\n\nconst createSymbolRow = (Symbol, Interval, Price) => {\n\t\n\tconst rowArray = Symbol.map((value, index) => {\n\t\treturn {\n\t\t\tSymbol: value,\n\t\t\tInterval: Interval[index],\n\t\t\tPrice: Price[index],\n\t\t\tidx: index\n\t\t}\n\t});\n\n\tconsole.log(rowArray)\n\n\treturn rowArray;\n}\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconst Symbol = SP500.slice(0,8);\n\t\tconst Interval = Array(8).fill(INTERVALS[0]);\n\t\tconst Price = Array(8).fill(0);\n\t\tsymbolRow = createSymbolRow(Symbol, Interval, Price);\n\n\t\tthis.state = {\n\t\t\theader: headerConst,\n\t\t\tsymbolRow\n\t\t}\n\n\t\tconsole.log(this.state)\n\t}\n\n\t// componentDidMount() {\n\t// \tconst { Symbol } = this.state;\n\n\t// \tfetchRealTimeData(Symbol)\n\t// \t\t.then(data => {\n\t// \t\t\tconst prices = Symbol.map((symbolName, index) => {\n\t// \t\t\t\treturn data[symbolName].lastPrice;\n\t// \t\t\t})\n\t// \t\t\t// console.log(prices);\n\t// \t\t\tthis.setState({\n\t// \t\t\t\tPrice: prices\n\t// \t\t\t});\n\t// \t\t})\n\t// }\n\n\t// onChange = (updatedValue, headerCol, valueRow) => {\n\n\t// \tconst stateKey = this.state.header[headerCol];\n\t// \tconst values = [...this.state[stateKey]];\n\t// \tconst prices = [...this.state.Price];\n\n\t// \tvalues[valueRow] = updatedValue;\n\n\t// \t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\t\t\n\t// \tlet symbol = updatedValue, interval = updatedValue;\n\t// \tif (stateKey==='Symbol') {\n\t// \t\tinterval = this.state.Interval[valueRow];\n\t// \t}\n\t// \telse if (stateKey==='Interval'){\n\t// \t\tsymbol = this.state.Symbol[valueRow];\n\t// \t}\n\n\t// \t// console.log('symbol', symbol, 'interval', interval);\n\n\t// \tfetchRealTimeData(symbol)\n\t// \t\t.then(data => {\n\t// \t\t\tconst lastPrice = data[symbol].lastPrice;\n\t// \t\t\t// console.log(lastPrice);\n\n\t// \t\t\tprices[valueRow] = lastPrice;\n\n\t// \t\t\t// console.log(prices);\n\n\t// \t\t\tthis.setState({\n\t// \t\t\t\tPrice: prices\n\t// \t\t\t});\n\n\t// \t\t})\n\t// \t\t.catch(e => {\n\t// \t\t\tconsole.log('An error occurred during fetching: ' + e.message);\n\t// \t  \t});\n\n\n\t// \tthis.setState({\n\t// \t\t[stateKey]: values\n\t// \t});\n\t// }\n\n\t// render() {\n\n\t// \tconst { header } = this.state;\n\n\t// \tconsole.log(this.state)\n\n\t// \treturn(\n\t// \t\t<div className=\"radarscreen\">\n\t// \t\t\t<div className='space'></div>\n\t\t\t\t\n\t// \t\t\t<div id=\"grid-container\">\n\t// \t\t\t\t{\n\t// \t\t\t\t\theader.map((value, colIdx) => (\n\t// \t\t\t\t\t\t\t<ScreenHeader \n\t// \t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t// \t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t// \t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t{value}\n\t// \t\t\t\t\t\t\t</ScreenHeader>\n\t// \t\t\t\t\t\t)\n\t// \t\t\t\t\t)\n\t// \t\t\t\t}\n\t\t\t\t\t\n\t// \t\t\t\t{\n\t// \t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t// \t\t\t\t\theader.map((value, colIdx) => this.state[value].map((rowVal,rowIdx) => {\n\t// \t\t\t\t\t\t\tif(selectTbl[header[colIdx]] !== undefined) {\n\t// \t\t\t\t\t\t\t\treturn (\n\t// \t\t\t\t\t\t\t\t\t<Dropdown \n\t// \t\t\t\t\t\t\t\t\t\toptions={selectTbl[header[colIdx]]}\n\t// \t\t\t\t\t\t\t\t\t\tdefaultValue={this.state[header[colIdx]][rowIdx]}\n\t// \t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t// \t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t// \t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t// \t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n\t// \t\t\t\t\t\t\t\t\t/> \n\t// \t\t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\telse {\n\t// \t\t\t\t\t\t\t\treturn (\n\t// \t\t\t\t\t\t\t\t\t<ValueCell \n\t// \t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t// \t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t// \t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t// \t\t\t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t\t\t{rowVal}\n\t// \t\t\t\t\t\t\t\t\t</ValueCell>\n\t// \t\t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t})\n\t// \t\t\t\t\t) \n\t// \t\t\t\t}\n\t\t\t\t\t\n\t// \t\t\t</div>\n\t// \t</div>\n\t// \t)\n\t// }\n}\n\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}