{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/grid-row.component.jsx\";\nimport React from 'react';\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GridRow = ({\n  rowValues,\n  rowIdx,\n  header,\n  onChange\n}) => {\n  // console.log(rowValues, rowIdx)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: rowValues.map((value, colIdx) => {\n      // console.log('ggc',header[colIdx], value)\n      return /*#__PURE__*/_jsxDEV(GenerateGridCell, {\n        type: header[colIdx],\n        gridLocation: {\n          rowIdx,\n          colIdx\n        },\n        onChange: onChange,\n        children: value\n      }, header[colIdx], false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false);\n};\n\n_c = GridRow;\nexport default GridRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridRow\");","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/grid-row.component.jsx"],"names":["React","GenerateGridCell","GridRow","rowValues","rowIdx","header","onChange","map","value","colIdx"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,oDAA7B;;;;AAGA,MAAMC,OAAO,GAAG,CAAE;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,MAAb;AAAqBC,EAAAA,MAArB;AAA6BC,EAAAA;AAA7B,CAAF,KAA+C;AAC3D;AACA,sBACI;AAAA,cAEQH,SAAS,CAACI,GAAV,CAAc,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B;AACA,0BACI,QAAC,gBAAD;AACI,QAAA,IAAI,EAAEJ,MAAM,CAACI,MAAD,CADhB;AAEI,QAAA,YAAY,EAAE;AAACL,UAAAA,MAAD;AAASK,UAAAA;AAAT,SAFlB;AAGI,QAAA,QAAQ,EAAEH,QAHd;AAAA,kBAMKE;AANL,SAISH,MAAM,CAACI,MAAD,CAJf;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH,KAZD;AAFR,mBADJ;AAmBH,CArBD;;KAAMP,O;AAuBN,eAAeA,OAAf","sourcesContent":["import React from 'react';\n\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n\n\nconst GridRow = ( { rowValues, rowIdx, header, onChange } ) => {\n    // console.log(rowValues, rowIdx)\n    return (\n        <>\n            {\n                rowValues.map((value, colIdx) => {\n                    // console.log('ggc',header[colIdx], value)\n                    return (\n                        <GenerateGridCell\n                            type={header[colIdx]}\n                            gridLocation={{rowIdx, colIdx}}\n                            onChange={onChange}\n                            key={header[colIdx]} \n                        >\n                            {value}\n                        </GenerateGridCell>\n                    )\n                })\n            }\n        </>\n    )\n}\n\nexport default GridRow;"]},"metadata":{},"sourceType":"module"}