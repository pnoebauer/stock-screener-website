{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withSorting.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withSorting(WrappedComponent) {\n  class WithSorting extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.sortTable = (tableObject, sortedField, direction) => {\n        console.log('sort'); // const stateClone = JSON.parse(JSON.stringify(tableObject));\n        // delete stateClone.header;\n        // delete stateClone.sortConfig;\n        // // console.log(stateClone,'stateClone orig');\n        // const list = [...stateClone[sortedField]];\n        // // console.log(list);\n        // // temporary array holds objects with position and sort-value\n        // const mapped = list.map((value, index) => {\n        //     if(typeof(value) ==='string') value = value.toLowerCase();\n        //     return { \n        //           index, \n        //           value \n        //         };\n        //     }\n        // );\n        // // console.log(mapped);\n        // // sorting the mapped array containing the reduced values\n        // mapped.sort((a, b) => {\n        //     if (a.value > b.value) {\n        //         return direction;\n        //     }\n        //     if (a.value < b.value) {\n        //         return -direction;\n        //     }\n        //     return 0;\n        // });\n        // // console.log(mapped);\n        // // table headers (Symbol, Interval, Price, ...)\n        // const columnHeaders = Object.keys(stateClone);\n        // // loop over each header and resort its rows based on mapped array\n        // columnHeaders.forEach(column => {\n        //     // reorders the current column based on the resorted list (stored in mapped)\n        //     stateClone[column] = mapped.map(element => stateClone[column][element.index]);\n        //     // console.log(stateClone[column],'mapped')\n        //     // console.log(stateClone,'stateClone')\n        // })\n        // // console.log(stateClone,'stateClone fin')\n        // return stateClone;\n      };\n\n      this.onSort = (event, list) => {\n        const {\n          sortConfig\n        } = this.state; // console.log('click',event.target.id)\n        // console.log('click',event.target.id, list)\n\n        const sortedField = event.target.id; // // const list = [...this.state[sortedField]]\n\n        let direction = 1;\n\n        if (sortConfig.sortedField === sortedField) {\n          if (sortConfig.direction === direction) {\n            direction = -1;\n          }\n        } // const sortedData = sortTable(this.state, sortedField, direction);\n\n\n        sortTable({}, sortedField, direction); // this.setState(sortedData);\n\n        this.setState({\n          sortConfig: {\n            sortedField,\n            direction\n          }\n        });\n      };\n\n      this.state = {\n        sortConfig: {}\n      };\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        onSort: this.onSort,\n        sortTable: this.sortTable,\n        ...this.state,\n        ...this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this);\n    }\n\n  }\n\n  return WithSorting;\n}\n\nexport default withSorting;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withSorting.jsx"],"names":["React","withSorting","WrappedComponent","WithSorting","Component","constructor","props","sortTable","tableObject","sortedField","direction","console","log","onSort","event","list","sortConfig","state","target","id","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,WAAT,CAAqBC,gBAArB,EAAuC;AACnC,QAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAA0C;AAEtCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;;AADe,WAOnBC,SAPmB,GAOP,CAACC,WAAD,EAAcC,WAAd,EAA2BC,SAA3B,KAAyC;AACjDC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADiD,CAGjD;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACH,OA1DkB;;AAAA,WA4DnBC,MA5DmB,GA4DV,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACtB,cAAM;AAAEC,UAAAA;AAAF,YAAiB,KAAKC,KAA5B,CADsB,CAEtB;AACA;;AAEA,cAAMR,WAAW,GAAGK,KAAK,CAACI,MAAN,CAAaC,EAAjC,CALsB,CAMtB;;AAEA,YAAIT,SAAS,GAAG,CAAhB;;AAEA,YAAGM,UAAU,CAACP,WAAX,KAA2BA,WAA9B,EAA2C;AACvC,cAAGO,UAAU,CAACN,SAAX,KAAyBA,SAA5B,EAAuC;AACnCA,YAAAA,SAAS,GAAG,CAAC,CAAb;AACH;AACJ,SAdqB,CAgBtB;;;AACAH,QAAAA,SAAS,CAAC,EAAD,EAAKE,WAAL,EAAkBC,SAAlB,CAAT,CAjBsB,CAkBtB;;AAEA,aAAKU,QAAL,CAAc;AACVJ,UAAAA,UAAU,EAAE;AACRP,YAAAA,WADQ;AAERC,YAAAA;AAFQ;AADF,SAAd;AAOH,OAvFkB;;AAEf,WAAKO,KAAL,GAAa;AACTD,QAAAA,UAAU,EAAE;AADH,OAAb;AAGH;;AAqFDK,IAAAA,MAAM,GAAG;AACL,0BACI,QAAC,gBAAD;AAAkB,QAAA,MAAM,EAAE,KAAKR,MAA/B;AAAuC,QAAA,SAAS,EAAE,KAAKN,SAAvD;AAAA,WAAsE,KAAKU,KAA3E;AAAA,WAAsF,KAAKX;AAA3F;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;;AAhGqC;;AAkG1C,SAAOH,WAAP;AACH;;AAED,eAAeF,WAAf","sourcesContent":["import React from 'react';\n\nfunction withSorting(WrappedComponent) {\n    class WithSorting extends React.Component {\n\n        constructor(props) {\n            super(props);\n            this.state = {\n                sortConfig: {}\n            };\n        }\n\n        sortTable = (tableObject, sortedField, direction) => {\n            console.log('sort')\n\t\n            // const stateClone = JSON.parse(JSON.stringify(tableObject));\n            // delete stateClone.header;\n            // delete stateClone.sortConfig;\n            \n            // // console.log(stateClone,'stateClone orig');\n            // const list = [...stateClone[sortedField]];\n            \n            // // console.log(list);\n        \n            // // temporary array holds objects with position and sort-value\n            // const mapped = list.map((value, index) => {\n            //     if(typeof(value) ==='string') value = value.toLowerCase();\n                  \n            //     return { \n            //           index, \n            //           value \n            //         };\n            //     }\n            // );\n        \n            // // console.log(mapped);\n        \n            // // sorting the mapped array containing the reduced values\n            // mapped.sort((a, b) => {\n            //     if (a.value > b.value) {\n            //         return direction;\n            //     }\n            //     if (a.value < b.value) {\n            //         return -direction;\n            //     }\n            //     return 0;\n            // });\n        \n            // // console.log(mapped);\n            // // table headers (Symbol, Interval, Price, ...)\n            // const columnHeaders = Object.keys(stateClone);\n        \n            // // loop over each header and resort its rows based on mapped array\n            // columnHeaders.forEach(column => {\n            //     // reorders the current column based on the resorted list (stored in mapped)\n            //     stateClone[column] = mapped.map(element => stateClone[column][element.index]);\n            //     // console.log(stateClone[column],'mapped')\n            //     // console.log(stateClone,'stateClone')\n            // })\n        \n            // // console.log(stateClone,'stateClone fin')\n        \n            // return stateClone;\n        }\n\n        onSort = (event, list) => {\n            const { sortConfig } = this.state;\n            // console.log('click',event.target.id)\n            // console.log('click',event.target.id, list)\n            \n            const sortedField = event.target.id;\n            // // const list = [...this.state[sortedField]]\n    \n            let direction = 1;\n    \n            if(sortConfig.sortedField === sortedField) {\n                if(sortConfig.direction === direction) {\n                    direction = -1;\n                }\n            }\n    \n            // const sortedData = sortTable(this.state, sortedField, direction);\n            sortTable({}, sortedField, direction);\n            // this.setState(sortedData);\n        \n            this.setState({\n                sortConfig: {\n                    sortedField,\n                    direction\n                }\n            });\n    \n        }\n\n\n        render() {\n            return (\n                <WrappedComponent onSort={this.onSort} sortTable={this.sortTable} {...this.state} {...this.props}/>\n            )\n        }\n    }\n    return WithSorting;\n}\n\nexport default withSorting;"]},"metadata":{},"sourceType":"module"}