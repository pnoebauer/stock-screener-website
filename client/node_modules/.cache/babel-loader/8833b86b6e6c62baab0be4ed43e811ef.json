{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown/dropdown.component.jsx\";\nimport React from 'react';\nimport './dropdown.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      children: _children\n    } = props;\n    super(props);\n\n    this.handleClickOutside = event => {\n      const {\n        options,\n        onChange,\n        gridColumn,\n        gridRow,\n        children\n      } = this.props;\n      const headerCol = gridColumn - 1;\n      const valueRow = gridRow - 2; // container exists and the click (event.target) occurs outside that container \n\n      if (this.container.current && !this.container.current.contains(event.target)) {\n        let insertValue;\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : children;\n          return {\n            showList: false,\n            shownValue: insertValue\n          };\n        }, () => {\n          if (this.selectionDisplay.current.innerText !== insertValue) {\n            //happens if typed in text does not match anything\n            // this.selectionDisplay.current.innerText = insertValue;\n            this.setState(prevState => ({\n              key: prevState.key + 1\n            }));\n          }\n\n          ;\n          document.removeEventListener('mousedown', this.handleClickOutside);\n          return onChange(insertValue, headerCol, valueRow);\n        });\n      }\n    };\n\n    this.handleDisplay = (clickEvent, headerCol, valueRow) => {\n      const {\n        options\n      } = this.props;\n      const {\n        shownValue\n      } = this.state; // comment if statement to allow closing the list even if value does not exist in options list\n\n      if (options.includes(shownValue)) {\n        this.setState(prevState => {\n          if (!prevState.showList) {\n            document.addEventListener('mousedown', this.handleClickOutside);\n          } else if (prevState.showList) {\n            document.removeEventListener('mousedown', this.handleClickOutside);\n          }\n\n          return {\n            showList: !prevState.showList\n          };\n        });\n      }\n    };\n\n    this.handleOptionClick = (event, headerCol, valueRow) => {\n      const {\n        onChange\n      } = this.props;\n      this.setState({\n        showList: false,\n        shownValue: event.target.innerText\n      });\n\n      if (this.selectionDisplay.current.innerText !== event.target.innerText) {// occurs when we type in, the text is not completed and then click on the same value that was in before\n        // i.e. current value: Monthly,\n        //      type in: Mon\n        //      click on Monthly\n        //  Because the state has not changed Mon will remain in the cell\n        // this.selectionDisplay.current.innerText = event.target.innerText;\n        // this.setState(prevState => ({key: prevState.key+1}))\n      }\n\n      document.removeEventListener('mousedown', this.handleClickOutside);\n      onChange(event.target.innerText, headerCol, valueRow);\n    };\n\n    this.onTextChange = event => {\n      const {\n        options\n      } = this.props;\n      const currentInput = event.currentTarget.textContent;\n      const newFilteredOptions = options.filter(item => {\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0; //filter all with the same start\n      });\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      });\n    };\n\n    this.onKeyDown = (event, headerCol, valueRow) => {\n      const {\n        onChange\n      } = this.props;\n      const {\n        activeItem,\n        displayedOptions\n      } = this.state;\n\n      switch (event.keyCode) {\n        // down\n        case 40:\n          if (activeItem < displayedOptions.length - 1) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              };\n            });\n          }\n\n          break;\n        // up\n\n        case 38:\n          if (activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              };\n            });\n          }\n\n          break;\n        // enter\n\n        case 13:\n          event.preventDefault();\n          this.setState(prevState => {\n            const displayedValue = prevState.displayedOptions[prevState.activeItem];\n            return {\n              activeItem: 0,\n              showList: false,\n              shownValue: displayedValue\n            };\n          }, () => {\n            if (this.selectionDisplay.current.innerText !== this.state.shownValue) {\n              this.selectionDisplay.current.innerText = this.state.shownValue;\n            }\n\n            return onChange(this.state.shownValue, headerCol, valueRow);\n          });\n          document.removeEventListener('mousedown', this.handleClickOutside);\n          break;\n\n        default:\n      }\n    };\n\n    this.container = /*#__PURE__*/React.createRef();\n    this.selectionDisplay = /*#__PURE__*/React.createRef();\n    this.state = {\n      showList: false,\n      displayedOptions: this.props.options,\n      shownValue: _children,\n      activeItem: 0,\n      key: 0\n    };\n  } //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      gridRow,\n      gridColumn,\n      customStyles,\n      className,\n      children\n    } = this.props;\n    const {\n      showList,\n      displayedOptions,\n      activeItem\n    } = this.state;\n    let number = displayedOptions.length;\n    number = number > 5 ? 5 : number < 1 ? 1 : number;\n    const dropDownHeight = `${number * 100}%`;\n    const liHeight = `calc(${1 / number * 100}% - 1px)`; // if(this.props.id==='Search') console.log(displayedOptions,showList,dropDownHeight)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'dropdown-container',\n      style: { ...customStyles,\n        gridRow,\n        gridColumn\n      },\n      ref: this.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        // className={showList ? `selected-value active ${this.props.className}` : `selected-value ${this.props.className}`}\n        className: `selected-value ${this.props.className} ${showList ? 'active' : ''}`,\n        onClick: clickEvent => this.handleDisplay(clickEvent, gridColumn - 1, gridRow - 2),\n        onKeyDown: e => this.onKeyDown(e, gridColumn - 1, gridRow - 2),\n        contentEditable: \"true\",\n        suppressContentEditableWarning: true,\n        onInput: this.onTextChange,\n        ref: this.selectionDisplay,\n        children: children\n      }, this.state.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: `options-list`,\n        style: {\n          height: dropDownHeight\n        },\n        children: displayedOptions.map((value, index) => {\n          // exclude the selectedValue from dropdown list options \n          // except if the shownValue is different to the selectedValue (happens if user types into search field)\n          // if(value !== selectedValue || shownValue !== selectedValue) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              height: liHeight\n            },\n            className: `dropdown-option ${className} ${index === activeItem ? 'active' : ''}`,\n            value: value,\n            onClick: e => this.handleOptionClick(e, gridColumn - 1, gridRow - 2),\n            children: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 21\n          }, this); // }\n          //   else return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nDropdown.defaultProps = {\n  className: '',\n  customStyles: {}\n};\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","children","handleClickOutside","event","options","onChange","gridColumn","gridRow","headerCol","valueRow","container","current","contains","target","insertValue","setState","prevState","includes","shownValue","showList","selectionDisplay","innerText","key","document","removeEventListener","handleDisplay","clickEvent","state","addEventListener","handleOptionClick","onTextChange","currentInput","currentTarget","textContent","newFilteredOptions","filter","item","toLowerCase","indexOf","displayedOptions","activeItem","onKeyDown","keyCode","length","preventDefault","displayedValue","createRef","render","customStyles","className","number","dropDownHeight","liHeight","e","height","map","value","index","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport './dropdown.styles.css';\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n      const {children} = props;\n      super(props);\n      this.container = React.createRef();\n      this.selectionDisplay = React.createRef();\n\n      this.state = {\n          showList: false,\n          displayedOptions: this.props.options,\n          shownValue: children,\n          activeItem: 0,\n          key: 0\n      };\n    }\n\n    //if click happens outside the dropdown area close the list\n    handleClickOutside = (event) => {\n      const { options, onChange, gridColumn, gridRow, children} = this.props;\n\n      const headerCol = gridColumn-1;\n      const valueRow = gridRow-2;\n\n      // container exists and the click (event.target) occurs outside that container \n      if(this.container.current && !this.container.current.contains(event.target)) {\n        let insertValue;\n\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : children;\n          \n          return {\n            showList: false,\n            shownValue: insertValue\n          }\n        }\n          , \n          () => {\n              if(this.selectionDisplay.current.innerText !== insertValue) {\n                //happens if typed in text does not match anything\n                // this.selectionDisplay.current.innerText = insertValue;\n                this.setState(prevState => ({key: prevState.key+1}))\n              };\n              document.removeEventListener('mousedown', this.handleClickOutside);\n              return onChange(insertValue, headerCol, valueRow);\n          }\n        );\n      }\n    }\n\n    //handle the displaying of the list (if currently shown, then hide and vice versa)\n    handleDisplay = (clickEvent, headerCol, valueRow) => {\n      const { options } = this.props;\n      const { shownValue } = this.state;\n\n      // comment if statement to allow closing the list even if value does not exist in options list\n      if(options.includes(shownValue)) { \n        this.setState(prevState => {\n \n          if(!prevState.showList) {\n            document.addEventListener('mousedown', this.handleClickOutside);\n          }\n          else if(prevState.showList) {\n            document.removeEventListener('mousedown', this.handleClickOutside);\n          }\n          return { showList: !prevState.showList }\n        }); \n      }\n    };\n\n    // set text based on click in displayed list\n    handleOptionClick = (event, headerCol, valueRow) => {\n      const { onChange } = this.props;\n\n      this.setState({\n        showList: false,\n        shownValue: event.target.innerText\n      });\n\n      if(this.selectionDisplay.current.innerText !== event.target.innerText) {\n        // occurs when we type in, the text is not completed and then click on the same value that was in before\n        // i.e. current value: Monthly,\n        //      type in: Mon\n        //      click on Monthly\n        //  Because the state has not changed Mon will remain in the cell\n        // this.selectionDisplay.current.innerText = event.target.innerText;\n        // this.setState(prevState => ({key: prevState.key+1}))\n      }\n\n      document.removeEventListener('mousedown', this.handleClickOutside);\n      onChange(event.target.innerText, headerCol, valueRow);\n    };\n\n    onTextChange = event => {\n      const { options } = this.props;\n\n      const currentInput = event.currentTarget.textContent;\n\n      const newFilteredOptions = options.filter(item => {\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0 //filter all with the same start\n      });\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      });\n    }\n\n    onKeyDown = (event, headerCol, valueRow) => {\n      const { onChange } = this.props;\n      const { activeItem, displayedOptions } = this.state;\n    \n      switch (event.keyCode) {\n        // down\n        case 40:\n          if(activeItem < (displayedOptions.length-1)) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              }\n            });           \n          } \n          break;\n        // up\n        case 38:\n          if(activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              }\n            });\n          } \n          break;\n        // enter\n        case 13:\n          event.preventDefault();\n          this.setState(prevState => {\n            const displayedValue = prevState.displayedOptions[prevState.activeItem];\n            return {\n              activeItem: 0,\n              showList: false,\n              shownValue: displayedValue\n            }\n          }\n          ,\n          () => {\n            if(this.selectionDisplay.current.innerText !== this.state.shownValue) {\n              this.selectionDisplay.current.innerText = this.state.shownValue;\n            }\n            return onChange(this.state.shownValue, headerCol, valueRow);\n          }\n          );\n          \n          document.removeEventListener('mousedown', this.handleClickOutside);\n          break;\n    \n        default:\n      }\n    }\n\n    render() {\n      const { gridRow, gridColumn, customStyles, className, children } = this.props;\n      const { showList, displayedOptions, activeItem } = this.state;\n      \n      let number = displayedOptions.length;\n      number = number > 5 ? 5 : number < 1 ? 1 : number;\n      \n      const dropDownHeight = `${number*100}%`;\n      const liHeight = `calc(${1/number*100}% - 1px)`;\n      \n      // if(this.props.id==='Search') console.log(displayedOptions,showList,dropDownHeight)\n\n      return (\n        <div \n          className={'dropdown-container'}\n          style={{\n            ...customStyles,\n            gridRow,\n            gridColumn\n          }}\n          ref = {this.container}\n        >\n          <div \n            // className={showList ? `selected-value active ${this.props.className}` : `selected-value ${this.props.className}`}\n            className={`selected-value ${this.props.className} ${showList ? 'active' : ''}`}\n            onClick={clickEvent => this.handleDisplay(clickEvent, gridColumn-1, gridRow-2)} \n            onKeyDown={e => this.onKeyDown(e, gridColumn-1, gridRow-2)}\n            contentEditable='true'\n            suppressContentEditableWarning={true}\n            onInput={this.onTextChange}\n            ref = {this.selectionDisplay}\n            key={this.state.key}\n          >\n            {children}\n          </div>\n\n            {showList && (<ul className={`options-list`} style={{height: dropDownHeight}}>\n              {displayedOptions.map((value, index) => {\n                // exclude the selectedValue from dropdown list options \n                // except if the shownValue is different to the selectedValue (happens if user types into search field)\n                // if(value !== selectedValue || shownValue !== selectedValue) {\n                  return (\n                    <li \n                      style={{height: liHeight}}\n                      className={`dropdown-option ${className} ${index === activeItem ? 'active' : ''}`}\n                      value={value} \n                      key={index}\n                      onClick={e => this.handleOptionClick(e, gridColumn-1, gridRow-2)}\n                    >\n                      {value}\n                    </li>\n                  )\n                // }\n                //   else return null;\n              })}\n            </ul>)}\n        </div>\n      );\n    }\n}\n\nDropdown.defaultProps = {\n  className: '',\n  customStyles: {}\n};\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}