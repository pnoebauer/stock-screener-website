{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx\";\nimport React from 'react';\nimport GridRow from './grid-row.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GenerateGrid = ({\n  onChange,\n  header,\n  ...props\n}) => {\n  const {\n    Symbol\n  } = props;\n  const itemNum = Symbol.length; // console.log('map',header, Symbol)\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: //loop through rows\n    [...Array(itemNum)].map((value, rowIdx) => {\n      const rowValues = header.map((type, colIdx) => {\n        return props[type][rowIdx] || 0;\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(GridRow, {\n          rowValues: rowValues,\n          rowIdx: rowIdx,\n          header: header,\n          onChange: onChange\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 29\n        }, this)\n      }, void 0, false);\n    })\n  }, void 0, false);\n};\n\n_c = GenerateGrid;\nexport default GenerateGrid; // import React from 'react';\n// import GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n// const GenerateGrid = ( { onChange, header, ...props} ) => {\n//     const { Symbol } = props;\n//     console.log('map',header, Symbol)\n//     return (\n//         <>\n//         {   \n//             //loop through the header items (columns) and afterwards loop through stored values (rows)  \n//             header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => {\n//                 console.log('gg', type, rowVal)\n//                 return  (\n//                         <GenerateGridCell\n//                             type={type}\n//                             gridLocation={{rowIdx, colIdx}}\n//                             onChange={onChange}\n//                             key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n//                             // id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n//                         >\n//                             {rowVal}\n//                         </GenerateGridCell>\n//                     )\n//                 }                    \n//             )\n//             ) \n//         }\n//         </>\n//     )\n// }\n// export default GenerateGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateGrid\");","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx"],"names":["React","GridRow","GenerateGrid","onChange","header","props","Symbol","itemNum","length","Array","map","value","rowIdx","rowValues","type","colIdx"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,sBAApB;;;;AAEA,MAAMC,YAAY,GAAG,CAAE;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoB,KAAGC;AAAvB,CAAF,KAAqC;AAEtD,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAnB;AACA,QAAME,OAAO,GAAGD,MAAM,CAACE,MAAvB,CAHsD,CAItD;;AACA,sBACI;AAAA,cAEI;AACA,KAAC,GAAGC,KAAK,CAACF,OAAD,CAAT,EAAoBG,GAApB,CAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,YAAMC,SAAS,GAAGT,MAAM,CAACM,GAAP,CAAW,CAACI,IAAD,EAAOC,MAAP,KAAkB;AAC3C,eAAOV,KAAK,CAACS,IAAD,CAAL,CAAYF,MAAZ,KAAuB,CAA9B;AACH,OAFiB,CAAlB;AAIA,0BACI;AAAA,+BACI,QAAC,OAAD;AACI,UAAA,SAAS,EAAEC,SADf;AAEI,UAAA,MAAM,EAAED,MAFZ;AAGI,UAAA,MAAM,EAAER,MAHZ;AAII,UAAA,QAAQ,EAAED;AAJd,WAKSS,MALT;AAAA;AAAA;AAAA;AAAA;AADJ,uBADJ;AAWH,KAhBL;AAHJ,mBADJ;AAyBH,CA9BD;;KAAMV,Y;AAiCN,eAAeA,YAAf,C,CAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\n\nimport GridRow from './grid-row.component';\n\nconst GenerateGrid = ( { onChange, header, ...props} ) => {\n    \n    const { Symbol } = props;\n    const itemNum = Symbol.length;\n    // console.log('map',header, Symbol)\n    return (\n        <>\n        {   \n            //loop through rows\n            [...Array(itemNum)].map((value, rowIdx) => {\n                    const rowValues = header.map((type, colIdx) => {\n                        return props[type][rowIdx] || 0\n                    }); \n\n                    return (\n                        <>\n                            <GridRow \n                                rowValues={rowValues} \n                                rowIdx={rowIdx} \n                                header={header}\n                                onChange={onChange}\n                                key={rowIdx}\n                            />\n                        </>\n                    )\n                }\n            )\n        }\n        </>\n    )\n}\n\n\nexport default GenerateGrid;\n\n\n// import React from 'react';\n\n// import GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n\n// const GenerateGrid = ( { onChange, header, ...props} ) => {\n    \n//     const { Symbol } = props;\n//     console.log('map',header, Symbol)\n//     return (\n//         <>\n//         {   \n//             //loop through the header items (columns) and afterwards loop through stored values (rows)  \n//             header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => {\n//                 console.log('gg', type, rowVal)\n            \n//                 return  (\n//                         <GenerateGridCell\n//                             type={type}\n//                             gridLocation={{rowIdx, colIdx}}\n//                             onChange={onChange}\n//                             key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n//                             // id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n//                         >\n//                             {rowVal}\n//                         </GenerateGridCell>\n//                     )\n//                 }                    \n            \n//             )\n//             ) \n//         }\n//         </>\n//     )\n// }\n\n// export default GenerateGrid;\n"]},"metadata":{},"sourceType":"module"}