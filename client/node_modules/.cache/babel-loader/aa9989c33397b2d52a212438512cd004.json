{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport AddStockUniverseButton from '../add-stock-universe-button/add-stock-universe-button.component';\nimport { INTERVALS, SYMBOLS, API_TO_INDICATORS, INDICATORS_TO_API } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst permanentHeaders = ['ID', 'Symbol', 'Interval'];\nlet updateKey = null;\n\nclass RadarScreen extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getHeaderTitle = () => {\n      let headerTitle = Object.keys(this.state).filter(key => this.state[key] !== undefined); // console.log(headerTitle)\n\n      headerTitle = headerTitle.filter(item => item !== 'ID');\n      return headerTitle;\n    };\n\n    this.fetchAndSetState = (Symbol, header, clearedState, valueRow) => {\n      const {\n        fetchRealTimeData\n      } = this.props; // map the header (= state keys) to INDICATORS_TO_API; do not include permanent headers\n\n      const apiIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [INDICATORS_TO_API[item]]);\n      let stateUpdates = {}; //fetch for all symbols and the apiIndicators\n\n      fetchRealTimeData(Symbol, apiIndicators).then(indicatorObject => {\n        // loop over all apiIndicators\n        apiIndicators.forEach(apiIndicator => {\n          // look up the name used for the column header (and state key)\n          const indicatorColumn = API_TO_INDICATORS[apiIndicator];\n          const updatedRows = valueRow !== undefined ? Object.assign([], this.state[indicatorColumn], {\n            [valueRow]: indicatorObject[apiIndicator][0]\n          }) : indicatorObject[apiIndicator]; // merge the result of the current indicator column with the temp state object\n\n          stateUpdates = { ...stateUpdates,\n            // [indicatorColumn]: indicatorObject[apiIndicator]\n            [indicatorColumn]: updatedRows\n          };\n        });\n        return stateUpdates;\n      }) // update state to the updated indicators and the clearedState (all unused indicators set to null)\n      .then(stateUpdates => this.setState({ ...clearedState,\n        ...stateUpdates\n      }, () => {\n        // console.log(stateUpdates,clearedState,'c',{...stateUpdates,...clearedState})\n        // console.log(this.getHeaderTitle())\n        localStorage.setItem('header', this.getHeaderTitle());\n        localStorage.setItem('Symbol', this.state.Symbol);\n        localStorage.setItem('Interval', this.state.Interval);\n        localStorage.setItem('ID', this.state.ID);\n      }));\n    };\n\n    this.onChange = (updatedValue, headerCol, valueRow, rowAdded) => {\n      const header = this.getHeaderTitle(); //update the changed cell (Symbol, Interval)\n\n      this.setState(prevState => {\n        const columnName = header[headerCol]; //which column changed (Symbol, Interval)\n        // console.log(prevState.ID,'prevState.ID')\n\n        const maxID = Math.max(...prevState.ID);\n        return {\n          [columnName]: Object.assign([], prevState[columnName], {\n            [valueRow]: updatedValue\n          }),\n          Interval: rowAdded ? Object.assign([], prevState.Interval, {\n            [valueRow]: 'Daily'\n          }) : prevState.Interval,\n          ID: rowAdded ? Object.assign([], prevState.ID, {\n            [valueRow]: maxID + 1\n          }) : prevState.ID\n        };\n      }, //fetch the data for the entire row based on Symbol, Interval\n      () => {\n        const Symbol = new Array(this.state.Symbol[valueRow]);\n        this.fetchAndSetState(Symbol, header, {}, valueRow);\n      });\n    };\n\n    this.sortTable = event => {\n      this.setState((prevState, props) => {\n        const sortedTable = props.onSort(event, prevState);\n        return sortedTable;\n      });\n    };\n\n    this.handleColumnUpdate = names => {\n      const {\n        Symbol\n      } = this.state; // merge permanentHeaders with the updated column names\n\n      const header = [...permanentHeaders, ...names];\n      const clearedState = JSON.parse(JSON.stringify(this.state));\n      Object.keys(clearedState).forEach(key => {\n        if (!header.includes(key)) {\n          // clearedState = {\n          // \t...clearedState,\n          // \t[key]: undefined\n          // }\n          clearedState[key] = undefined;\n        }\n      }); // console.log(clearedState,'cl')\n\n      this.fetchAndSetState(Symbol, header, clearedState);\n    };\n\n    this.handleRowDelete = e => {\n      const rowIdx = Number(e.target.id);\n      const stateClone = JSON.parse(JSON.stringify(this.state)); // console.log(stateClone, rowIdx)\n\n      Object.keys(stateClone).forEach(key => {\n        console.log(key, stateClone[key], 'k'); // stateClone = {\n        // \t...stateClone,\n        // \t[key]: stateClone[key].flatMap((item, index) => \n        // \t\tindex === rowIdx ? [] : [item]\n        // \t)\n        // }\n        // stateClone[key] = stateClone[key].flatMap((item, index) => \n        // \t\tindex === rowIdx ? [] : [item]\n        // \t)\n\n        stateClone[key].splice(rowIdx, 1);\n      });\n      this.setState(stateClone);\n    };\n\n    this.onRowAdd = (updatedValue, headerCol, valueRow) => this.onChange(updatedValue, headerCol, valueRow, true);\n\n    this.handleUniverseAdd = symbols => {\n      const numberAddedSymbols = symbols.length; // console.log(symbols,'selected from universe', )\n\n      const stateClone = JSON.parse(JSON.stringify(this.state));\n      const maxID = Math.max(...stateClone.ID); // console.log(maxID,'maxID');\n\n      stateClone.Symbol = [...stateClone.Symbol, ...symbols];\n      stateClone.Interval = [...stateClone.Interval, ...Array(numberAddedSymbols).fill(INTERVALS[0])];\n      stateClone.ID = [...stateClone.ID, ...[...Array(numberAddedSymbols)].map((a, idx) => idx + maxID + 1)]; // console.log(stateClone)\n      // fetchAndSetState(Symbol, header, clearedState, valueRow)\n\n      const header = this.getHeaderTitle();\n      this.fetchAndSetState(stateClone.Symbol, header, stateClone);\n    };\n\n    this.state = {\n      Symbol: SYMBOLS.slice(0, 5),\n      Interval: Array(5).fill(INTERVALS[0]),\n      ID: [...Array(5)].map((a, idx) => idx) // 'Last Price': Array(8).fill(0)\n\n    };\n  } // Returns all the headers based on state object keys\n\n\n  componentDidMount() {\n    let {\n      Symbol,\n      Interval,\n      ID\n    } = this.state;\n    let rehydrate = {};\n    let header;\n\n    try {\n      header = localStorage.getItem('header').split(',');\n      Symbol = localStorage.getItem('Symbol').split(',');\n      Interval = localStorage.getItem('Interval').split(',');\n      ID = localStorage.getItem('ID').split(',');\n      rehydrate = { ...rehydrate,\n        Symbol,\n        Interval,\n        ID\n      }; // console.log('rehydrate',rehydrate)\n    } catch {\n      header = this.getHeaderTitle();\n    }\n\n    this.setState(rehydrate, () => {\n      // console.log('mount h', header)\n      this.fetchAndSetState(Symbol, header);\n    });\n  } //used for dropdowns - updates one row\n\n\n  render() {\n    const header = this.getHeaderTitle(); // passed from the withSort HOC\n\n    const {\n      sortConfig\n    } = this.props;\n    const {\n      Symbol\n    } = this.state;\n    const usedIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [item]);\n    updateKey = header;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        style: {\n          gridTemplateColumns: `20px repeat(${header.length}, 1fr) 0`,\n          gridTemplateRows: `repeat(${Symbol.length + 1}, 1fr) 0`\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScreenHeader, {\n          header: header,\n          sortTable: this.sortTable,\n          sortConfig: sortConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddColumnButton, {\n          style: {\n            gridColumn: `${header.length + 2}`\n          },\n          handleColumnUpdate: this.handleColumnUpdate,\n          usedIndicatorsDefault: usedIndicators\n        }, updateKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(GenerateGrid, { ...this.state,\n          header: header,\n          onChange: this.onChange,\n          handleRowDelete: this.handleRowDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          options: SYMBOLS,\n          gridRow: Symbol.length + 2,\n          gridColumn: 1 // key={colIdx.toString()+rowIdx.toString()} \n          ,\n          onChange: this.onRowAdd,\n          customStyles: {\n            height: '30px',\n            borderBottom: '1px solid black',\n            borderLeft: '1px solid black',\n            marginLeft: '-1px'\n          },\n          className: 'add-row',\n          children: SYMBOLS[Symbol.length]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddStockUniverseButton, {\n          style: {\n            gridColumn: '1',\n            gridRow: '1'\n          },\n          handleUniverseAdd: this.handleUniverseAdd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","AddColumnButton","Dropdown","AddStockUniverseButton","INTERVALS","SYMBOLS","API_TO_INDICATORS","INDICATORS_TO_API","permanentHeaders","updateKey","RadarScreen","Component","constructor","props","getHeaderTitle","headerTitle","Object","keys","state","filter","key","undefined","item","fetchAndSetState","Symbol","header","clearedState","valueRow","fetchRealTimeData","apiIndicators","flatMap","includes","stateUpdates","then","indicatorObject","forEach","apiIndicator","indicatorColumn","updatedRows","assign","setState","localStorage","setItem","Interval","ID","onChange","updatedValue","headerCol","rowAdded","prevState","columnName","maxID","Math","max","Array","sortTable","event","sortedTable","onSort","handleColumnUpdate","names","JSON","parse","stringify","handleRowDelete","e","rowIdx","Number","target","id","stateClone","console","log","splice","onRowAdd","handleUniverseAdd","symbols","numberAddedSymbols","length","fill","map","a","idx","slice","componentDidMount","rehydrate","getItem","split","render","sortConfig","usedIndicators","gridTemplateColumns","gridTemplateRows","gridColumn","height","borderBottom","borderLeft","marginLeft","gridRow"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport AddStockUniverseButton from '../add-stock-universe-button/add-stock-universe-button.component';\n\nimport { INTERVALS, SYMBOLS, API_TO_INDICATORS, INDICATORS_TO_API } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst permanentHeaders = ['ID', 'Symbol', 'Interval'];\n\nlet updateKey = null;\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tSymbol: SYMBOLS.slice(0,5),\n\t\t\tInterval: Array(5).fill(INTERVALS[0]),\n\t\t\tID: [...Array(5)].map((a, idx) => idx)\n\t\t\t// 'Last Price': Array(8).fill(0)\n\t\t}\n\t}\n\n\t// Returns all the headers based on state object keys\n\tgetHeaderTitle = () => {\n\t\tlet headerTitle = Object.keys(this.state).filter(key => this.state[key] !== undefined);\n\t\t// console.log(headerTitle)\n\t\theaderTitle = headerTitle.filter(item => item !== 'ID')\n\t\treturn headerTitle;\n\t}\n\n\tfetchAndSetState = (Symbol, header, clearedState, valueRow) => {\n\t\tconst { fetchRealTimeData } = this.props;\n\n\t\t// map the header (= state keys) to INDICATORS_TO_API; do not include permanent headers\n\t\tconst apiIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [INDICATORS_TO_API[item]]\n\t\t)\n\t\t\n\t\tlet stateUpdates = {};\n\n\t\t//fetch for all symbols and the apiIndicators\n\t\tfetchRealTimeData(Symbol, apiIndicators)\n\t\t.then(indicatorObject => {\n\t\t\t// loop over all apiIndicators\n\t\t\tapiIndicators.forEach(apiIndicator => {\n\t\t\t\t// look up the name used for the column header (and state key)\n\t\t\t\tconst indicatorColumn = API_TO_INDICATORS[apiIndicator];\n\t\t\t\tconst updatedRows = valueRow!==undefined ? Object.assign([], this.state[indicatorColumn], {[valueRow]: indicatorObject[apiIndicator][0]}) : indicatorObject[apiIndicator]\n\n\t\t\t\t// merge the result of the current indicator column with the temp state object\n\t\t\t\tstateUpdates = {\n\t\t\t\t\t...stateUpdates,\n\t\t\t\t\t// [indicatorColumn]: indicatorObject[apiIndicator]\n\t\t\t\t\t[indicatorColumn]: updatedRows\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn stateUpdates\n\t\t})\n\t\t// update state to the updated indicators and the clearedState (all unused indicators set to null)\n\t\t.then(stateUpdates => this.setState({...clearedState,...stateUpdates}\n\t\t\t,\n\t\t\t() => {\n\t\t\t\t// console.log(stateUpdates,clearedState,'c',{...stateUpdates,...clearedState})\n\t\t\t\t// console.log(this.getHeaderTitle())\n\t\t\t\tlocalStorage.setItem('header', this.getHeaderTitle());\n\t\t\t\tlocalStorage.setItem('Symbol', this.state.Symbol);\n\t\t\t\tlocalStorage.setItem('Interval', this.state.Interval);\n\t\t\t\tlocalStorage.setItem('ID', this.state.ID);\n\t\t\t}\n\t\t))\n\t}\n\n\tcomponentDidMount() {\n\t\tlet { Symbol, Interval, ID } = this.state;\n\t\tlet rehydrate = {};\n\t\tlet header;\n\t\ttry {\n\t\t\theader = localStorage.getItem('header').split(',');\n\t\t\tSymbol = localStorage.getItem('Symbol').split(',');\n\t\t\tInterval = localStorage.getItem('Interval').split(',');\n\t\t\tID = localStorage.getItem('ID').split(',');\n\n\t\t\trehydrate = {...rehydrate, Symbol, Interval, ID}\n\t\t\t// console.log('rehydrate',rehydrate)\n\t\t}\n\t\tcatch {\n\t\t\theader = this.getHeaderTitle();\n\t\t}\n\n\t\tthis.setState(rehydrate\n\t\t\t,\n\t\t\t() => {\n\t\t\t\t// console.log('mount h', header)\n\t\t\t\tthis.fetchAndSetState(Symbol, header)\n\t\t\t}\n\t\t);\n\n\t}\n\n\t//used for dropdowns - updates one row\n\tonChange = (updatedValue, headerCol, valueRow, rowAdded) => {\n\t\tconst header = this.getHeaderTitle();\n\t\t\n\t\t//update the changed cell (Symbol, Interval)\n\t\tthis.setState(prevState => {\n\t\t\tconst columnName = header[headerCol]; //which column changed (Symbol, Interval)\n\t\t\t// console.log(prevState.ID,'prevState.ID')\n\t\t\tconst maxID = Math.max(...prevState.ID);\n\t\t\treturn {\n\t\t\t\t[columnName]: Object.assign([], prevState[columnName], {[valueRow]: updatedValue}),\n\t\t\t\tInterval: rowAdded ? Object.assign([], prevState.Interval, {[valueRow]: 'Daily'}) : prevState.Interval,\n\t\t\t\tID: rowAdded ? Object.assign([], prevState.ID, {[valueRow]: maxID+1}) : prevState.ID\n\t\t\t}\n\t\t}\n\t\t,\n\t\t//fetch the data for the entire row based on Symbol, Interval\n\t\t() => {\n\t\t\tconst Symbol = new Array(this.state.Symbol[valueRow]);\n\t\t\tthis.fetchAndSetState(Symbol, header, {}, valueRow);\n\t\t})\n\t}\n\n\tsortTable = (event) => {\n\t\tthis.setState((prevState, props) => {\n\t\t\tconst sortedTable = props.onSort(event, prevState);\n\t\t\treturn sortedTable;\n\t\t});\n\t}\n\n\thandleColumnUpdate = names => {\n\t\tconst { Symbol } = this.state;\n\t\t// merge permanentHeaders with the updated column names\n\t\tconst header = [...permanentHeaders, ...names];\n\n\t\tconst clearedState = JSON.parse(JSON.stringify(this.state));\n\n\t\tObject.keys(clearedState).forEach(key => {\n\t\t\tif(!header.includes(key)) {\n\t\t\t\t// clearedState = {\n\t\t\t\t// \t...clearedState,\n\t\t\t\t// \t[key]: undefined\n\t\t\t\t// }\n\t\t\t\tclearedState[key] = undefined;\n\t\t\t}\n\t\t});\n\n\t\t// console.log(clearedState,'cl')\n\t\t\n\t\tthis.fetchAndSetState(Symbol, header, clearedState);\n\t}\n\n\thandleRowDelete = e => {\n\t\tconst rowIdx = Number(e.target.id)\n\t\tconst stateClone = JSON.parse(JSON.stringify(this.state));\n\n\t\t// console.log(stateClone, rowIdx)\n\n\t\tObject.keys(stateClone).forEach(key => {\n\t\t\tconsole.log(key, stateClone[key], 'k')\n\t\t\t// stateClone = {\n\t\t\t// \t...stateClone,\n\t\t\t// \t[key]: stateClone[key].flatMap((item, index) => \n\t\t\t// \t\tindex === rowIdx ? [] : [item]\n\t\t\t// \t)\n\t\t\t// }\n\n\t\t\t// stateClone[key] = stateClone[key].flatMap((item, index) => \n\t\t\t// \t\tindex === rowIdx ? [] : [item]\n\t\t\t// \t)\n\n\t\t\tstateClone[key].splice(rowIdx, 1)\n\t\t\t\n\t\t});\n\n\t\tthis.setState(stateClone);\n\t}\n\n\n\tonRowAdd = (updatedValue, headerCol, valueRow) => this.onChange(updatedValue, headerCol, valueRow, true);\n\t\n\thandleUniverseAdd = symbols => {\n\t\tconst numberAddedSymbols = symbols.length;\n\n\t\t// console.log(symbols,'selected from universe', )\n\t\t\n\t\tconst stateClone = JSON.parse(JSON.stringify(this.state));\n\t\tconst maxID = Math.max(...stateClone.ID);\n\t\t// console.log(maxID,'maxID');\n\n\t\tstateClone.Symbol = [...stateClone.Symbol, ...symbols];\n\t\tstateClone.Interval = [...stateClone.Interval, ...Array(numberAddedSymbols).fill(INTERVALS[0])];\n\t\tstateClone.ID = [...stateClone.ID, ...[...Array(numberAddedSymbols)].map((a, idx) => idx+maxID+1)];\n\n\t\t// console.log(stateClone)\n\t\t\n\t\t// fetchAndSetState(Symbol, header, clearedState, valueRow)\n\t\tconst header = this.getHeaderTitle();\n\t\t\n\t\tthis.fetchAndSetState(stateClone.Symbol, header, stateClone);\n\t}\n\n\trender() {\n\t\tconst header = this.getHeaderTitle();\n\t\t// passed from the withSort HOC\n\t\tconst { sortConfig } = this.props;\n\t\tconst { Symbol } = this.state;\n\n\t\tconst usedIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [item]\n\t\t);\n\n\t\tupdateKey=header;\n\t\t\n\t\treturn (\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div id=\"grid-container\" \n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tgridTemplateColumns: `20px repeat(${header.length}, 1fr) 0`,\n\t\t\t\t\t\tgridTemplateRows: `repeat(${Symbol.length+1}, 1fr) 0`\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tsortTable={this.sortTable}\n\t\t\t\t\t\tsortConfig={sortConfig}\n\t\t\t\t\t/>\n\t\t\t\t\t<AddColumnButton \n\t\t\t\t\t\tstyle={{\n                            gridColumn: `${header.length+2}`\n                        }}\n\t\t\t\t\t\thandleColumnUpdate={this.handleColumnUpdate}\n\t\t\t\t\t\tusedIndicatorsDefault={usedIndicators}\n\t\t\t\t\t\tkey={updateKey}\n\t\t\t\t\t/>\n\t\t\t\t\t<GenerateGrid \n\t\t\t\t\t\t{...this.state}\n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\thandleRowDelete={this.handleRowDelete}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Dropdown \n\t\t\t\t\t\toptions={SYMBOLS}\n\t\t\t\t\t\tgridRow={Symbol.length+2}\n\t\t\t\t\t\tgridColumn={1}\n\t\t\t\t\t\t// key={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\tonChange={this.onRowAdd}\n\t\t\t\t\t\tcustomStyles={{\n\t\t\t\t\t\t\theight: '30px', \n\t\t\t\t\t\t\tborderBottom: '1px solid black',\n\t\t\t\t\t\t\tborderLeft: '1px solid black',\n\t\t\t\t\t\t\tmarginLeft: '-1px'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName={'add-row'}\n                \t>\n\t\t\t\t\t\t{SYMBOLS[Symbol.length]}\n                \t</Dropdown> \n\n\t\t\t\t\t<AddStockUniverseButton\n\t\t\t\t\t\tstyle={{\n                            gridColumn: '1',\n\t\t\t\t\t\t\tgridRow: '1'\n                        }}\n\t\t\t\t\t\thandleUniverseAdd={this.handleUniverseAdd}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}