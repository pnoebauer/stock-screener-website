{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport { INTERVALS, SYMBOLS, API_TO_INDICATORS, INDICATORS_TO_API } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst permanentHeaders = ['Symbol', 'Interval'];\nlet updateKey = null;\n\nclass RadarScreen extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getHeaderTitle = () => {\n      const headerTitle = Object.keys(this.state).filter(key => this.state[key] !== null);\n      return headerTitle;\n    };\n\n    this.fetchAndSetState = (Symbol, header, clearedState, valueRow) => {\n      const {\n        fetchRealTimeData\n      } = this.props; // map the header (= state keys) to INDICATORS_TO_API; do not include permanent headers\n\n      const apiIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [INDICATORS_TO_API[item]]);\n      let stateUpdates = {}; //fetch for all symbols and the apiIndicators\n\n      fetchRealTimeData(Symbol, apiIndicators).then(indicatorObject => {\n        // loop over all apiIndicators\n        apiIndicators.forEach(apiIndicator => {\n          // look up the name used for the column header (and state key)\n          const indicatorColumn = API_TO_INDICATORS[apiIndicator];\n          const updatedRow = valueRow !== undefined ? Object.assign([], this.state[indicatorColumn], {\n            [valueRow]: indicatorObject[apiIndicator][0]\n          }) : indicatorObject[apiIndicator]; // merge the result of the current indicator column with the temp state object\n\n          stateUpdates = { ...stateUpdates,\n            // [indicatorColumn]: indicatorObject[apiIndicator]\n            [indicatorColumn]: updatedRow\n          };\n        });\n        return stateUpdates;\n      }) // update state to the updated indicators and the clearedState (all unused indicators set to null)\n      .then(stateUpdates => this.setState({ ...stateUpdates,\n        ...clearedState\n      }, () => {\n        // console.log(this.getHeaderTitle())\n        localStorage.setItem('header', this.getHeaderTitle());\n        localStorage.setItem('Symbol', this.state.Symbol);\n        localStorage.setItem('Interval', this.state.Interval); // updateKey = '1'\n        // console.log('mounted set', updateKey, this.state)\n      }));\n    };\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const header = this.getHeaderTitle(); //update the changed cell (Symbol, Interval)\n\n      this.setState(prevState => {\n        const columnName = header[headerCol]; //which column changed (Symbol, Interval)\n\n        return {\n          [columnName]: Object.assign([], prevState[columnName], {\n            [valueRow]: updatedValue\n          })\n        };\n      }, //fetch the data for the entire row based on Symbol, Interval\n      () => {\n        const Symbol = new Array(this.state.Symbol[valueRow]);\n        this.fetchAndSetState(Symbol, header, {}, valueRow);\n      });\n    };\n\n    this.sortTable = event => {\n      this.setState((prevState, props) => {\n        const sortedTable = props.onSort(event, prevState);\n        return sortedTable;\n      });\n    };\n\n    this.getClassNameForHeader = name => {\n      const {\n        sortConfig\n      } = this.props;\n\n      if (!sortConfig) {\n        return;\n      }\n\n      const direction = sortConfig.direction === 1 ? 'ascending' : 'descending';\n      return sortConfig.sortedField === name ? direction : undefined;\n    };\n\n    this.handleColumnUpdate = names => {\n      const {\n        Symbol\n      } = this.state; // merge permanentHeaders with the updated column names\n\n      const header = [...permanentHeaders, ...names];\n      let clearedState = JSON.parse(JSON.stringify(this.state));\n      Object.keys(clearedState).forEach(key => {\n        if (!header.includes(key)) {\n          clearedState = { ...clearedState,\n            [key]: null\n          };\n        }\n      });\n      this.fetchAndSetState(Symbol, header, clearedState);\n    };\n\n    this.state = {\n      Symbol: SYMBOLS.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      'Last Price': Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    console.log(updateKey, 'key');\n    let {\n      Symbol,\n      Interval\n    } = this.state;\n    let rehydrate = {};\n    let header;\n\n    try {\n      header = localStorage.getItem('header').split(',');\n      Symbol = localStorage.getItem('Symbol').split(',');\n      Interval = localStorage.getItem('Interval').split(',');\n      rehydrate = { ...rehydrate,\n        Symbol,\n        Interval\n      }; // console.log('rehydrate',rehydrate)\n    } catch {\n      header = this.getHeaderTitle();\n    }\n\n    this.setState(rehydrate, () => {\n      console.log('mount h', header);\n      this.fetchAndSetState(Symbol, header);\n    });\n  }\n\n  render() {\n    const header = this.getHeaderTitle(); // passed from the withSort HOC\n\n    const {\n      sortConfig\n    } = this.props;\n    const usedIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [item]); // updateKey=header.length;\n\n    updateKey = header; // console.log(updateKey,'key render',header)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        style: {\n          gridTemplateColumns: `repeat(${header.length}, 1fr) 0`\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScreenHeader, {\n          header: header,\n          sortTable: this.sortTable,\n          sortConfig: sortConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddColumnButton, {\n          style: {\n            gridColumn: `${header.length}+1`\n          },\n          handleColumnUpdate: this.handleColumnUpdate,\n          usedIndicatorsDefault: usedIndicators,\n          updateKey: updateKey\n        }, updateKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(GenerateGrid, { ...this.state,\n          header: header,\n          onChange: this.onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","AddColumnButton","INTERVALS","SYMBOLS","API_TO_INDICATORS","INDICATORS_TO_API","permanentHeaders","updateKey","RadarScreen","Component","constructor","props","getHeaderTitle","headerTitle","Object","keys","state","filter","key","fetchAndSetState","Symbol","header","clearedState","valueRow","fetchRealTimeData","apiIndicators","flatMap","item","includes","stateUpdates","then","indicatorObject","forEach","apiIndicator","indicatorColumn","updatedRow","undefined","assign","setState","localStorage","setItem","Interval","onChange","updatedValue","headerCol","prevState","columnName","Array","sortTable","event","sortedTable","onSort","getClassNameForHeader","name","sortConfig","direction","sortedField","handleColumnUpdate","names","JSON","parse","stringify","slice","fill","componentDidMount","console","log","rehydrate","getItem","split","render","usedIndicators","gridTemplateColumns","length","gridColumn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\n\nimport { INTERVALS, SYMBOLS, API_TO_INDICATORS, INDICATORS_TO_API } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst permanentHeaders = ['Symbol', 'Interval'];\n\nlet updateKey = null;\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tSymbol: SYMBOLS.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\t'Last Price': Array(8).fill(0)\n\t\t}\n\t}\n\n\tgetHeaderTitle = () => {\n\t\tconst headerTitle = Object.keys(this.state).filter(key => this.state[key] !== null);\n\t\treturn headerTitle;\n\t}\n\n\t\n\t// fetchAndSetState = (Symbol, apiIndicators, clearedState, valueRow) => {\n\tfetchAndSetState = (Symbol, header, clearedState, valueRow) => {\n\n\t\tconst { fetchRealTimeData } = this.props;\n\n\t\t// map the header (= state keys) to INDICATORS_TO_API; do not include permanent headers\n\t\tconst apiIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [INDICATORS_TO_API[item]]\n\t\t)\n\t\t\n\t\tlet stateUpdates = {};\n\n\t\t//fetch for all symbols and the apiIndicators\n\t\tfetchRealTimeData(Symbol, apiIndicators)\n\t\t.then(indicatorObject => {\n\t\t\t// loop over all apiIndicators\n\t\t\tapiIndicators.forEach(apiIndicator => {\n\t\t\t\t// look up the name used for the column header (and state key)\n\t\t\t\tconst indicatorColumn = API_TO_INDICATORS[apiIndicator];\n\n\t\t\t\tconst updatedRow = valueRow!==undefined ? Object.assign([], this.state[indicatorColumn], {[valueRow]: indicatorObject[apiIndicator][0]}) : indicatorObject[apiIndicator]\n\n\t\t\t\t// merge the result of the current indicator column with the temp state object\n\t\t\t\tstateUpdates = {\n\t\t\t\t\t...stateUpdates,\n\t\t\t\t\t// [indicatorColumn]: indicatorObject[apiIndicator]\n\t\t\t\t\t[indicatorColumn]: updatedRow\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn stateUpdates\n\t\t})\n\t\t// update state to the updated indicators and the clearedState (all unused indicators set to null)\n\t\t.then(stateUpdates => this.setState({...stateUpdates,...clearedState}\n\t\t\t,\n\t\t\t() => {\n\t\t\t\t// console.log(this.getHeaderTitle())\n\t\t\t\tlocalStorage.setItem('header', this.getHeaderTitle());\n\t\t\t\tlocalStorage.setItem('Symbol', this.state.Symbol);\n\t\t\t\tlocalStorage.setItem('Interval', this.state.Interval);\n\n\t\t\t\t// updateKey = '1'\n\t\t\t\t// console.log('mounted set', updateKey, this.state)\n\t\t\t}\n\t\t))\n\t}\n\n\tcomponentDidMount() {\n\n\t\tconsole.log(updateKey,'key')\n\t\tlet { Symbol, Interval } = this.state;\n\n\t\tlet rehydrate = {};\n\n\t\tlet header;\n\t\ttry {\n\t\t\theader = localStorage.getItem('header').split(',');\n\t\t\tSymbol = localStorage.getItem('Symbol').split(',');\n\t\t\tInterval = localStorage.getItem('Interval').split(',');\n\n\t\t\trehydrate = {...rehydrate, Symbol, Interval}\n\t\t\t// console.log('rehydrate',rehydrate)\n\t\t}\n\t\tcatch {\n\t\t\theader = this.getHeaderTitle();\n\t\t}\n\n\t\tthis.setState(rehydrate\n\t\t\t,\n\t\t\t() => {\n\t\t\t\tconsole.log('mount h', header)\n\t\t\t\tthis.fetchAndSetState(Symbol, header)\n\t\t\t}\n\t\t);\n\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst header = this.getHeaderTitle();\n\t\t\n\t\t//update the changed cell (Symbol, Interval)\n\t\tthis.setState(prevState => {\n\t\t\tconst columnName = header[headerCol]; //which column changed (Symbol, Interval)\n\t\t\treturn {\n\t\t\t\t[columnName]: Object.assign([], prevState[columnName], {[valueRow]: updatedValue})\n\t\t\t}\n\t\t}\n\t\t,\n\t\t//fetch the data for the entire row based on Symbol, Interval\n\t\t() => {\n\t\t\tconst Symbol = new Array(this.state.Symbol[valueRow]);\n\t\t\tthis.fetchAndSetState(Symbol, header, {}, valueRow);\n\t\t})\n\t}\n\n\tsortTable = (event) => {\n\t\tthis.setState((prevState, props) => {\n\t\t\tconst sortedTable = props.onSort(event, prevState);\n\t\t\treturn sortedTable;\n\t\t});\n\t}\n\n\tgetClassNameForHeader = name => {\n\t\tconst { sortConfig } = this.props;\n\t\tif (!sortConfig) {\n\t\t\treturn;\n\t\t}\n\t\tconst direction = sortConfig.direction === 1 ? 'ascending' : 'descending'; \n\t\treturn sortConfig.sortedField === name ? direction : undefined;\n\t};\n\n\thandleColumnUpdate = names => {\n\t\tconst { Symbol } = this.state;\n\t\t// merge permanentHeaders with the updated column names\n\t\tconst header = [...permanentHeaders, ...names];\n\n\t\tlet clearedState = JSON.parse(JSON.stringify(this.state));\n\n\t\tObject.keys(clearedState).forEach(key => {\n\t\t\tif(!header.includes(key)) {\n\t\t\t\tclearedState = {\n\t\t\t\t\t...clearedState,\n\t\t\t\t\t[key]: null\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.fetchAndSetState(Symbol, header, clearedState);\n\t}\n\t\n\trender() {\n\t\tconst header = this.getHeaderTitle();\n\t\t// passed from the withSort HOC\n\t\tconst { sortConfig } = this.props;\n\n\t\tconst usedIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [item]\n\t\t);\n\n\t\t// updateKey=header.length;\n\t\tupdateKey=header;\n\t\t// console.log(updateKey,'key render',header)\n\t\t\n\n\t\treturn (\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div id=\"grid-container\" \n\t\t\t\t\tstyle={{gridTemplateColumns: `repeat(${header.length}, 1fr) 0`}}\n\t\t\t\t>\n\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tsortTable={this.sortTable}\n\t\t\t\t\t\tsortConfig={sortConfig}\n\t\t\t\t\t/>\n\t\t\t\t\t<AddColumnButton \n\t\t\t\t\t\tstyle={{\n                            gridColumn: `${header.length}+1`\n                        }}\n\t\t\t\t\t\thandleColumnUpdate={this.handleColumnUpdate}\n\t\t\t\t\t\tusedIndicatorsDefault={usedIndicators}\n\t\t\t\t\t\tupdateKey={updateKey}\n\t\t\t\t\t\tkey={updateKey}\n\t\t\t\t\t/>\n\t\t\t\t\t<GenerateGrid \n\t\t\t\t\t\t{...this.state}\n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}