{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx\";\nimport React from 'react';\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GenerateGrid = ({\n  onChange,\n  ...props\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: //loop through the header items (columns) and afterwards loop through stored values (rows)  \n    props.header.map((type, colIdx) => props[type].map((rowVal, rowIdx) => /*#__PURE__*/_jsxDEV(GenerateGridCell, {\n      type: type,\n      gridLocation: {\n        rowIdx,\n        colIdx\n      },\n      onChange: onChange\n    }, `${Symbol[rowIdx]}-${type}-${rowIdx}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 25\n    }, this)))\n  }, void 0, false);\n};\n\n_c = GenerateGrid;\nexport default GenerateGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateGrid\");","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx"],"names":["React","GenerateGridCell","GenerateGrid","onChange","props","header","map","type","colIdx","rowVal","rowIdx","Symbol"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,oDAA7B;;;;AAEA,MAAMC,YAAY,GAAG,CAAE;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAF,KAA6B;AAC9C,sBACI;AAAA,cAEI;AACAA,IAAAA,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,CAACC,IAAD,EAAOC,MAAP,KAAkBJ,KAAK,CAACG,IAAD,CAAL,CAAYD,GAAZ,CAAgB,CAACG,MAAD,EAAQC,MAAR,kBACvC,QAAC,gBAAD;AACI,MAAA,IAAI,EAAEH,IADV;AAEI,MAAA,YAAY,EAAE;AAACG,QAAAA,MAAD;AAASF,QAAAA;AAAT,OAFlB;AAGI,MAAA,QAAQ,EAAEL;AAHd,OAIU,GAAEQ,MAAM,CAACD,MAAD,CAAS,IAAGH,IAAK,IAAGG,MAAO,EAJ7C;AAAA;AAAA;AAAA;AAAA,YADuB,CAAnC;AAHJ,mBADJ;AAmBH,CApBD;;KAAMR,Y;AAsBN,eAAeA,YAAf","sourcesContent":["import React from 'react';\n\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n\nconst GenerateGrid = ( { onChange, ...props} ) => {\n    return (\n        <>\n        {\n            //loop through the header items (columns) and afterwards loop through stored values (rows)  \n            props.header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => (\n                        <GenerateGridCell\n                            type={type}\n                            gridLocation={{rowIdx, colIdx}}\n                            onChange={onChange}\n                            key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n                        >\n                            {/* {rowVal} */}\n                        </GenerateGridCell>\n                    )\n                )\n            ) \n        }\n        </>\n    )\n}\n\nexport default GenerateGrid;"]},"metadata":{},"sourceType":"module"}