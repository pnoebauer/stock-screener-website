{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      options,\n      defaultValue\n    } = props;\n    super(props);\n\n    this.handleClickOutside = event => {\n      if (!event.target.classList.contains('custom-select-option') && !event.target.classList.contains('selected-text')) {\n        this.setState({\n          showList: false\n        });\n      }\n    };\n\n    this.handleDisplay = () => {\n      this.setState(prevState => ({\n        showList: !prevState.showList\n      }));\n    };\n\n    this.handleOptionClick = event => {\n      this.setState({\n        defaultValue: event.target.getAttribute('option-name'),\n        showList: false\n      });\n    };\n\n    this.state = {\n      selectedValue: defaultValue,\n      showList: false\n    };\n  } //on mounting add event listener to handle click outside the Custom Select Container\n\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  } //remove the event listner on component unmounting\n\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  } //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      options\n    } = this.props;\n    const {\n      selectedValue,\n      showList\n    } = this.state; // console.log(options)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selector-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: showList ? 'selected-text active' : 'selected-text',\n        onClick: this.handleDisplay,\n        children: selectedValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), options.map((value, index) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: value,\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","options","defaultValue","handleClickOutside","event","target","classList","contains","setState","showList","handleDisplay","prevState","handleOptionClick","getAttribute","state","selectedValue","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render","map","value","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,QAAN,SAAuBD,KAAK,CAACE,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAA0BF,KAAhC;AACA,UAAMA,KAAN;;AAFiB,SAoBnBG,kBApBmB,GAoBEC,KAAK,IAAI;AAC5B,UACE,CAACA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,QAAvB,CAAgC,sBAAhC,CAAD,IACA,CAACH,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,QAAvB,CAAgC,eAAhC,CAFH,EAGE;AACA,aAAKC,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGD;AACF,KA7BkB;;AAAA,SAgCnBC,aAhCmB,GAgCH,MAAM;AACpB,WAAKF,QAAL,CAAcG,SAAS,KAAK;AACtBF,QAAAA,QAAQ,EAAE,CAACE,SAAS,CAACF;AADC,OAAL,CAAvB;AAID,KArCkB;;AAAA,SAwCnBG,iBAxCmB,GAwCCR,KAAK,IAAI;AAC3B,WAAKI,QAAL,CAAc;AACZN,QAAAA,YAAY,EAAEE,KAAK,CAACC,MAAN,CAAaQ,YAAb,CAA0B,aAA1B,CADF;AAEZJ,QAAAA,QAAQ,EAAE;AAFE,OAAd;AAID,KA7CkB;;AAGjB,SAAKK,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAEb,YADN;AAETO,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAID,GARkC,CAUnC;;;AACAO,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuC,KAAKf,kBAA5C;AACD,GAbkC,CAenC;;;AACAgB,EAAAA,oBAAoB,GAAG;AACrBF,IAAAA,QAAQ,CAACG,mBAAT,CAA6B,WAA7B,EAA0C,KAAKjB,kBAA/C;AACD,GAlBkC,CAoBnC;;;AA6BAkB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpB,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,UAAM;AAAEe,MAAAA,aAAF;AAAiBN,MAAAA;AAAjB,QAA8B,KAAKK,KAAzC,CAFO,CAGP;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACE;AACE,QAAA,SAAS,EAAEL,QAAQ,GAAG,sBAAH,GAA4B,eADjD;AAEE,QAAA,OAAO,EAAE,KAAKC,aAFhB;AAAA,kBAIGK;AAJH;AAAA;AAAA;AAAA;AAAA,cADF,EAQKd,OAAO,CAACqB,GAAR,CAAY,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC7B,4BACE;AACE,UAAA,KAAK,EAAED,KADT;AAAA,oBAIGA;AAJH,WAEOC,KAFP;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATA,CARL;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;;AA1EkC;;AA6EvC,eAAe3B,QAAf","sourcesContent":["import React from 'react'\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n      const {options, defaultValue} = props;\n      super(props);\n      this.state = {\n          selectedValue: defaultValue,\n          showList: false\n      };\n    }\n    \n    //on mounting add event listener to handle click outside the Custom Select Container\n    componentDidMount() {\n      document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    //remove the event listner on component unmounting\n    componentWillUnmount() {\n      document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    //if click happens outside the dropdown area close the list\n    handleClickOutside = event => {\n      if(\n        !event.target.classList.contains('custom-select-option') && \n        !event.target.classList.contains('selected-text')\n      ) {\n        this.setState({\n          showList: false\n        });\n      }\n    }\n\n    //handle the displaying of the list (if currently shown, then hide and vice versa)\n    handleDisplay = () => {\n      this.setState(prevState => ({\n            showList: !prevState.showList\n          })\n      );\n    };\n\n    // set text based on click in displayed list\n    handleOptionClick = event => {\n      this.setState({\n        defaultValue: event.target.getAttribute('option-name'),\n        showList: false\n      });\n    };\n\n  \n    render() {\n      const { options } = this.props;\n      const { selectedValue, showList } = this.state;\n      // console.log(options)\n      return (\n        <div className='selector-container'>\n          <div \n            className={showList ? 'selected-text active' : 'selected-text'}\n            onClick={this.handleDisplay}  \n          >\n            {selectedValue}\n          </div>\n\n            {options.map((value, index) => {\n              return(\n                <option \n                  value={value} \n                  key={index}\n                >\n                  {value}\n                </option>\n              )\n            })}\n        </div>\n      );\n    }\n  }\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}