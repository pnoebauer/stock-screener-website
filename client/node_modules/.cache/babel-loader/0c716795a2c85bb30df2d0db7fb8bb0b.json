{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/clock.component.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dateTime: this.convertDateTime()\n    };\n  }\n\n  convertDateTime() {\n    const {\n      type\n    } = this.props;\n\n    if (type === 'time') {\n      return new Date().toLocaleTimeString();\n    } else {\n      return new Date().toLocaleDateString();\n    }\n  } //method that updates the time property of state to the current time\n\n\n  tick() {\n    this.setState({\n      dateTime: this.convertDateTime()\n    });\n  } //upon mounting setInterval to continuously call the tick method\n\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => this.tick());\n  } //upon unmounting remove setInterval to free memory\n\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    const {\n      type\n    } = this.props;\n    const {\n      time\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Clock; // The time is {this.state.time} {this.props.type}.","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/clock.component.jsx"],"names":["React","Clock","Component","constructor","props","state","dateTime","convertDateTime","type","Date","toLocaleTimeString","toLocaleDateString","tick","setState","componentDidMount","intervalId","setInterval","componentWillUnmount","clearInterval","render","time"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAGlCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KAAKC,eAAL;AADC,KAAb;AAGD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAS,KAAKJ,KAApB;;AAEA,QAAII,IAAI,KAAK,MAAb,EAAqB;AACjB,aAAO,IAAIC,IAAJ,GAAWC,kBAAX,EAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAID,IAAJ,GAAWE,kBAAX,EAAP;AACH;AACF,GAnBiC,CAqBlC;;;AACAC,EAAAA,IAAI,GAAG;AACL,SAAKC,QAAL,CAAc;AACVP,MAAAA,QAAQ,EAAE,KAAKC,eAAL;AADA,KAAd;AAGD,GA1BiC,CA4BlC;;;AACAO,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM,KAAKJ,IAAL,EAAP,CAA7B;AACH,GA/BiC,CAiClC;;;AACAK,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKH,UAAN,CAAb;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAACX,MAAAA;AAAD,QAAS,KAAKJ,KAApB;AACA,UAAM;AAACgB,MAAAA;AAAD,QAAS,KAAKf,KAApB;AACA,wBACE;AAAA,gBACKe;AADL;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA9CiC;;AAiDpC,eAAenB,KAAf,C,CAEA","sourcesContent":["import React from 'react';\n\nclass Clock extends React.Component {\n\n    \n  constructor(props) {\n    super(props);\n    this.state = {\n      dateTime: this.convertDateTime()\n    };\n  }\n\n  convertDateTime() {\n    const {type} = this.props;\n\n    if (type === 'time') {\n        return new Date().toLocaleTimeString()\n    }\n    else {\n        return new Date().toLocaleDateString()\n    }\n  }\n\n  //method that updates the time property of state to the current time\n  tick() {\n    this.setState({\n        dateTime: this.convertDateTime()\n    });\n  }\n\n  //upon mounting setInterval to continuously call the tick method\n  componentDidMount() {\n      this.intervalId = setInterval(() => this.tick());\n  }\n\n  //upon unmounting remove setInterval to free memory\n  componentWillUnmount() {\n      clearInterval(this.intervalId);\n  }\n\n  render() {\n    const {type} = this.props;\n    const {time} = this.state;\n    return (\n      <span>\n          {time}\n      </span>\n    );\n  }\n} \n\nexport default Clock;\n\n// The time is {this.state.time} {this.props.type}."]},"metadata":{},"sourceType":"module"}