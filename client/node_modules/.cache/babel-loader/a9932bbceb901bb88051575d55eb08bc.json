{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport AddStockUniverseButton from '../add-stock-universe-button/add-stock-universe-button.component';\nimport { INTERVALS, SYMBOLS, API_TO_INDICATORS, INDICATORS_TO_API } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst permanentHeaders = ['ID', 'Symbol', 'Interval'];\nlet updateKey = null;\n\nclass RadarScreen extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getHeaderTitle = () => {\n      let headerTitle = Object.keys(this.state).filter(key => this.state[key] !== undefined); // console.log(headerTitle)\n\n      headerTitle = headerTitle.filter(item => item !== 'ID');\n      return headerTitle;\n    };\n\n    this.fetchAndSetState = (Symbol, header, clearedState, valueRow) => {\n      const {\n        fetchRealTimeData\n      } = this.props; // map the header (= state keys) to INDICATORS_TO_API; do not include permanent headers\n\n      const apiIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [INDICATORS_TO_API[item]]);\n      let stateUpdates = {}; //fetch for all symbols and the apiIndicators\n\n      fetchRealTimeData(Symbol, apiIndicators).then(indicatorObject => {\n        console.log(indicatorObject, 'in'); // loop over all apiIndicators\n\n        apiIndicators.forEach(apiIndicator => {\n          console.log(apiIndicator, 'apiIndicator'); // look up the name used for the column header (and state key)\n\n          const indicatorColumn = API_TO_INDICATORS[apiIndicator];\n          let updatedRows = this.state[indicatorColumn];\n          let updatedValuesFromFetch;\n\n          if (indicatorObject) {\n            updatedValuesFromFetch = indicatorObject[apiIndicator];\n          } else {\n            updatedValuesFromFetch = ['NA'];\n          }\n\n          updatedRows = valueRow !== undefined ? Object.assign([], this.state[indicatorColumn], {\n            [valueRow]: updatedValuesFromFetch[0]\n          }) : updatedValuesFromFetch; // console.log(updatedRows, 'upr');\n          // merge the result of the current indicator column with the temp state object\n\n          stateUpdates = { ...stateUpdates,\n            [indicatorColumn]: updatedRows\n          };\n        });\n        return stateUpdates;\n      }).catch(e => console.log(e, 'error')) // update state to the updated indicators and the clearedState (all unused indicators set to null)\n      .then(stateUpdates => this.setState({ ...clearedState,\n        ...stateUpdates\n      }, () => {\n        // console.log(stateUpdates,clearedState,'c',{...stateUpdates,...clearedState})\n        // console.log(this.getHeaderTitle())\n        localStorage.setItem('header', this.getHeaderTitle());\n        localStorage.setItem('Symbol', this.state.Symbol);\n        localStorage.setItem('Interval', this.state.Interval);\n        localStorage.setItem('ID', this.state.ID);\n      }));\n    };\n\n    this.onChange = (updatedValue, headerCol, valueRow, rowAdded) => {\n      const header = this.getHeaderTitle(); //update the changed cell (Symbol, Interval)\n\n      this.setState(prevState => {\n        const columnName = header[headerCol]; //which column changed (Symbol, Interval)\n        // console.log(prevState.ID,'prevState.ID')\n\n        const maxID = Math.max(...prevState.ID);\n        return {\n          [columnName]: Object.assign([], prevState[columnName], {\n            [valueRow]: updatedValue\n          }),\n          Interval: rowAdded ? Object.assign([], prevState.Interval, {\n            [valueRow]: 'Daily'\n          }) : prevState.Interval,\n          ID: rowAdded ? Object.assign([], prevState.ID, {\n            [valueRow]: maxID + 1\n          }) : prevState.ID\n        };\n      }, //fetch the data for the entire row based on Symbol, Interval\n      () => {\n        const Symbol = new Array(this.state.Symbol[valueRow]);\n        this.fetchAndSetState(Symbol, header, {}, valueRow);\n      });\n    };\n\n    this.sortTable = event => {\n      this.setState((prevState, props) => {\n        const sortedTable = props.onSort(event, prevState);\n        return sortedTable;\n      });\n    };\n\n    this.handleColumnUpdate = names => {\n      const {\n        Symbol\n      } = this.state; // merge permanentHeaders with the updated column names\n\n      const header = [...permanentHeaders, ...names];\n      const clearedState = JSON.parse(JSON.stringify(this.state));\n      Object.keys(clearedState).forEach(key => {\n        if (!header.includes(key)) {\n          // clearedState = {\n          // \t...clearedState,\n          // \t[key]: undefined\n          // }\n          clearedState[key] = undefined;\n        }\n      }); // console.log(clearedState,'cl')\n\n      this.fetchAndSetState(Symbol, header, clearedState);\n    };\n\n    this.handleRowDelete = e => {\n      const rowIdx = Number(e.target.id);\n      const stateClone = JSON.parse(JSON.stringify(this.state)); // console.log(stateClone, rowIdx)\n\n      Object.keys(stateClone).forEach(key => {\n        // console.log(key, stateClone[key], 'k')\n        // stateClone = {\n        // \t...stateClone,\n        // \t[key]: stateClone[key].flatMap((item, index) =>\n        // \t\tindex === rowIdx ? [] : [item]\n        // \t)\n        // }\n        // stateClone[key] = stateClone[key].flatMap((item, index) =>\n        // \t\tindex === rowIdx ? [] : [item]\n        // \t)\n        stateClone[key].splice(rowIdx, 1);\n      });\n      this.setState(stateClone);\n    };\n\n    this.onRowAdd = (updatedValue, headerCol, valueRow) => this.onChange(updatedValue, headerCol, valueRow, true);\n\n    this.handleUniverseAdd = symbols => {\n      const numberAddedSymbols = symbols.length;\n      const stateClone = JSON.parse(JSON.stringify(this.state));\n      const maxID = Math.max(...stateClone.ID); // console.log(maxID,'maxID');\n\n      stateClone.Symbol = [...stateClone.Symbol, ...symbols];\n      stateClone.Interval = [...stateClone.Interval, ...Array(numberAddedSymbols).fill(INTERVALS[0])];\n      stateClone.ID = [...stateClone.ID, ...[...Array(numberAddedSymbols)].map((a, idx) => idx + maxID + 1)];\n      const header = this.getHeaderTitle(); // this.fetchAndSetState(stateClone.Symbol, header, stateClone);\n\n      console.log(stateClone.Symbol, 'sym');\n      this.props.fetchRealTimeData(['AOS', 'MMM', 'ABT', 'ABBV', 'ABMD', 'AAPL', 'CSCO', 'INTC', 'MSFT', 'WBA', 'AXP', 'BA', 'CAT', 'CVX', 'DIS', 'DOW', 'GS', 'HD', 'IBM', 'JNJ', 'JPM', 'KO', 'MCD', 'MMM', 'MRK', 'NKE', 'PFE', 'PG', 'TRV', 'UNH', 'UTX', 'V', 'VZ', 'WMT', 'XOM'], ['closePrice']).then(obj => console.log(obj));\n    };\n\n    this.state = {\n      Symbol: SYMBOLS.slice(0, 5),\n      Interval: Array(5).fill(INTERVALS[0]),\n      ID: [...Array(5)].map((a, idx) => idx) // 'Last Price': Array(8).fill(0)\n\n    };\n  } // Returns all the headers based on state object keys\n\n\n  componentDidMount() {\n    let {\n      Symbol,\n      Interval,\n      ID\n    } = this.state;\n    let rehydrate = {};\n    let header;\n\n    try {\n      header = localStorage.getItem('header').split(',');\n      Symbol = localStorage.getItem('Symbol').split(',');\n      Interval = localStorage.getItem('Interval').split(',');\n      ID = localStorage.getItem('ID').split(',');\n      rehydrate = { ...rehydrate,\n        Symbol,\n        Interval,\n        ID\n      }; // console.log('rehydrate',rehydrate)\n    } catch {\n      header = this.getHeaderTitle();\n    }\n\n    this.setState(rehydrate, () => {\n      // console.log('mount h', header)\n      this.fetchAndSetState(Symbol, header);\n    });\n  } //used for dropdowns - updates one row\n\n\n  render() {\n    const header = this.getHeaderTitle(); // passed from the withSort HOC\n\n    const {\n      sortConfig\n    } = this.props;\n    const {\n      Symbol\n    } = this.state;\n    const usedIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [item]);\n    updateKey = header;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        style: {\n          gridTemplateColumns: `20px repeat(${header.length}, 1fr) 0`,\n          gridTemplateRows: `repeat(${Symbol.length + 1}, 1fr) 0`\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScreenHeader, {\n          header: header,\n          sortTable: this.sortTable,\n          sortConfig: sortConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddColumnButton, {\n          style: {\n            gridColumn: `${header.length + 2}`\n          },\n          handleColumnUpdate: this.handleColumnUpdate,\n          usedIndicatorsDefault: usedIndicators\n        }, updateKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(GenerateGrid, { ...this.state,\n          header: header,\n          onChange: this.onChange,\n          handleRowDelete: this.handleRowDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          options: SYMBOLS,\n          gridRow: Symbol.length + 2,\n          gridColumn: 1 // key={colIdx.toString()+rowIdx.toString()}\n          ,\n          onChange: this.onRowAdd,\n          customStyles: {\n            height: '30px',\n            borderBottom: '1px solid black',\n            borderLeft: '1px solid black',\n            marginLeft: '-1px'\n          },\n          className: 'add-row',\n          children: SYMBOLS[Symbol.length]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddStockUniverseButton, {\n          style: {\n            gridColumn: '1',\n            gridRow: '1'\n          },\n          handleUniverseAdd: this.handleUniverseAdd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","AddColumnButton","Dropdown","AddStockUniverseButton","INTERVALS","SYMBOLS","API_TO_INDICATORS","INDICATORS_TO_API","permanentHeaders","updateKey","RadarScreen","Component","constructor","props","getHeaderTitle","headerTitle","Object","keys","state","filter","key","undefined","item","fetchAndSetState","Symbol","header","clearedState","valueRow","fetchRealTimeData","apiIndicators","flatMap","includes","stateUpdates","then","indicatorObject","console","log","forEach","apiIndicator","indicatorColumn","updatedRows","updatedValuesFromFetch","assign","catch","e","setState","localStorage","setItem","Interval","ID","onChange","updatedValue","headerCol","rowAdded","prevState","columnName","maxID","Math","max","Array","sortTable","event","sortedTable","onSort","handleColumnUpdate","names","JSON","parse","stringify","handleRowDelete","rowIdx","Number","target","id","stateClone","splice","onRowAdd","handleUniverseAdd","symbols","numberAddedSymbols","length","fill","map","a","idx","obj","slice","componentDidMount","rehydrate","getItem","split","render","sortConfig","usedIndicators","gridTemplateColumns","gridTemplateRows","gridColumn","height","borderBottom","borderLeft","marginLeft","gridRow"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport AddStockUniverseButton from '../add-stock-universe-button/add-stock-universe-button.component';\n\nimport {\n\tINTERVALS,\n\tSYMBOLS,\n\tAPI_TO_INDICATORS,\n\tINDICATORS_TO_API,\n} from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst permanentHeaders = ['ID', 'Symbol', 'Interval'];\n\nlet updateKey = null;\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tSymbol: SYMBOLS.slice(0, 5),\n\t\t\tInterval: Array(5).fill(INTERVALS[0]),\n\t\t\tID: [...Array(5)].map((a, idx) => idx),\n\t\t\t// 'Last Price': Array(8).fill(0)\n\t\t};\n\t}\n\n\t// Returns all the headers based on state object keys\n\tgetHeaderTitle = () => {\n\t\tlet headerTitle = Object.keys(this.state).filter(\n\t\t\tkey => this.state[key] !== undefined\n\t\t);\n\t\t// console.log(headerTitle)\n\t\theaderTitle = headerTitle.filter(item => item !== 'ID');\n\t\treturn headerTitle;\n\t};\n\n\tfetchAndSetState = (Symbol, header, clearedState, valueRow) => {\n\t\tconst { fetchRealTimeData } = this.props;\n\n\t\t// map the header (= state keys) to INDICATORS_TO_API; do not include permanent headers\n\t\tconst apiIndicators = header.flatMap(item =>\n\t\t\tpermanentHeaders.includes(item) ? [] : [INDICATORS_TO_API[item]]\n\t\t);\n\n\t\tlet stateUpdates = {};\n\n\t\t//fetch for all symbols and the apiIndicators\n\t\tfetchRealTimeData(Symbol, apiIndicators)\n\t\t\t.then(indicatorObject => {\n\t\t\t\tconsole.log(indicatorObject, 'in');\n\t\t\t\t// loop over all apiIndicators\n\t\t\t\tapiIndicators.forEach(apiIndicator => {\n\t\t\t\t\tconsole.log(apiIndicator, 'apiIndicator');\n\n\t\t\t\t\t// look up the name used for the column header (and state key)\n\t\t\t\t\tconst indicatorColumn = API_TO_INDICATORS[apiIndicator];\n\t\t\t\t\tlet updatedRows = this.state[indicatorColumn];\n\t\t\t\t\tlet updatedValuesFromFetch;\n\t\t\t\t\tif (indicatorObject) {\n\t\t\t\t\t\tupdatedValuesFromFetch = indicatorObject[apiIndicator];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdatedValuesFromFetch = ['NA'];\n\t\t\t\t\t}\n\t\t\t\t\tupdatedRows =\n\t\t\t\t\t\tvalueRow !== undefined\n\t\t\t\t\t\t\t? Object.assign([], this.state[indicatorColumn], {\n\t\t\t\t\t\t\t\t\t[valueRow]: updatedValuesFromFetch[0],\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: updatedValuesFromFetch;\n\n\t\t\t\t\t// console.log(updatedRows, 'upr');\n\n\t\t\t\t\t// merge the result of the current indicator column with the temp state object\n\t\t\t\t\tstateUpdates = {\n\t\t\t\t\t\t...stateUpdates,\n\t\t\t\t\t\t[indicatorColumn]: updatedRows,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn stateUpdates;\n\t\t\t})\n\t\t\t.catch(e => console.log(e, 'error'))\n\t\t\t// update state to the updated indicators and the clearedState (all unused indicators set to null)\n\t\t\t.then(stateUpdates =>\n\t\t\t\tthis.setState({ ...clearedState, ...stateUpdates }, () => {\n\t\t\t\t\t// console.log(stateUpdates,clearedState,'c',{...stateUpdates,...clearedState})\n\t\t\t\t\t// console.log(this.getHeaderTitle())\n\t\t\t\t\tlocalStorage.setItem('header', this.getHeaderTitle());\n\t\t\t\t\tlocalStorage.setItem('Symbol', this.state.Symbol);\n\t\t\t\t\tlocalStorage.setItem('Interval', this.state.Interval);\n\t\t\t\t\tlocalStorage.setItem('ID', this.state.ID);\n\t\t\t\t})\n\t\t\t);\n\t};\n\n\tcomponentDidMount() {\n\t\tlet { Symbol, Interval, ID } = this.state;\n\t\tlet rehydrate = {};\n\t\tlet header;\n\t\ttry {\n\t\t\theader = localStorage.getItem('header').split(',');\n\t\t\tSymbol = localStorage.getItem('Symbol').split(',');\n\t\t\tInterval = localStorage.getItem('Interval').split(',');\n\t\t\tID = localStorage.getItem('ID').split(',');\n\n\t\t\trehydrate = { ...rehydrate, Symbol, Interval, ID };\n\t\t\t// console.log('rehydrate',rehydrate)\n\t\t} catch {\n\t\t\theader = this.getHeaderTitle();\n\t\t}\n\n\t\tthis.setState(rehydrate, () => {\n\t\t\t// console.log('mount h', header)\n\t\t\tthis.fetchAndSetState(Symbol, header);\n\t\t});\n\t}\n\n\t//used for dropdowns - updates one row\n\tonChange = (updatedValue, headerCol, valueRow, rowAdded) => {\n\t\tconst header = this.getHeaderTitle();\n\n\t\t//update the changed cell (Symbol, Interval)\n\t\tthis.setState(\n\t\t\tprevState => {\n\t\t\t\tconst columnName = header[headerCol]; //which column changed (Symbol, Interval)\n\t\t\t\t// console.log(prevState.ID,'prevState.ID')\n\t\t\t\tconst maxID = Math.max(...prevState.ID);\n\t\t\t\treturn {\n\t\t\t\t\t[columnName]: Object.assign([], prevState[columnName], {\n\t\t\t\t\t\t[valueRow]: updatedValue,\n\t\t\t\t\t}),\n\t\t\t\t\tInterval: rowAdded\n\t\t\t\t\t\t? Object.assign([], prevState.Interval, { [valueRow]: 'Daily' })\n\t\t\t\t\t\t: prevState.Interval,\n\t\t\t\t\tID: rowAdded\n\t\t\t\t\t\t? Object.assign([], prevState.ID, { [valueRow]: maxID + 1 })\n\t\t\t\t\t\t: prevState.ID,\n\t\t\t\t};\n\t\t\t},\n\t\t\t//fetch the data for the entire row based on Symbol, Interval\n\t\t\t() => {\n\t\t\t\tconst Symbol = new Array(this.state.Symbol[valueRow]);\n\t\t\t\tthis.fetchAndSetState(Symbol, header, {}, valueRow);\n\t\t\t}\n\t\t);\n\t};\n\n\tsortTable = event => {\n\t\tthis.setState((prevState, props) => {\n\t\t\tconst sortedTable = props.onSort(event, prevState);\n\t\t\treturn sortedTable;\n\t\t});\n\t};\n\n\thandleColumnUpdate = names => {\n\t\tconst { Symbol } = this.state;\n\t\t// merge permanentHeaders with the updated column names\n\t\tconst header = [...permanentHeaders, ...names];\n\n\t\tconst clearedState = JSON.parse(JSON.stringify(this.state));\n\n\t\tObject.keys(clearedState).forEach(key => {\n\t\t\tif (!header.includes(key)) {\n\t\t\t\t// clearedState = {\n\t\t\t\t// \t...clearedState,\n\t\t\t\t// \t[key]: undefined\n\t\t\t\t// }\n\t\t\t\tclearedState[key] = undefined;\n\t\t\t}\n\t\t});\n\n\t\t// console.log(clearedState,'cl')\n\n\t\tthis.fetchAndSetState(Symbol, header, clearedState);\n\t};\n\n\thandleRowDelete = e => {\n\t\tconst rowIdx = Number(e.target.id);\n\t\tconst stateClone = JSON.parse(JSON.stringify(this.state));\n\n\t\t// console.log(stateClone, rowIdx)\n\n\t\tObject.keys(stateClone).forEach(key => {\n\t\t\t// console.log(key, stateClone[key], 'k')\n\t\t\t// stateClone = {\n\t\t\t// \t...stateClone,\n\t\t\t// \t[key]: stateClone[key].flatMap((item, index) =>\n\t\t\t// \t\tindex === rowIdx ? [] : [item]\n\t\t\t// \t)\n\t\t\t// }\n\n\t\t\t// stateClone[key] = stateClone[key].flatMap((item, index) =>\n\t\t\t// \t\tindex === rowIdx ? [] : [item]\n\t\t\t// \t)\n\n\t\t\tstateClone[key].splice(rowIdx, 1);\n\t\t});\n\n\t\tthis.setState(stateClone);\n\t};\n\n\tonRowAdd = (updatedValue, headerCol, valueRow) =>\n\t\tthis.onChange(updatedValue, headerCol, valueRow, true);\n\n\thandleUniverseAdd = symbols => {\n\t\tconst numberAddedSymbols = symbols.length;\n\n\t\tconst stateClone = JSON.parse(JSON.stringify(this.state));\n\t\tconst maxID = Math.max(...stateClone.ID);\n\t\t// console.log(maxID,'maxID');\n\n\t\tstateClone.Symbol = [...stateClone.Symbol, ...symbols];\n\t\tstateClone.Interval = [\n\t\t\t...stateClone.Interval,\n\t\t\t...Array(numberAddedSymbols).fill(INTERVALS[0]),\n\t\t];\n\t\tstateClone.ID = [\n\t\t\t...stateClone.ID,\n\t\t\t...[...Array(numberAddedSymbols)].map((a, idx) => idx + maxID + 1),\n\t\t];\n\n\t\tconst header = this.getHeaderTitle();\n\n\t\t// this.fetchAndSetState(stateClone.Symbol, header, stateClone);\n\t\tconsole.log(stateClone.Symbol, 'sym');\n\t\tthis.props\n\t\t\t.fetchRealTimeData(\n\t\t\t\t[\n\t\t\t\t\t'AOS',\n\t\t\t\t\t'MMM',\n\t\t\t\t\t'ABT',\n\t\t\t\t\t'ABBV',\n\t\t\t\t\t'ABMD',\n\t\t\t\t\t'AAPL',\n\t\t\t\t\t'CSCO',\n\t\t\t\t\t'INTC',\n\t\t\t\t\t'MSFT',\n\t\t\t\t\t'WBA',\n\t\t\t\t\t'AXP',\n\t\t\t\t\t'BA',\n\t\t\t\t\t'CAT',\n\t\t\t\t\t'CVX',\n\t\t\t\t\t'DIS',\n\t\t\t\t\t'DOW',\n\t\t\t\t\t'GS',\n\t\t\t\t\t'HD',\n\t\t\t\t\t'IBM',\n\t\t\t\t\t'JNJ',\n\t\t\t\t\t'JPM',\n\t\t\t\t\t'KO',\n\t\t\t\t\t'MCD',\n\t\t\t\t\t'MMM',\n\t\t\t\t\t'MRK',\n\t\t\t\t\t'NKE',\n\t\t\t\t\t'PFE',\n\t\t\t\t\t'PG',\n\t\t\t\t\t'TRV',\n\t\t\t\t\t'UNH',\n\t\t\t\t\t'UTX',\n\t\t\t\t\t'V',\n\t\t\t\t\t'VZ',\n\t\t\t\t\t'WMT',\n\t\t\t\t\t'XOM',\n\t\t\t\t],\n\t\t\t\t['closePrice']\n\t\t\t)\n\t\t\t.then(obj => console.log(obj));\n\t};\n\n\trender() {\n\t\tconst header = this.getHeaderTitle();\n\t\t// passed from the withSort HOC\n\t\tconst { sortConfig } = this.props;\n\t\tconst { Symbol } = this.state;\n\n\t\tconst usedIndicators = header.flatMap(item =>\n\t\t\tpermanentHeaders.includes(item) ? [] : [item]\n\t\t);\n\n\t\tupdateKey = header;\n\n\t\treturn (\n\t\t\t<div className='radarscreen'>\n\t\t\t\t<div\n\t\t\t\t\tid='grid-container'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tgridTemplateColumns: `20px repeat(${header.length}, 1fr) 0`,\n\t\t\t\t\t\tgridTemplateRows: `repeat(${Symbol.length + 1}, 1fr) 0`,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<ScreenHeader\n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tsortTable={this.sortTable}\n\t\t\t\t\t\tsortConfig={sortConfig}\n\t\t\t\t\t/>\n\t\t\t\t\t<AddColumnButton\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tgridColumn: `${header.length + 2}`,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\thandleColumnUpdate={this.handleColumnUpdate}\n\t\t\t\t\t\tusedIndicatorsDefault={usedIndicators}\n\t\t\t\t\t\tkey={updateKey}\n\t\t\t\t\t/>\n\t\t\t\t\t<GenerateGrid\n\t\t\t\t\t\t{...this.state}\n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\thandleRowDelete={this.handleRowDelete}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\toptions={SYMBOLS}\n\t\t\t\t\t\tgridRow={Symbol.length + 2}\n\t\t\t\t\t\tgridColumn={1}\n\t\t\t\t\t\t// key={colIdx.toString()+rowIdx.toString()}\n\t\t\t\t\t\tonChange={this.onRowAdd}\n\t\t\t\t\t\tcustomStyles={{\n\t\t\t\t\t\t\theight: '30px',\n\t\t\t\t\t\t\tborderBottom: '1px solid black',\n\t\t\t\t\t\t\tborderLeft: '1px solid black',\n\t\t\t\t\t\t\tmarginLeft: '-1px',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName={'add-row'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{SYMBOLS[Symbol.length]}\n\t\t\t\t\t</Dropdown>\n\n\t\t\t\t\t<AddStockUniverseButton\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tgridColumn: '1',\n\t\t\t\t\t\t\tgridRow: '1',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\thandleUniverseAdd={this.handleUniverseAdd}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default RadarScreen;\n"]},"metadata":{},"sourceType":"module"}