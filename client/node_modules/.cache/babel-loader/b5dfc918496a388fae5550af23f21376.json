{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport { INTERVALS, SYMBOLS, API_TO_INDICATORS, indicatorsMap } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst permanentHeaders = ['Symbol', 'Interval'];\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getHeaderTitle = () => {\n      const headerTitle = Object.keys(this.state).filter(key => this.state[key] !== null);\n      return headerTitle;\n    };\n\n    this.fetchAndSetState = (apiIndicators, clearedState) => {\n      const {\n        Symbol\n      } = this.state;\n      let stateUpdates = {}; //fetch for all symbols and the apiIndicators\n\n      this.props.fetchRealTimeData(Symbol, apiIndicators).then(indicatorObject => {\n        // loop over all apiIndicators\n        apiIndicators.forEach(apiIndicator => {\n          // look up the name used for the column header (and state key)\n          const indicatorColumn = API_TO_INDICATORS[apiIndicator]; // merge the result of the current indicator column with the temp state object\n\n          stateUpdates = { ...stateUpdates,\n            [indicatorColumn]: indicatorObject[apiIndicator]\n          };\n        });\n        return stateUpdates;\n      }) // update state to the updated indicators and the clearedState (all unused indicators set to null)\n      .then(stateUpdates => this.setState({ ...stateUpdates,\n        ...clearedState\n      } // , () => console.log(this.state,'s')\n      ));\n    };\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const {\n        fetchRealTimeData\n      } = this.props;\n      const header = this.getHeaderTitle();\n      const apiIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [indicatorsMap[item]]);\n      let fetchedDataRow = {};\n      this.setState(prevState => {\n        const columnName = header[headerCol]; //which column changed (Symbol, Interval)\n\n        return {\n          [columnName]: Object.assign([], prevState[columnName], {\n            [valueRow]: updatedValue\n          })\n        };\n      }, () => {\n        fetchRealTimeData(new Array(this.state.Symbol[valueRow]), apiIndicators).then(indicatorObject => {\n          apiIndicators.forEach(apiIndicator => {\n            const indicatorColumn = API_TO_INDICATORS[apiIndicator];\n            fetchedDataRow = { ...fetchedDataRow,\n              [indicatorColumn]: Object.assign([], this.state[indicatorColumn], {\n                [valueRow]: indicatorObject[apiIndicator][0]\n              })\n            };\n          });\n          return fetchedDataRow;\n        }).then(fetchedDataRow => this.setState(fetchedDataRow));\n      });\n    };\n\n    this.sortTable = event => {\n      const sortedTable = this.props.onSort(event, this.state);\n      this.setState(sortedTable);\n    };\n\n    this.getClassNameForHeader = name => {\n      const {\n        sortConfig\n      } = this.props;\n\n      if (!sortConfig) {\n        return;\n      }\n\n      const direction = sortConfig.direction === 1 ? 'ascending' : 'descending';\n      return sortConfig.sortedField === name ? direction : undefined;\n    };\n\n    this.handleColumnUpdate = names => {\n      // merge permanentHeaders with the updated column names\n      const headerTitles = [...permanentHeaders, ...names];\n      const apiIndicators = names.map(item => indicatorsMap[item]);\n      let clearedState = JSON.parse(JSON.stringify(this.state));\n      Object.keys(clearedState).forEach(key => {\n        if (!headerTitles.includes(key)) {\n          clearedState = { ...clearedState,\n            [key]: null\n          };\n        }\n      });\n      this.fetchAndSetState(apiIndicators, clearedState);\n    };\n\n    this.state = {\n      Symbol: SYMBOLS.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      'Last Price': Array(8).fill(0),\n      'Volume': Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      Symbol\n    } = this.state; // console.log('mount')\n\n    const header = this.getHeaderTitle(); // map the header (= state keys) to indicatorsMap; do not include permanent headers\n\n    const apiIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [indicatorsMap[item]]);\n    this.fetchAndSetState(apiIndicators);\n  }\n\n  render() {\n    const header = this.getHeaderTitle(); // passed from the withSort HOC\n\n    const {\n      sortConfig\n    } = this.props;\n    const usedIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [item]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        style: {\n          gridTemplateColumns: `repeat(${header.length}, 1fr) 0`\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScreenHeader, {\n          header: header,\n          sortTable: this.sortTable,\n          sortConfig: sortConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddColumnButton, {\n          style: {\n            gridColumn: `${header.length}+1`\n          },\n          handleColumnUpdate: this.handleColumnUpdate,\n          usedIndicators: usedIndicators\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(GenerateGrid, { ...this.state,\n          header: header,\n          onChange: this.onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","AddColumnButton","INTERVALS","SYMBOLS","API_TO_INDICATORS","indicatorsMap","permanentHeaders","RadarScreen","Component","constructor","props","getHeaderTitle","headerTitle","Object","keys","state","filter","key","fetchAndSetState","apiIndicators","clearedState","Symbol","stateUpdates","fetchRealTimeData","then","indicatorObject","forEach","apiIndicator","indicatorColumn","setState","onChange","updatedValue","headerCol","valueRow","header","flatMap","item","includes","fetchedDataRow","prevState","columnName","assign","Array","sortTable","event","sortedTable","onSort","getClassNameForHeader","name","sortConfig","direction","sortedField","undefined","handleColumnUpdate","names","headerTitles","map","JSON","parse","stringify","slice","Interval","fill","componentDidMount","render","usedIndicators","gridTemplateColumns","length","gridColumn"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,eAAP,MAA4B,kDAA5B;AAEA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,iBAA7B,EAAgDC,aAAhD,QAAqE,wBAArE;AAEA,OAAO,0BAAP;;AAEA,MAAMC,gBAAgB,GAAG,CAAC,QAAD,EAAW,UAAX,CAAzB;;AAKA,MAAMC,WAAN,SAA0BT,KAAK,CAACU,SAAhC,CAA0C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAUnBC,cAVmB,GAUF,MAAM;AACtB,YAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKC,KAAjB,EAAwBC,MAAxB,CAA+BC,GAAG,IAAI,KAAKF,KAAL,CAAWE,GAAX,MAAoB,IAA1D,CAApB;AACA,aAAOL,WAAP;AACA,KAbkB;;AAAA,SAenBM,gBAfmB,GAeA,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AAEnD,YAAM;AAAEC,QAAAA;AAAF,UAAa,KAAKN,KAAxB;AAEA,UAAIO,YAAY,GAAG,EAAnB,CAJmD,CAMnD;;AACA,WAAKZ,KAAL,CAAWa,iBAAX,CAA6BF,MAA7B,EAAqCF,aAArC,EACCK,IADD,CACMC,eAAe,IAAI;AACxB;AACAN,QAAAA,aAAa,CAACO,OAAd,CAAsBC,YAAY,IAAI;AACrC;AACA,gBAAMC,eAAe,GAAGxB,iBAAiB,CAACuB,YAAD,CAAzC,CAFqC,CAGrC;;AACAL,UAAAA,YAAY,GAAG,EACd,GAAGA,YADW;AAEd,aAACM,eAAD,GAAmBH,eAAe,CAACE,YAAD;AAFpB,WAAf;AAIA,SARD;AASA,eAAOL,YAAP;AACA,OAbD,EAcA;AAdA,OAeCE,IAfD,CAeMF,YAAY,IAAI,KAAKO,QAAL,CAAc,EAAC,GAAGP,YAAJ;AAAiB,WAAGF;AAApB,OAAd,CACrB;AADqB,OAftB;AAkBA,KAxCkB;;AAAA,SAyDnBU,QAzDmB,GAyDR,CAACC,YAAD,EAAeC,SAAf,EAA0BC,QAA1B,KAAuC;AAEjD,YAAM;AAACV,QAAAA;AAAD,UAAsB,KAAKb,KAAjC;AACA,YAAMwB,MAAM,GAAG,KAAKvB,cAAL,EAAf;AAEA,YAAMQ,aAAa,GAAGe,MAAM,CAACC,OAAP,CAAeC,IAAI,IACxC9B,gBAAgB,CAAC+B,QAAjB,CAA0BD,IAA1B,IAAkC,EAAlC,GAAuC,CAAC/B,aAAa,CAAC+B,IAAD,CAAd,CADlB,CAAtB;AAIA,UAAIE,cAAc,GAAG,EAArB;AAEA,WAAKT,QAAL,CAAcU,SAAS,IAAI;AAC1B,cAAMC,UAAU,GAAGN,MAAM,CAACF,SAAD,CAAzB,CAD0B,CACY;;AACtC,eAAO;AACN,WAACQ,UAAD,GAAc3B,MAAM,CAAC4B,MAAP,CAAc,EAAd,EAAkBF,SAAS,CAACC,UAAD,CAA3B,EAAyC;AAAC,aAACP,QAAD,GAAYF;AAAb,WAAzC;AADR,SAAP;AAGA,OALD,EAOA,MAAM;AACLR,QAAAA,iBAAiB,CAAC,IAAImB,KAAJ,CAAU,KAAK3B,KAAL,CAAWM,MAAX,CAAkBY,QAAlB,CAAV,CAAD,EAAyCd,aAAzC,CAAjB,CACCK,IADD,CACMC,eAAe,IAAI;AACxBN,UAAAA,aAAa,CAACO,OAAd,CAAsBC,YAAY,IAAI;AACrC,kBAAMC,eAAe,GAAGxB,iBAAiB,CAACuB,YAAD,CAAzC;AAEAW,YAAAA,cAAc,GAAG,EAChB,GAAGA,cADa;AAEhB,eAACV,eAAD,GAAmBf,MAAM,CAAC4B,MAAP,CAAc,EAAd,EAAkB,KAAK1B,KAAL,CAAWa,eAAX,CAAlB,EAA+C;AAAC,iBAACK,QAAD,GAAYR,eAAe,CAACE,YAAD,CAAf,CAA8B,CAA9B;AAAb,eAA/C;AAFH,aAAjB;AAIA,WAPD;AASA,iBAAOW,cAAP;AACA,SAZD,EAaCd,IAbD,CAaMc,cAAc,IAAI,KAAKT,QAAL,CAAcS,cAAd,CAbxB;AAcA,OAtBD;AAuBA,KA3FkB;;AAAA,SA6FnBK,SA7FmB,GA6FNC,KAAD,IAAW;AACtB,YAAMC,WAAW,GAAG,KAAKnC,KAAL,CAAWoC,MAAX,CAAkBF,KAAlB,EAAyB,KAAK7B,KAA9B,CAApB;AACA,WAAKc,QAAL,CAAcgB,WAAd;AACA,KAhGkB;;AAAA,SAkGnBE,qBAlGmB,GAkGKC,IAAI,IAAI;AAC/B,YAAM;AAAEC,QAAAA;AAAF,UAAiB,KAAKvC,KAA5B;;AACA,UAAI,CAACuC,UAAL,EAAiB;AAChB;AACA;;AACD,YAAMC,SAAS,GAAGD,UAAU,CAACC,SAAX,KAAyB,CAAzB,GAA6B,WAA7B,GAA2C,YAA7D;AACA,aAAOD,UAAU,CAACE,WAAX,KAA2BH,IAA3B,GAAkCE,SAAlC,GAA8CE,SAArD;AACA,KAzGkB;;AAAA,SA2GnBC,kBA3GmB,GA2GEC,KAAK,IAAI;AAC7B;AACA,YAAMC,YAAY,GAAG,CAAC,GAAGjD,gBAAJ,EAAsB,GAAGgD,KAAzB,CAArB;AAEA,YAAMnC,aAAa,GAAGmC,KAAK,CAACE,GAAN,CAAUpB,IAAI,IAAI/B,aAAa,CAAC+B,IAAD,CAA/B,CAAtB;AAEA,UAAIhB,YAAY,GAAGqC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK5C,KAApB,CAAX,CAAnB;AAEAF,MAAAA,MAAM,CAACC,IAAP,CAAYM,YAAZ,EAA0BM,OAA1B,CAAkCT,GAAG,IAAI;AACxC,YAAG,CAACsC,YAAY,CAAClB,QAAb,CAAsBpB,GAAtB,CAAJ,EAAgC;AAC/BG,UAAAA,YAAY,GAAG,EACd,GAAGA,YADW;AAEd,aAACH,GAAD,GAAO;AAFO,WAAf;AAIA;AACD,OAPD;AASA,WAAKC,gBAAL,CAAsBC,aAAtB,EAAoCC,YAApC;AACA,KA7HkB;;AAElB,SAAKL,KAAL,GAAa;AACZM,MAAAA,MAAM,EAAElB,OAAO,CAACyD,KAAR,CAAc,CAAd,EAAgB,CAAhB,CADI;AAEZC,MAAAA,QAAQ,EAAEnB,KAAK,CAAC,CAAD,CAAL,CAASoB,IAAT,CAAc5D,SAAS,CAAC,CAAD,CAAvB,CAFE;AAGZ,oBAAcwC,KAAK,CAAC,CAAD,CAAL,CAASoB,IAAT,CAAc,CAAd,CAHF;AAIZ,gBAAUpB,KAAK,CAAC,CAAD,CAAL,CAASoB,IAAT,CAAc,CAAd;AAJE,KAAb;AAMA;;AAkCDC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAE1C,MAAAA;AAAF,QAAa,KAAKN,KAAxB,CADmB,CAEnB;;AAEA,UAAMmB,MAAM,GAAG,KAAKvB,cAAL,EAAf,CAJmB,CAMnB;;AACA,UAAMQ,aAAa,GAAGe,MAAM,CAACC,OAAP,CAAeC,IAAI,IACxC9B,gBAAgB,CAAC+B,QAAjB,CAA0BD,IAA1B,IAAkC,EAAlC,GAAuC,CAAC/B,aAAa,CAAC+B,IAAD,CAAd,CADlB,CAAtB;AAIA,SAAKlB,gBAAL,CAAsBC,aAAtB;AAEA;;AAwED6C,EAAAA,MAAM,GAAG;AACR,UAAM9B,MAAM,GAAG,KAAKvB,cAAL,EAAf,CADQ,CAER;;AACA,UAAM;AAAEsC,MAAAA;AAAF,QAAiB,KAAKvC,KAA5B;AAEA,UAAMuD,cAAc,GAAG/B,MAAM,CAACC,OAAP,CAAeC,IAAI,IACzC9B,gBAAgB,CAAC+B,QAAjB,CAA0BD,IAA1B,IAAkC,EAAlC,GAAuC,CAACA,IAAD,CADjB,CAAvB;AAIA,wBACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACC;AAAK,QAAA,EAAE,EAAC,gBAAR;AACC,QAAA,KAAK,EAAE;AAAC8B,UAAAA,mBAAmB,EAAG,UAAShC,MAAM,CAACiC,MAAO;AAA9C,SADR;AAAA,gCAGC,QAAC,YAAD;AACC,UAAA,MAAM,EAAEjC,MADT;AAEC,UAAA,SAAS,EAAE,KAAKS,SAFjB;AAGC,UAAA,UAAU,EAAEM;AAHb;AAAA;AAAA;AAAA;AAAA,gBAHD,eAQC,QAAC,eAAD;AACC,UAAA,KAAK,EAAE;AACemB,YAAAA,UAAU,EAAG,GAAElC,MAAM,CAACiC,MAAO;AAD5C,WADR;AAIC,UAAA,kBAAkB,EAAE,KAAKd,kBAJ1B;AAKC,UAAA,cAAc,EAAEY;AALjB;AAAA;AAAA;AAAA;AAAA,gBARD,eAeC,QAAC,YAAD,OACK,KAAKlD,KADV;AAEC,UAAA,MAAM,EAAEmB,MAFT;AAGC,UAAA,QAAQ,EAAE,KAAKJ;AAHhB;AAAA;AAAA;AAAA;AAAA,gBAfD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAyBA;;AAlKwC;;AAqK1C,eAAevB,WAAf","sourcesContent":["import React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\n\nimport { INTERVALS, SYMBOLS, API_TO_INDICATORS, indicatorsMap } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst permanentHeaders = ['Symbol', 'Interval'];\n\n\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tSymbol: SYMBOLS.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\t'Last Price': Array(8).fill(0),\n\t\t\t'Volume': Array(8).fill(0)\n\t\t}\n\t}\n\n\tgetHeaderTitle = () => {\n\t\tconst headerTitle = Object.keys(this.state).filter(key => this.state[key] !== null);\n\t\treturn headerTitle;\n\t}\n\n\tfetchAndSetState = (apiIndicators, clearedState) => {\n\t\t\n\t\tconst { Symbol } = this.state;\n\n\t\tlet stateUpdates = {};\n\n\t\t//fetch for all symbols and the apiIndicators\n\t\tthis.props.fetchRealTimeData(Symbol, apiIndicators)\n\t\t.then(indicatorObject => {\n\t\t\t// loop over all apiIndicators\n\t\t\tapiIndicators.forEach(apiIndicator => {\n\t\t\t\t// look up the name used for the column header (and state key)\n\t\t\t\tconst indicatorColumn = API_TO_INDICATORS[apiIndicator];\n\t\t\t\t// merge the result of the current indicator column with the temp state object\n\t\t\t\tstateUpdates = {\n\t\t\t\t\t...stateUpdates,\n\t\t\t\t\t[indicatorColumn]: indicatorObject[apiIndicator]\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn stateUpdates\n\t\t})\n\t\t// update state to the updated indicators and the clearedState (all unused indicators set to null)\n\t\t.then(stateUpdates => this.setState({...stateUpdates,...clearedState}\n\t\t\t// , () => console.log(this.state,'s')\n\t\t))\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol } = this.state;\n\t\t// console.log('mount')\n\n\t\tconst header = this.getHeaderTitle();\n\n\t\t// map the header (= state keys) to indicatorsMap; do not include permanent headers\n\t\tconst apiIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [indicatorsMap[item]]\n\t\t)\n\t\t\n\t\tthis.fetchAndSetState(apiIndicators);\n\t\t\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst {fetchRealTimeData} = this.props;\n\t\tconst header = this.getHeaderTitle();\n\n\t\tconst apiIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [indicatorsMap[item]]\n\t\t)\n\n\t\tlet fetchedDataRow = {};\n\n\t\tthis.setState(prevState => {\n\t\t\tconst columnName = header[headerCol]; //which column changed (Symbol, Interval)\n\t\t\treturn {\n\t\t\t\t[columnName]: Object.assign([], prevState[columnName], {[valueRow]: updatedValue})\n\t\t\t}\n\t\t}\n\t\t,\n\t\t() => {\n\t\t\tfetchRealTimeData(new Array(this.state.Symbol[valueRow]), apiIndicators)\n\t\t\t.then(indicatorObject => {\n\t\t\t\tapiIndicators.forEach(apiIndicator => {\n\t\t\t\t\tconst indicatorColumn = API_TO_INDICATORS[apiIndicator];\n\n\t\t\t\t\tfetchedDataRow = {\n\t\t\t\t\t\t...fetchedDataRow,\n\t\t\t\t\t\t[indicatorColumn]: Object.assign([], this.state[indicatorColumn], {[valueRow]: indicatorObject[apiIndicator][0]})\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn fetchedDataRow;\n\t\t\t})\n\t\t\t.then(fetchedDataRow => this.setState(fetchedDataRow))\n\t\t})\n\t}\n\n\tsortTable = (event) => {\n\t\tconst sortedTable = this.props.onSort(event, this.state);\n\t\tthis.setState(sortedTable);\n\t}\n\n\tgetClassNameForHeader = name => {\n\t\tconst { sortConfig } = this.props;\n\t\tif (!sortConfig) {\n\t\t\treturn;\n\t\t}\n\t\tconst direction = sortConfig.direction === 1 ? 'ascending' : 'descending'; \n\t\treturn sortConfig.sortedField === name ? direction : undefined;\n\t};\n\n\thandleColumnUpdate = names => {\n\t\t// merge permanentHeaders with the updated column names\n\t\tconst headerTitles = [...permanentHeaders, ...names];\n\n\t\tconst apiIndicators = names.map(item => indicatorsMap[item]);\n\n\t\tlet clearedState = JSON.parse(JSON.stringify(this.state));\n\n\t\tObject.keys(clearedState).forEach(key => {\n\t\t\tif(!headerTitles.includes(key)) {\n\t\t\t\tclearedState = {\n\t\t\t\t\t...clearedState,\n\t\t\t\t\t[key]: null\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.fetchAndSetState(apiIndicators,clearedState);\n\t}\n\t\n\trender() {\n\t\tconst header = this.getHeaderTitle();\n\t\t// passed from the withSort HOC\n\t\tconst { sortConfig } = this.props;\n\n\t\tconst usedIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [item]\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div id=\"grid-container\" \n\t\t\t\t\tstyle={{gridTemplateColumns: `repeat(${header.length}, 1fr) 0`}}\n\t\t\t\t>\n\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tsortTable={this.sortTable}\n\t\t\t\t\t\tsortConfig={sortConfig}\n\t\t\t\t\t/>\n\t\t\t\t\t<AddColumnButton \n\t\t\t\t\t\tstyle={{\n                            gridColumn: `${header.length}+1`\n                        }}\n\t\t\t\t\t\thandleColumnUpdate={this.handleColumnUpdate}\n\t\t\t\t\t\tusedIndicators={usedIndicators}\n\t\t\t\t\t/>\n\t\t\t\t\t<GenerateGrid \n\t\t\t\t\t\t{...this.state}\n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}