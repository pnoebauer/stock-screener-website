{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport GenerateGrid from '../generate-screen-grid/generate-screen-grid.component';\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst headerTitle = ['Symbol', 'Interval', 'Price'];\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const {\n        fetchRealTimeData\n      } = this.props;\n      this.setState(prevState => {\n        const columnName = prevState.header[headerCol]; //which column changed (Symbol, Interval)\n\n        console.log(columnName, 'columnName');\n        return {\n          [columnName]: Object.assign([], prevState[columnName], {\n            [valueRow]: updatedValue\n          })\n        };\n      }, () => {\n        // console.log(this.state,this.state.Symbol[valueRow])\n        fetchRealTimeData(new Array(this.state[Symbol][valueRow]), 'lastPrice').then(lastPrice => {\n          this.setState({\n            Price: Object.assign([], this.state.Price, {\n              [valueRow]: lastPrice[0]\n            })\n          }, () => console.log(this.state));\n        });\n      }); // this.setState({\n      // \t[header[headerCol]]: Object.assign([], this.state.header[headerCol], {[valueRow]: updatedValue})\n      // }\n      // ,\n      // () => console.log(this.state)\n      // )\n      // const stateKey = this.state.header[headerCol];\t//which column changed (Symbol, Interval)\n      // const values = [...this.state[stateKey]];\t//all values of that column from top to bottom\n      // const prices = [...this.state.Price];\t//all prices\n      // values[valueRow] = updatedValue;\t//update that particular cell that changed (i.e. GOOGL to AMZN)\n      // let symbol = updatedValue, interval = updatedValue; //set symbol and interval to that new value\n      // if (stateKey==='Symbol') {\t//if a value in the Symbol column changed\n      // \tinterval = this.state.Interval[valueRow];\t//reset Interval for that row to the prior value\n      // }\n      // else if (stateKey==='Interval') {\t//if a value in the Interval column changed\n      // \tsymbol = this.state.Symbol[valueRow];\t//reset Symbol for that row to the prior value\n      // }\n      // this.props.fetchRealTimeData(new Array(symbol), 'lastPrice')\n      // .then(lastPrice => {\n      // \tprices[valueRow] = lastPrice[0];\n      // \tthis.setState({\n      // \t\tPrice: prices,\n      // \t\t[stateKey]: values\n      // \t});\n      // });\n    };\n\n    this.sortTable = event => {\n      const sortedTable = this.props.onSort(event, this.state);\n      this.setState(sortedTable);\n    };\n\n    this.getClassNameForHeader = name => {\n      const {\n        sortConfig\n      } = this.props;\n\n      if (!sortConfig) {\n        return;\n      }\n\n      const direction = sortConfig.direction === 1 ? 'ascending' : 'descending';\n      return sortConfig.sortedField === name ? direction : undefined;\n    };\n\n    this.state = {\n      header: headerTitle,\n      Symbol: SYMBOLS.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      Price: Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      Symbol\n    } = this.state; // console.log('mount')\n\n    this.props.fetchRealTimeData(Symbol, 'lastPrice').then(data => this.setState({\n      Price: data\n    }));\n  }\n\n  render() {\n    const {\n      header,\n      Symbol\n    } = this.state; // console.log('rend',this.state,this.props)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        children: [header.map((type, colIdx) => /*#__PURE__*/_jsxDEV(ScreenHeader, {\n          gridColumn: colIdx + 1,\n          onSort: this.sortTable,\n          id: type,\n          className: `screen-header ${this.getClassNameForHeader(type)}`,\n          children: type\n        }, colIdx.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this)), //loop through the header items (columns) and afterwards loop through stored values (rows)  \n        header.map((type, colIdx) => this.state[type].map((rowVal, rowIdx) => /*#__PURE__*/_jsxDEV(GenerateGrid, {\n          type: type,\n          gridLocation: {\n            rowIdx,\n            colIdx\n          },\n          onChange: this.onChange,\n          children: rowVal\n        }, `${Symbol[rowIdx]}-${type}-${rowIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 10\n        }, this)))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","INTERVALS","SYMBOLS","headerTitle","RadarScreen","Component","constructor","props","onChange","updatedValue","headerCol","valueRow","fetchRealTimeData","setState","prevState","columnName","header","console","log","Object","assign","Array","state","Symbol","then","lastPrice","Price","sortTable","event","sortedTable","onSort","getClassNameForHeader","name","sortConfig","direction","sortedField","undefined","slice","Interval","fill","componentDidMount","data","render","map","type","colIdx","toString","rowVal","rowIdx"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport GenerateGrid from '../generate-screen-grid/generate-screen-grid.component';\n\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\n\nconst headerTitle = ['Symbol', 'Interval', 'Price']\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\theader: headerTitle,\n\t\t\tSymbol: SYMBOLS.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\tPrice: Array(8).fill(0)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol } = this.state;\n\t\t// console.log('mount')\n\t\tthis.props.fetchRealTimeData(Symbol, 'lastPrice')\n\t\t.then(data => this.setState({\n\t\t\t\t\tPrice: data\n\t\t\t\t})\t\n\t\t);\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst {fetchRealTimeData} = this.props;\n\n\t\tthis.setState(prevState => {\n\t\t\tconst columnName = prevState.header[headerCol];\t//which column changed (Symbol, Interval)\n\t\t\tconsole.log(columnName, 'columnName')\n\t\t\treturn {\n\t\t\t\t[columnName]: Object.assign([], prevState[columnName], {[valueRow]: updatedValue})\n\t\t\t}\n\t\t}\n\t\t,\n\t\t() => {\n\t\t\t// console.log(this.state,this.state.Symbol[valueRow])\n\t\t\tfetchRealTimeData(new Array(this.state[Symbol][valueRow]), 'lastPrice')\n\t\t\t\t.then(lastPrice => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tPrice: Object.assign([], this.state.Price, {[valueRow]: lastPrice[0]})\n\t\t\t\t\t}\n\t\t\t\t\t,\n\t\t\t\t\t()=>console.log(this.state)\n\t\t\t\t\t\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t}\n\t\t)\n\n\t\t// this.setState({\n\t\t// \t[header[headerCol]]: Object.assign([], this.state.header[headerCol], {[valueRow]: updatedValue})\n\t\t// }\n\t\t// ,\n\t\t// () => console.log(this.state)\n\t\t// )\n\n\t\t// const stateKey = this.state.header[headerCol];\t//which column changed (Symbol, Interval)\n\t\t// const values = [...this.state[stateKey]];\t//all values of that column from top to bottom\n\t\t// const prices = [...this.state.Price];\t//all prices\n\n\t\t// values[valueRow] = updatedValue;\t//update that particular cell that changed (i.e. GOOGL to AMZN)\n\t\t\n\t\t// let symbol = updatedValue, interval = updatedValue; //set symbol and interval to that new value\n\t\t// if (stateKey==='Symbol') {\t//if a value in the Symbol column changed\n\t\t// \tinterval = this.state.Interval[valueRow];\t//reset Interval for that row to the prior value\n\t\t// }\n\t\t// else if (stateKey==='Interval') {\t//if a value in the Interval column changed\n\t\t// \tsymbol = this.state.Symbol[valueRow];\t//reset Symbol for that row to the prior value\n\t\t// }\n\n\t\t// this.props.fetchRealTimeData(new Array(symbol), 'lastPrice')\n\t\t// .then(lastPrice => {\n\t\t// \tprices[valueRow] = lastPrice[0];\n\t\t// \tthis.setState({\n\t\t// \t\tPrice: prices,\n\t\t// \t\t[stateKey]: values\n\t\t// \t});\n\t\t// });\n\t}\n\n\tsortTable = (event) => {\n\t\tconst sortedTable = this.props.onSort(event, this.state);\n\t\tthis.setState(sortedTable);\n\t}\n\n\tgetClassNameForHeader = name => {\n\t\tconst { sortConfig } = this.props;\n\t\tif (!sortConfig) {\n\t\t\treturn;\n\t\t}\n\t\tconst direction = sortConfig.direction === 1 ? 'ascending' : 'descending'; \n\t\treturn sortConfig.sortedField === name ? direction : undefined;\n\t};\n\t\n\trender() {\n\t\tconst { header, Symbol } = this.state;\n\t\t// console.log('rend',this.state,this.props)\n\n\t\treturn(\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div id=\"grid-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\theader.map((type, colIdx) => (\n\t\t\t\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\tonSort={this.sortTable}\n\t\t\t\t\t\t\t\t\tid={type}\n\t\t\t\t\t\t\t\t\tclassName={`screen-header ${this.getClassNameForHeader(type)}`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{type}\n\t\t\t\t\t\t\t\t</ScreenHeader>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t\t\t\t\t\theader.map((type, colIdx) => this.state[type].map((rowVal,rowIdx) => (\n\t\t\t\t\t\t\t\t\t<GenerateGrid\n\t\t\t\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\t\t\t\tgridLocation={{rowIdx, colIdx}}\n\t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\t\t\t\tkey={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{rowVal}\n\t\t\t\t\t\t\t\t\t</GenerateGrid>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) \n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}