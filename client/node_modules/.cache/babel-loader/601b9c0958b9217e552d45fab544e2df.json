{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-screen-grid/generate-screen-grid.component.jsx\";\nimport React from 'react';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst selectTbl = {\n  Symbol: SYMBOLS,\n  Interval: INTERVALS\n}; // gridRow={rowIdx+2}\n//     gridColumn={colIdx+1}\n//     key={colIdx.toString()+rowIdx.toString()} \n//     onChange={this.onChange})\n\nconst GenerateGrid = ({\n  type,\n  gridLocation,\n  onChange,\n  children\n}) => {\n  const {\n    rowIdx,\n    colIdx\n  } = gridLocation;\n\n  if (selectTbl[type] !== undefined) {\n    return /*#__PURE__*/_jsxDEV(Dropdown, {\n      options: selectTbl[type],\n      gridRow: rowIdx + 2,\n      gridColumn: colIdx + 1,\n      onChange: onChange,\n      children: children\n    }, colIdx.toString() + rowIdx.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ValueCell, {\n      gridRow: rowIdx + 2,\n      gridColumn: colIdx + 1,\n      children: children\n    }, colIdx.toString() + rowIdx.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n_c = GenerateGrid;\nexport default GenerateGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateGrid\");","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-screen-grid/generate-screen-grid.component.jsx"],"names":["React","Dropdown","ValueCell","SYMBOLS","INTERVALS","SP500","selectTbl","Symbol","Interval","GenerateGrid","type","gridLocation","onChange","children","rowIdx","colIdx","undefined","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AAEA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,KAA7B,QAA0C,wBAA1C;;AAEA,MAAMC,SAAS,GAAG;AACjBC,EAAAA,MAAM,EAAEJ,OADS;AAEjBK,EAAAA,QAAQ,EAAEJ;AAFO,CAAlB,C,CAMA;AACA;AACA;AACA;;AAEA,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,YAAR;AAAsBC,EAAAA,QAAtB;AAAgCC,EAAAA;AAAhC,CAAD,KAAgD;AAEjE,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBJ,YAA3B;;AAEI,MAAGL,SAAS,CAACI,IAAD,CAAT,KAAoBM,SAAvB,EAAkC;AAE9B,wBACI,QAAC,QAAD;AACI,MAAA,OAAO,EAAEV,SAAS,CAACI,IAAD,CADtB;AAEI,MAAA,OAAO,EAAEI,MAAM,GAAC,CAFpB;AAGI,MAAA,UAAU,EAAEC,MAAM,GAAC,CAHvB;AAKI,MAAA,QAAQ,EAAEH,QALd;AAAA,gBAOKC;AAPL,OAISE,MAAM,CAACE,QAAP,KAAkBH,MAAM,CAACG,QAAP,EAJ3B;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH,GAbD,MAcK;AACD,wBACI,QAAC,SAAD;AAEI,MAAA,OAAO,EAAEH,MAAM,GAAC,CAFpB;AAGI,MAAA,UAAU,EAAEC,MAAM,GAAC,CAHvB;AAAA,gBAKKF;AALL,OACSE,MAAM,CAACE,QAAP,KAAkBH,MAAM,CAACG,QAAP,EAD3B;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AAER,CA9BD;;KAAMR,Y;AAgCN,eAAeA,YAAf","sourcesContent":["import React from 'react';\n\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\n\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\n\nconst selectTbl = {\n\tSymbol: SYMBOLS,\n\tInterval: INTERVALS\n}\n\n\n// gridRow={rowIdx+2}\n//     gridColumn={colIdx+1}\n//     key={colIdx.toString()+rowIdx.toString()} \n//     onChange={this.onChange})\n\nconst GenerateGrid = ({ type, gridLocation, onChange, children }) => {\n\n    const { rowIdx, colIdx } = gridLocation;\n\n        if(selectTbl[type] !== undefined) {\n\n            return (\n                <Dropdown \n                    options={selectTbl[type]}\n                    gridRow={rowIdx+2}\n                    gridColumn={colIdx+1}\n                    key={colIdx.toString()+rowIdx.toString()} \n                    onChange={onChange}\n                >\n                    {children}\n                </Dropdown> \n            )\n        }\n        else {\n            return (\n                <ValueCell \n                    key={colIdx.toString()+rowIdx.toString()} \n                    gridRow={rowIdx+2}\n                    gridColumn={colIdx+1}\n                >\n                    {children}\n                </ValueCell>\n            )\n        }\n    \n}\n\nexport default GenerateGrid;"]},"metadata":{},"sourceType":"module"}