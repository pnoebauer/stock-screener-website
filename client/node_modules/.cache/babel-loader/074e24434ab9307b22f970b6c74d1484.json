{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\nconst headerConst = ['Symbol', 'Interval', 'Price'];\nconst selectTbl = {\n  Symbol: SYMBOLS,\n  Interval: INTERVALS\n};\n\nconst fetchRealTimeData = async symbol => {\n  const params = {\n    apikey,\n    symbol\n  };\n  const queryExt = new URLSearchParams(params).toString();\n  const queryString = urlRealTime.concat('?', queryExt);\n  const response = await fetch(queryString);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  const data = await response.json();\n  return data;\n}; // Symbol: SP500.slice(0,8),\n// Interval: Array(8).fill(INTERVALS[0]),\n// Price: Array(8).fill(0)\n\n\nconst createSymbolRow = (SymbolNames, Interval, Price) => {\n  const rowArray = SymbolNames.map((value, index) => {\n    return {\n      Symbol: value,\n      Interval: Interval[index],\n      Price: Price[index],\n      idx: index\n    };\n  }); // console.log(rowArray)\n\n  return rowArray;\n};\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    const Symbol = SP500.slice(0, 8);\n    const Interval = Array(8).fill(INTERVALS[0]);\n    const Price = Array(8).fill(0);\n    const symbolRow = createSymbolRow(Symbol, Interval, Price);\n    this.state = {\n      header: headerConst,\n      symbolRow\n    }; // console.log(this.state)\n  }\n\n  componentDidMount() {\n    // this.state.symbolRow.Symbol\n    const {\n      symbolRow\n    } = this.state;\n    const symbolNames = symbolRow.map(value => value.Symbol); // console.log(symbolNames);\n\n    fetchRealTimeData(symbolNames).then(data => {\n      // const prices = Symbol.map((symbolName, index) => {\n      // \treturn data[symbolName].lastPrice;\n      // })\n      // console.log(prices);\n      // this.setState({\n      // \tPrice: prices\n      // });\n      // return data[symbolName].lastPrice;\n      const newSymbolRows = symbolNames.map((Symbol, index) => {\n        const newSymbolRowObj = { ...symbolRow[index],\n          Symbol,\n          Price: data[Symbol].lastPrice\n        }; // console.log(newSymbolRowObj,'newSymbolRowObj')\n\n        return newSymbolRowObj;\n      });\n      console.log(newSymbolRows, 'newSymbolRows');\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }, this);\n  } // onChange = (updatedValue, headerCol, valueRow) => {\n  // \tconst stateKey = this.state.header[headerCol];\n  // \tconst values = [...this.state[stateKey]];\n  // \tconst prices = [...this.state.Price];\n  // \tvalues[valueRow] = updatedValue;\n  // \t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n  // \tlet symbol = updatedValue, interval = updatedValue;\n  // \tif (stateKey==='Symbol') {\n  // \t\tinterval = this.state.Interval[valueRow];\n  // \t}\n  // \telse if (stateKey==='Interval'){\n  // \t\tsymbol = this.state.Symbol[valueRow];\n  // \t}\n  // \t// console.log('symbol', symbol, 'interval', interval);\n  // \tfetchRealTimeData(symbol)\n  // \t\t.then(data => {\n  // \t\t\tconst lastPrice = data[symbol].lastPrice;\n  // \t\t\t// console.log(lastPrice);\n  // \t\t\tprices[valueRow] = lastPrice;\n  // \t\t\t// console.log(prices);\n  // \t\t\tthis.setState({\n  // \t\t\t\tPrice: prices\n  // \t\t\t});\n  // \t\t})\n  // \t\t.catch(e => {\n  // \t\t\tconsole.log('An error occurred during fetching: ' + e.message);\n  // \t  \t});\n  // \tthis.setState({\n  // \t\t[stateKey]: values\n  // \t});\n  // }\n  // render() {\n  // \tconst { header } = this.state;\n  // \tconsole.log(this.state)\n  // \treturn(\n  // \t\t<div className=\"radarscreen\">\n  // \t\t\t<div className='space'></div>\n  // \t\t\t<div id=\"grid-container\">\n  // \t\t\t\t{\n  // \t\t\t\t\theader.map((value, colIdx) => (\n  // \t\t\t\t\t\t\t<ScreenHeader \n  // \t\t\t\t\t\t\t\tkey={colIdx.toString()} \n  // \t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n  // \t\t\t\t\t\t\t>\n  // \t\t\t\t\t\t\t\t{value}\n  // \t\t\t\t\t\t\t</ScreenHeader>\n  // \t\t\t\t\t\t)\n  // \t\t\t\t\t)\n  // \t\t\t\t}\n  // \t\t\t\t{\n  // \t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n  // \t\t\t\t\theader.map((value, colIdx) => this.state[value].map((rowVal,rowIdx) => {\n  // \t\t\t\t\t\t\tif(selectTbl[header[colIdx]] !== undefined) {\n  // \t\t\t\t\t\t\t\treturn (\n  // \t\t\t\t\t\t\t\t\t<Dropdown \n  // \t\t\t\t\t\t\t\t\t\toptions={selectTbl[header[colIdx]]}\n  // \t\t\t\t\t\t\t\t\t\tdefaultValue={this.state[header[colIdx]][rowIdx]}\n  // \t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n  // \t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n  // \t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n  // \t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n  // \t\t\t\t\t\t\t\t\t/> \n  // \t\t\t\t\t\t\t\t)\n  // \t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\telse {\n  // \t\t\t\t\t\t\t\treturn (\n  // \t\t\t\t\t\t\t\t\t<ValueCell \n  // \t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n  // \t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n  // \t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n  // \t\t\t\t\t\t\t\t\t>\n  // \t\t\t\t\t\t\t\t\t\t{rowVal}\n  // \t\t\t\t\t\t\t\t\t</ValueCell>\n  // \t\t\t\t\t\t\t\t)\n  // \t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t})\n  // \t\t\t\t\t) \n  // \t\t\t\t}\n  // \t\t\t</div>\n  // \t</div>\n  // \t)\n  // }\n\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","Dropdown","ValueCell","SYMBOLS","INTERVALS","SP500","urlRealTime","apikey","headerConst","selectTbl","Symbol","Interval","fetchRealTimeData","symbol","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","data","json","createSymbolRow","SymbolNames","Price","rowArray","map","value","index","idx","RadarScreen","Component","constructor","props","slice","Array","fill","symbolRow","state","header","componentDidMount","symbolNames","then","newSymbolRows","newSymbolRowObj","lastPrice","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\n\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\n\nconst headerConst = ['Symbol', 'Interval', 'Price']\n\nconst selectTbl = {\n\tSymbol: SYMBOLS,\n\tInterval: INTERVALS\n}\n\nconst fetchRealTimeData = async (symbol) => {\n\tconst params = {apikey, symbol};\n\t\n\tconst queryExt = new URLSearchParams(params).toString();\n\tconst queryString = urlRealTime.concat('?', queryExt);\n\n\tconst response = await fetch(queryString);\n\n\tif (!response.ok) {\n\t\tconst message = `An error has occured: ${response.status}`;\n\t\tthrow new Error(message);\n\t}\n\n\tconst data = await response.json();\n\n\treturn data;\n}\n\n// Symbol: SP500.slice(0,8),\n// Interval: Array(8).fill(INTERVALS[0]),\n// Price: Array(8).fill(0)\n\nconst createSymbolRow = (SymbolNames, Interval, Price) => {\n\t\n\tconst rowArray = SymbolNames.map((value, index) => {\n\t\treturn {\n\t\t\tSymbol: value,\n\t\t\tInterval: Interval[index],\n\t\t\tPrice: Price[index],\n\t\t\tidx: index\n\t\t}\n\t});\n\n\t// console.log(rowArray)\n\n\treturn rowArray;\n}\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconst Symbol = SP500.slice(0,8);\n\t\tconst Interval = Array(8).fill(INTERVALS[0]);\n\t\tconst Price = Array(8).fill(0);\n\t\tconst symbolRow = createSymbolRow(Symbol, Interval, Price);\n\n\t\tthis.state = {\n\t\t\theader: headerConst,\n\t\t\tsymbolRow\n\t\t}\n\n\t\t// console.log(this.state)\n\t}\n\n\tcomponentDidMount() {\n\t\t// this.state.symbolRow.Symbol\n\t\tconst { symbolRow } = this.state;\n\t\tconst symbolNames = symbolRow.map(value => value.Symbol);\n\t\t// console.log(symbolNames);\n\n\t\tfetchRealTimeData(symbolNames)\n\t\t\t.then(data => {\n\t\t\t\t// const prices = Symbol.map((symbolName, index) => {\n\t\t\t\t// \treturn data[symbolName].lastPrice;\n\t\t\t\t// })\n\t\t\t\t// console.log(prices);\n\t\t\t\t// this.setState({\n\t\t\t\t// \tPrice: prices\n\t\t\t\t// });\n\t\t\t\t// return data[symbolName].lastPrice;\n\n\t\t\t\tconst newSymbolRows = symbolNames.map((Symbol, index) => {\n\t\t\t\t\tconst newSymbolRowObj = {\n\t\t\t\t\t\t...symbolRow[index],\n\t\t\t\t\t\tSymbol,\n\t\t\t\t\t\tPrice: data[Symbol].lastPrice\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(newSymbolRowObj,'newSymbolRowObj')\n\t\t\t\t\treturn newSymbolRowObj\n\t\t\t\t})\n\t\t\t\tconsole.log(newSymbolRows,'newSymbolRows')\n\t\t\t})\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"\"></div>\n\t\t)\n\t}\n\t// onChange = (updatedValue, headerCol, valueRow) => {\n\n\t// \tconst stateKey = this.state.header[headerCol];\n\t// \tconst values = [...this.state[stateKey]];\n\t// \tconst prices = [...this.state.Price];\n\n\t// \tvalues[valueRow] = updatedValue;\n\n\t// \t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\t\t\n\t// \tlet symbol = updatedValue, interval = updatedValue;\n\t// \tif (stateKey==='Symbol') {\n\t// \t\tinterval = this.state.Interval[valueRow];\n\t// \t}\n\t// \telse if (stateKey==='Interval'){\n\t// \t\tsymbol = this.state.Symbol[valueRow];\n\t// \t}\n\n\t// \t// console.log('symbol', symbol, 'interval', interval);\n\n\t// \tfetchRealTimeData(symbol)\n\t// \t\t.then(data => {\n\t// \t\t\tconst lastPrice = data[symbol].lastPrice;\n\t// \t\t\t// console.log(lastPrice);\n\n\t// \t\t\tprices[valueRow] = lastPrice;\n\n\t// \t\t\t// console.log(prices);\n\n\t// \t\t\tthis.setState({\n\t// \t\t\t\tPrice: prices\n\t// \t\t\t});\n\n\t// \t\t})\n\t// \t\t.catch(e => {\n\t// \t\t\tconsole.log('An error occurred during fetching: ' + e.message);\n\t// \t  \t});\n\n\n\t// \tthis.setState({\n\t// \t\t[stateKey]: values\n\t// \t});\n\t// }\n\n\t// render() {\n\n\t// \tconst { header } = this.state;\n\n\t// \tconsole.log(this.state)\n\n\t// \treturn(\n\t// \t\t<div className=\"radarscreen\">\n\t// \t\t\t<div className='space'></div>\n\t\t\t\t\n\t// \t\t\t<div id=\"grid-container\">\n\t// \t\t\t\t{\n\t// \t\t\t\t\theader.map((value, colIdx) => (\n\t// \t\t\t\t\t\t\t<ScreenHeader \n\t// \t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t// \t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t// \t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t{value}\n\t// \t\t\t\t\t\t\t</ScreenHeader>\n\t// \t\t\t\t\t\t)\n\t// \t\t\t\t\t)\n\t// \t\t\t\t}\n\t\t\t\t\t\n\t// \t\t\t\t{\n\t// \t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t// \t\t\t\t\theader.map((value, colIdx) => this.state[value].map((rowVal,rowIdx) => {\n\t// \t\t\t\t\t\t\tif(selectTbl[header[colIdx]] !== undefined) {\n\t// \t\t\t\t\t\t\t\treturn (\n\t// \t\t\t\t\t\t\t\t\t<Dropdown \n\t// \t\t\t\t\t\t\t\t\t\toptions={selectTbl[header[colIdx]]}\n\t// \t\t\t\t\t\t\t\t\t\tdefaultValue={this.state[header[colIdx]][rowIdx]}\n\t// \t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t// \t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t// \t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t// \t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n\t// \t\t\t\t\t\t\t\t\t/> \n\t// \t\t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\telse {\n\t// \t\t\t\t\t\t\t\treturn (\n\t// \t\t\t\t\t\t\t\t\t<ValueCell \n\t// \t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t// \t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t// \t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t// \t\t\t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t\t\t{rowVal}\n\t// \t\t\t\t\t\t\t\t\t</ValueCell>\n\t// \t\t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t})\n\t// \t\t\t\t\t) \n\t// \t\t\t\t}\n\t\t\t\t\t\n\t// \t\t\t</div>\n\t// \t</div>\n\t// \t)\n\t// }\n}\n\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}