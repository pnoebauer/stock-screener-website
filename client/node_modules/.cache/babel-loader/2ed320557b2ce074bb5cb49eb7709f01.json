{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx\";\nimport React from 'react';\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GenerateGrid = ({\n  onChange,\n  header,\n  ...props\n}) => {\n  // const { Symbol } = props[Symbol];\n  console.log('map', header, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: //loop through the header items (columns) and afterwards loop through stored values (rows)  \n    header.map((type, colIdx) => props[type].map((rowVal, rowIdx) => /*#__PURE__*/_jsxDEV(GenerateGridCell, {\n      type: type,\n      gridLocation: {\n        rowIdx,\n        colIdx\n      },\n      onChange: onChange,\n      id: `${Symbol[rowIdx]}-${type}-${rowIdx}`,\n      children: rowVal\n    }, `${Symbol[rowIdx]}-${type}-${rowIdx}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 25\n    }, this)))\n  }, void 0, false);\n};\n\n_c = GenerateGrid;\nexport default GenerateGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateGrid\");","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx"],"names":["React","GenerateGridCell","GenerateGrid","onChange","header","props","console","log","map","type","colIdx","rowVal","rowIdx","Symbol"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,oDAA7B;;;;AAEA,MAAMC,YAAY,GAAG,CAAE;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoB,KAAGC;AAAvB,CAAF,KAAqC;AAEtD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBH,MAAlB,EAA0BC,KAA1B;AACA,sBACI;AAAA,cAGI;AACAD,IAAAA,MAAM,CAACI,GAAP,CAAW,CAACC,IAAD,EAAOC,MAAP,KAAkBL,KAAK,CAACI,IAAD,CAAL,CAAYD,GAAZ,CAAgB,CAACG,MAAD,EAAQC,MAAR,kBACjC,QAAC,gBAAD;AACI,MAAA,IAAI,EAAEH,IADV;AAEI,MAAA,YAAY,EAAE;AAACG,QAAAA,MAAD;AAASF,QAAAA;AAAT,OAFlB;AAGI,MAAA,QAAQ,EAAEP,QAHd;AAKI,MAAA,EAAE,EAAG,GAAEU,MAAM,CAACD,MAAD,CAAS,IAAGH,IAAK,IAAGG,MAAO,EAL5C;AAAA,gBAOKD;AAPL,OAIU,GAAEE,MAAM,CAACD,MAAD,CAAS,IAAGH,IAAK,IAAGG,MAAO,EAJ7C;AAAA;AAAA;AAAA;AAAA,YADiB,CAA7B;AAJJ,mBADJ;AAqBH,CAzBD;;KAAMV,Y;AA2BN,eAAeA,YAAf","sourcesContent":["import React from 'react';\n\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n\nconst GenerateGrid = ( { onChange, header, ...props} ) => {\n    \n    // const { Symbol } = props[Symbol];\n    console.log('map',header, props)\n    return (\n        <>\n        {   \n            \n            //loop through the header items (columns) and afterwards loop through stored values (rows)  \n            header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => (\n                        <GenerateGridCell\n                            type={type}\n                            gridLocation={{rowIdx, colIdx}}\n                            onChange={onChange}\n                            key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n                            id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n                        >\n                            {rowVal}\n                        </GenerateGridCell>\n                    )\n                )\n            ) \n        }\n        </>\n    )\n}\n\nexport default GenerateGrid;"]},"metadata":{},"sourceType":"module"}