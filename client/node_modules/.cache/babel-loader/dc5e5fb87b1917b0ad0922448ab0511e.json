{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\nconst headerConst = ['Symbol', 'Interval', 'Price'];\nconst selectTbl = {\n  Symbol: SYMBOLS,\n  Interval: INTERVALS\n};\n\nconst fetchRealTimeData = async symbol => {\n  const params = {\n    apikey,\n    symbol\n  };\n  const queryExt = new URLSearchParams(params).toString();\n  const queryString = urlRealTime.concat('?', queryExt);\n  const response = await fetch(queryString);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  const data = await response.json();\n  return data;\n};\n\nconst sortTable = (state, sortedField) => {\n  const stateClone = JSON.parse(JSON.stringify(state));\n  delete stateClone.header; // console.log(stateClone,'stateClone orig');\n\n  const list = [...stateClone[sortedField]]; // console.log(list);\n  // temporary array holds objects with position and sort-value\n\n  const mapped = list.map((value, index) => {\n    if (typeof value === 'string') value = value.toLowerCase();\n    return {\n      index,\n      value\n    };\n  }); // console.log(mapped);\n  // sorting the mapped array containing the reduced values\n\n  mapped.sort((a, b) => {\n    if (a.value > b.value) {\n      return 1;\n    }\n\n    if (a.value < b.value) {\n      return -1;\n    }\n\n    return 0;\n  }); // console.log(mapped);\n  // return mapped;\n  // console.log(stateClone,'stateClone start')\n\n  const keys = Object.keys(stateClone);\n  keys.forEach(key => {\n    // console.log(stateClone[key],'k')\n    stateClone[key] = mapped.map(element => stateClone[key][element.index]); // console.log(stateClone[key],'mapped')\n    // console.log(stateClone,'stateClone')\n  }); // console.log(stateClone,'stateClone fin')\n\n  return stateClone; // mapped;\n  // container for the resulting order\n  // const result = mapped.map(element => list[element.index]);\n  // const result = mapped.map(element => {\n  // \t// list[element.index]\n  // \tconst Price = stateClone.Price[element.index];\n  // \tconst Interval = stateClone.Interval[element.index]\n  // \tconst Symbol = stateClone.Symbol[element.index]\n  // \tconst keys = Object.keys(stateClone)\n  // \treturn {\n  // \t\t...stateClone,\n  // \t\tPrice,\n  // \t\tInterval,\n  // \t\tSymbol\n  // \t}\n  // });\n  // console.log(result)\n};\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const stateKey = this.state.header[headerCol];\n      const values = [...this.state[stateKey]];\n      const prices = [...this.state.Price];\n      values[valueRow] = updatedValue; // console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\n      let symbol = updatedValue,\n          interval = updatedValue;\n\n      if (stateKey === 'Symbol') {\n        interval = this.state.Interval[valueRow];\n      } else if (stateKey === 'Interval') {\n        symbol = this.state.Symbol[valueRow];\n      } // console.log('symbol', symbol, 'interval', interval);\n\n\n      fetchRealTimeData(symbol).then(data => {\n        const lastPrice = data[symbol].lastPrice; // console.log(lastPrice);\n\n        prices[valueRow] = lastPrice; // console.log(prices);\n\n        this.setState({\n          Price: prices\n        });\n      }).catch(e => {\n        console.log('An error occurred during fetching: ' + e.message);\n      });\n      this.setState({\n        [stateKey]: values\n      });\n    };\n\n    this.onSort = event => {\n      const sortedField = 'Price'; // const list = [...this.state[sortedField]]\n\n      const sortedData = sortTable(this.state, sortedField);\n      console.log(sortedData);\n      this.setState(sortedData, () => console.log(this.state));\n    };\n\n    this.state = {\n      header: headerConst,\n      Symbol: SP500.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      Price: Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      Symbol\n    } = this.state;\n    fetchRealTimeData(Symbol).then(data => {\n      const prices = Symbol.map((symbolName, index) => {\n        return data[symbolName].lastPrice;\n      }); // console.log(prices);\n\n      this.setState({\n        Price: prices\n      } // () => console.log(this.state)\n      );\n    });\n  }\n\n  render() {\n    const {\n      header\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space\",\n        onClick: this.onSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        children: [header.map((value, colIdx) => /*#__PURE__*/_jsxDEV(ScreenHeader, {\n          gridColumn: colIdx + 1,\n          children: value\n        }, colIdx.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }, this)), //loop through the header items (columns) and afterwards loop through stored values (rows)  \n        header.map((value, colIdx) => this.state[value].map((rowVal, rowIdx) => {\n          if (selectTbl[header[colIdx]] !== undefined) {\n            return /*#__PURE__*/_jsxDEV(Dropdown, {\n              options: selectTbl[header[colIdx]],\n              defaultValue: this.state[header[colIdx]][rowIdx],\n              gridRow: rowIdx + 2,\n              gridColumn: colIdx + 1,\n              onChange: this.onChange\n            }, colIdx.toString() + rowIdx.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 11\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(ValueCell, {\n              gridRow: rowIdx + 2,\n              gridColumn: colIdx + 1,\n              children: rowVal\n            }, colIdx.toString() + rowIdx.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 11\n            }, this);\n          }\n        }))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","Dropdown","ValueCell","SYMBOLS","INTERVALS","SP500","urlRealTime","apikey","headerConst","selectTbl","Symbol","Interval","fetchRealTimeData","symbol","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","data","json","sortTable","state","sortedField","stateClone","JSON","parse","stringify","header","list","mapped","map","value","index","toLowerCase","sort","a","b","keys","Object","forEach","key","element","RadarScreen","Component","constructor","props","onChange","updatedValue","headerCol","valueRow","stateKey","values","prices","Price","interval","then","lastPrice","setState","catch","e","console","log","onSort","event","sortedData","slice","Array","fill","componentDidMount","symbolName","render","colIdx","rowVal","rowIdx","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\n\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\n\nconst headerConst = ['Symbol', 'Interval', 'Price']\n\nconst selectTbl = {\n\tSymbol: SYMBOLS,\n\tInterval: INTERVALS\n}\n\nconst fetchRealTimeData = async (symbol) => {\n\tconst params = {apikey, symbol};\n\t\n\tconst queryExt = new URLSearchParams(params).toString();\n\tconst queryString = urlRealTime.concat('?', queryExt);\n\n\tconst response = await fetch(queryString);\n\n\tif (!response.ok) {\n\t\tconst message = `An error has occured: ${response.status}`;\n\t\tthrow new Error(message);\n\t}\n\n\tconst data = await response.json();\n\n\treturn data;\n}\n\n\n\nconst sortTable = (state, sortedField) => {\n\t\n\tconst stateClone = JSON.parse(JSON.stringify(state));\n\tdelete stateClone.header;\n\t\n\t// console.log(stateClone,'stateClone orig');\n\tconst list = [...stateClone[sortedField]];\n\t\n\t// console.log(list);\n\n\t// temporary array holds objects with position and sort-value\n\tconst mapped = list.map((value, index) => {\n\t\tif(typeof(value) ==='string') value = value.toLowerCase();\n\t\t  \n\t\treturn { \n\t\t\t  index, \n\t\t\t  value \n\t\t\t};\n\t\t}\n\t);\n\n\t// console.log(mapped);\n\n\t// sorting the mapped array containing the reduced values\n\tmapped.sort((a, b) => {\n\t\tif (a.value > b.value) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (a.value < b.value) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\t// console.log(mapped);\n\n\t// return mapped;\n\n\t// console.log(stateClone,'stateClone start')\n\n\tconst keys = Object.keys(stateClone);\n\n\tkeys.forEach(key => {\n\t\t// console.log(stateClone[key],'k')\n\n\t\tstateClone[key] = mapped.map(element => stateClone[key][element.index]);\n\t\t// console.log(stateClone[key],'mapped')\n\n\t\t// console.log(stateClone,'stateClone')\n\t})\n\n\t// console.log(stateClone,'stateClone fin')\n\n\treturn stateClone;// mapped;\n\n\n\t// container for the resulting order\n\t// const result = mapped.map(element => list[element.index]);\n\n\t// const result = mapped.map(element => {\n\t// \t// list[element.index]\n\t// \tconst Price = stateClone.Price[element.index];\n\t// \tconst Interval = stateClone.Interval[element.index]\n\t// \tconst Symbol = stateClone.Symbol[element.index]\n\n\t// \tconst keys = Object.keys(stateClone)\n\t\t\n\n\t// \treturn {\n\t// \t\t...stateClone,\n\t// \t\tPrice,\n\t// \t\tInterval,\n\t// \t\tSymbol\n\t// \t}\n\t// });\n\n\t// console.log(result)\n}\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\theader: headerConst,\n\t\t\tSymbol: SP500.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\tPrice: Array(8).fill(0)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol } = this.state;\n\n\t\tfetchRealTimeData(Symbol)\n\t\t\t.then(data => {\n\t\t\t\tconst prices = Symbol.map((symbolName, index) => {\n\t\t\t\t\treturn data[symbolName].lastPrice;\n\t\t\t\t})\n\t\t\t\t// console.log(prices);\n\t\t\t\tthis.setState({\n\t\t\t\t\tPrice: prices\n\t\t\t\t}\n\t\t\t\t,\n\t\t\t\t// () => console.log(this.state)\n\t\t\t\t);\n\t\t\t})\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst stateKey = this.state.header[headerCol];\n\t\tconst values = [...this.state[stateKey]];\n\t\tconst prices = [...this.state.Price];\n\n\t\tvalues[valueRow] = updatedValue;\n\n\t\t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\t\t\n\t\tlet symbol = updatedValue, interval = updatedValue;\n\t\tif (stateKey==='Symbol') {\n\t\t\tinterval = this.state.Interval[valueRow];\n\t\t}\n\t\telse if (stateKey==='Interval'){\n\t\t\tsymbol = this.state.Symbol[valueRow];\n\t\t}\n\n\t\t// console.log('symbol', symbol, 'interval', interval);\n\n\t\tfetchRealTimeData(symbol)\n\t\t\t.then(data => {\n\t\t\t\tconst lastPrice = data[symbol].lastPrice;\n\t\t\t\t// console.log(lastPrice);\n\n\t\t\t\tprices[valueRow] = lastPrice;\n\n\t\t\t\t// console.log(prices);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tPrice: prices\n\t\t\t\t});\n\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconsole.log('An error occurred during fetching: ' + e.message);\n\t\t  \t});\n\n\n\t\tthis.setState({\n\t\t\t[stateKey]: values\n\t\t});\n\t}\n\n\tonSort = (event) => {\n\t\t\n\n\t\tconst sortedField = 'Price';\n\t\t// const list = [...this.state[sortedField]]\n\n\t\tconst sortedData = sortTable(this.state, sortedField);\n\t\tconsole.log(sortedData);\n\n\t\tthis.setState(sortedData,\n\t\t\t() => console.log(this.state)\n\t\t\t\n\t\t\t)\n\t}\n\n\trender() {\n\n\t\tconst { header } = this.state;\n\n\t\treturn(\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div className='space'\n\t\t\t\t\tonClick={this.onSort}\n\t\t\t\t></div>\n\t\t\t\t\n\t\t\t\t<div id=\"grid-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\theader.map((value, colIdx) => (\n\t\t\t\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t</ScreenHeader>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t\t\t\t\t\theader.map((value, colIdx) => this.state[value].map((rowVal,rowIdx) => {\n\t\t\t\t\t\t\t\tif(selectTbl[header[colIdx]] !== undefined) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Dropdown \n\t\t\t\t\t\t\t\t\t\t\toptions={selectTbl[header[colIdx]]}\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={this.state[header[colIdx]][rowIdx]}\n\t\t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t\t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\t\t\t\t/> \n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<ValueCell \n\t\t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t\t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{rowVal}\n\t\t\t\t\t\t\t\t\t\t</ValueCell>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}