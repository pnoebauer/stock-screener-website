{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown/dropdown.component.jsx\";\nimport React from 'react';\nimport './dropdown.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      defaultValue\n    } = props;\n    super(props);\n\n    this.handleClickOutside = event => {\n      // console.log('handleClickOutside')\n      // const { options, onChange } = this.props;\n      const {\n        options,\n        onChange,\n        gridColumn,\n        gridRow\n      } = this.props;\n      const headerCol = gridColumn - 1;\n      const valueRow = gridRow - 2;\n\n      if (this.container.current && !this.container.current.contains(event.target)) {\n        // console.log(options.includes(shownValue),'click')\n        let insertValue;\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : prevState.selectedValue; // console.log(prevState.selectedValue,'prevState.selectedValue')\n          // const activeValue = prevState.displayedOptions[prevState.activeItem];\n          // console.log(activeValue,'activeValue')\n          // const insertValue = activeValue === undefined ? prevState.selectedValue : activeValue;\n          // use below to leave the typed in value even if value does not exist in options list\n          // const insertValue = prevState.shownValue;\n          // console.log(insertValue,'insertValue',options.includes(prevState.shownValue))\n\n          return {\n            showList: false,\n            shownValue: insertValue\n          };\n        }, () => {\n          // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n          if (this.selectionDisplay.current.innerText !== insertValue) {\n            this.selectionDisplay.current.innerText = insertValue; //happens if typed in text does not match anything\n            // console.log('does not match')\n          }\n\n          ;\n          document.removeEventListener('mousedown', this.handleClickOutside); // console.log(insertValue)\n\n          return onChange(insertValue, headerCol, valueRow);\n        });\n      }\n    };\n\n    this.handleDisplay = (clickEvent, headerCol, valueRow) => {\n      const {\n        options\n      } = this.props;\n      const {\n        shownValue\n      } = this.state; // console.log('handleDisplay',options,shownValue)\n      // comment if statement to allow closing the list even if value does not exist in options list\n\n      if (options.includes(shownValue)) {\n        this.setState(prevState => {\n          // console.log(prevState,'prevState')\n          // console.log(this.container.current,'this.container.current')\n          // console.log(this.state.displayedOptions, 'this.state.displayedOptions')\n          if (!prevState.showList) {\n            // console.log('add listener')\n            document.addEventListener('mousedown', this.handleClickOutside);\n          } else if (prevState.showList) {\n            // console.log('remove listener')\n            document.removeEventListener('mousedown', this.handleClickOutside);\n          }\n\n          return {\n            showList: !prevState.showList\n          };\n        });\n      }\n    };\n\n    this.handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log('handleOptionClick')\n      // console.log(this.selectionDisplay.current.innerText,'this.selectionDisplay')\n      // console.log(event.target.innerText, this.state.shownValue)\n      const {\n        onChange\n      } = this.props; // this.setState({\n      //   showList: false,\n      //   shownValue: event.target.innerText\n      // }\n      //   , \n      //   () => {\n      //     console.log(this.state)\n      //     // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n      //       if(this.selectionDisplay.current.innerText !== event.target.innerText) {\n      //         // console.log('set inner handleOption')\n      //         // this.selectionDisplay.current.innerText = event.target.innerText;\n      //       }\n      //       document.removeEventListener('mousedown', this.handleClickOutside);\n      //       return onChange(event.target.innerText, headerCol, valueRow);\n      //   }      \n      // );\n\n      this.setState({\n        showList: false,\n        shownValue: event.target.innerText\n      });\n      document.removeEventListener('mousedown', this.handleClickOutside);\n      onChange(event.target.innerText, headerCol, valueRow);\n    };\n\n    this.onTextChange = event => {\n      // console.log('onTextChange',event.keyCode)\n      // console.log(event.currentTarget.textContent,'text change')\n      const {\n        options\n      } = this.props;\n      const currentInput = event.currentTarget.textContent; // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0; //filter all with the same start\n      }); // console.log(newFilteredOptions);\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      } // ,\n      // ()=>console.log(this.state)\n      );\n    };\n\n    this.onKeyDown = (event, headerCol, valueRow) => {\n      const {\n        onChange\n      } = this.props;\n      const {\n        activeItem,\n        displayedOptions\n      } = this.state; // console.log(event.keyCode);//,activeItem,filteredSuggestions.length);\n      //40 down, 38 up, 13 enter\n\n      switch (event.keyCode) {\n        // down\n        case 40:\n          if (activeItem < displayedOptions.length - 1) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              };\n            } // , () => console.log('down',this.state.activeItem, displayedOptions[this.state.activeItem])\n            );\n          }\n\n          break;\n        // up\n\n        case 38:\n          if (activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              };\n            } // , () => console.log('up',this.state.activeItem)\n            );\n          }\n\n          break;\n        // enter\n\n        case 13:\n          event.preventDefault();\n          this.setState(prevState => {\n            // console.log('enter active',displayedOptions[prevState.activeItem],prevState.activeItem)\n            return {\n              activeItem: 0,\n              selectedValue: displayedOptions[prevState.activeItem],\n              showList: false,\n              shownValue: displayedOptions[prevState.activeItem],\n              displayedOptions: this.props.options\n            };\n          }, () => {\n            console.log('enter', this.state.activeItem);\n\n            if (this.selectionDisplay.current.innerText !== this.state.selectedValue) {\n              this.selectionDisplay.current.innerText = this.state.selectedValue;\n            }\n\n            document.removeEventListener('mousedown', this.handleClickOutside);\n            return onChange(this.state.selectedValue, headerCol, valueRow);\n          });\n          break;\n\n        default:\n      }\n    };\n\n    this.container = /*#__PURE__*/React.createRef();\n    this.selectionDisplay = /*#__PURE__*/React.createRef();\n    this.state = {\n      selectedValue: defaultValue,\n      showList: false,\n      displayedOptions: this.props.options,\n      shownValue: defaultValue,\n      activeItem: 0\n    };\n  } //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      gridRow,\n      gridColumn,\n      defaultValue\n    } = this.props; // console.log('dd',this.state, this.props.defaultValue);\n\n    const {\n      selectedValue,\n      showList,\n      displayedOptions,\n      shownValue,\n      activeItem\n    } = this.state; // console.log(displayedOptions.length)\n\n    let number = displayedOptions.length;\n    number = number > 5 ? 5 : number < 1 ? 1 : number;\n    const dropDownHeight = `${number * 100}%`;\n    const liHeight = `calc(${1 / number * 100}% - 1px)`; // console.log(showList,'showList')\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'dropdown-container',\n      style: {\n        gridRow,\n        gridColumn\n      },\n      ref: this.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: showList ? 'selected-value active' : 'selected-value',\n        onClick: clickEvent => this.handleDisplay(clickEvent, gridColumn - 1, gridRow - 2),\n        onKeyDown: e => this.onKeyDown(e, gridColumn - 1, gridRow - 2),\n        contentEditable: \"true\",\n        suppressContentEditableWarning: true,\n        onInput: this.onTextChange,\n        ref: this.selectionDisplay,\n        children: defaultValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"options-list\",\n        style: {\n          height: dropDownHeight\n        },\n        children: displayedOptions.map((value, index) => {\n          // exclude the selectedValue from dropdown list options \n          // except if the shownValue is different to the selectedValue (happens if user types into search field)\n          // if(value !== selectedValue || shownValue !== selectedValue) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              height: liHeight\n            },\n            className: `dropdown-option ${index === activeItem ? 'active' : ''}`,\n            value: value,\n            onClick: e => this.handleOptionClick(e, gridColumn - 1, gridRow - 2),\n            children: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 21\n          }, this); // }\n          //   else return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","defaultValue","handleClickOutside","event","options","onChange","gridColumn","gridRow","headerCol","valueRow","container","current","contains","target","insertValue","setState","prevState","includes","shownValue","selectedValue","showList","selectionDisplay","innerText","document","removeEventListener","handleDisplay","clickEvent","state","addEventListener","handleOptionClick","onTextChange","currentInput","currentTarget","textContent","newFilteredOptions","filter","item","toLowerCase","indexOf","displayedOptions","activeItem","onKeyDown","keyCode","length","preventDefault","console","log","createRef","render","number","dropDownHeight","liHeight","e","height","map","value","index"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport './dropdown.styles.css';\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n      const {defaultValue} = props;\n      super(props);\n      this.container = React.createRef();\n      this.selectionDisplay = React.createRef();\n\n      this.state = {\n          selectedValue: defaultValue,\n          showList: false,\n          displayedOptions: this.props.options,\n          shownValue: defaultValue,\n          activeItem: 0\n      };\n    }\n\n    //if click happens outside the dropdown area close the list\n    handleClickOutside = (event) => {\n      // console.log('handleClickOutside')\n      // const { options, onChange } = this.props;\n      const { options, onChange, gridColumn, gridRow} = this.props;\n\n      const headerCol = gridColumn-1;\n      const valueRow = gridRow-2;\n\n      if(this.container.current && !this.container.current.contains(event.target)) {\n        \n        // console.log(options.includes(shownValue),'click')\n\n        let insertValue;\n\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : prevState.selectedValue;\n          // console.log(prevState.selectedValue,'prevState.selectedValue')\n            // const activeValue = prevState.displayedOptions[prevState.activeItem];\n            // console.log(activeValue,'activeValue')\n            // const insertValue = activeValue === undefined ? prevState.selectedValue : activeValue;\n\n          \n          // use below to leave the typed in value even if value does not exist in options list\n          // const insertValue = prevState.shownValue;\n          \n          // console.log(insertValue,'insertValue',options.includes(prevState.shownValue))\n          return {\n            showList: false,\n            shownValue: insertValue\n          }\n        }\n          , \n          () => {\n            // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n              if(this.selectionDisplay.current.innerText !== insertValue) {\n                this.selectionDisplay.current.innerText = insertValue;\n                //happens if typed in text does not match anything\n                // console.log('does not match')\n              };\n              \n              document.removeEventListener('mousedown', this.handleClickOutside);\n              // console.log(insertValue)\n              return onChange(insertValue, headerCol, valueRow);\n          }\n        );\n      }\n\n    }\n\n    //handle the displaying of the list (if currently shown, then hide and vice versa)\n    handleDisplay = (clickEvent, headerCol, valueRow) => {\n      \n      const { options } = this.props;\n      const { shownValue } = this.state;\n\n      // console.log('handleDisplay',options,shownValue)\n\n      // comment if statement to allow closing the list even if value does not exist in options list\n      if(options.includes(shownValue)) { \n        this.setState(prevState => {\n          // console.log(prevState,'prevState')\n          // console.log(this.container.current,'this.container.current')\n          // console.log(this.state.displayedOptions, 'this.state.displayedOptions')\n\n          if(!prevState.showList) {\n            // console.log('add listener')\n            document.addEventListener('mousedown', this.handleClickOutside);\n          }\n          else if(prevState.showList) {\n            // console.log('remove listener')\n            document.removeEventListener('mousedown', this.handleClickOutside);\n          }\n\n          return { showList: !prevState.showList }\n        });\n        \n      }\n\n    };\n\n    // set text based on click in displayed list\n    handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log('handleOptionClick')\n      // console.log(this.selectionDisplay.current.innerText,'this.selectionDisplay')\n      // console.log(event.target.innerText, this.state.shownValue)\n      const { onChange } = this.props;\n\n      // this.setState({\n      //   showList: false,\n      //   shownValue: event.target.innerText\n      // }\n      //   , \n      //   () => {\n\n      //     console.log(this.state)\n      //     // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n      //       if(this.selectionDisplay.current.innerText !== event.target.innerText) {\n      //         // console.log('set inner handleOption')\n      //         // this.selectionDisplay.current.innerText = event.target.innerText;\n      //       }\n\n      //       document.removeEventListener('mousedown', this.handleClickOutside);\n      //       return onChange(event.target.innerText, headerCol, valueRow);\n      //   }      \n      \n      // );\n\n      this.setState({\n        showList: false,\n        shownValue: event.target.innerText\n      });\n\n      document.removeEventListener('mousedown', this.handleClickOutside);\n      \n      onChange(event.target.innerText, headerCol, valueRow);\n\n    };\n\n    onTextChange = event => {\n      // console.log('onTextChange',event.keyCode)\n      // console.log(event.currentTarget.textContent,'text change')\n      const { options } = this.props;\n\n      const currentInput = event.currentTarget.textContent;\n      // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0 //filter all with the same start\n      });\n      \n\n      // console.log(newFilteredOptions);\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      }\n      // ,\n      // ()=>console.log(this.state)\n      )\n    }\n\n    onKeyDown = (event, headerCol, valueRow) => {\n      const { onChange } = this.props;\n      const { activeItem, displayedOptions } = this.state;\n      // console.log(event.keyCode);//,activeItem,filteredSuggestions.length);\n      //40 down, 38 up, 13 enter\n    \n      switch (event.keyCode) {\n        // down\n        case 40:\n          if(activeItem < (displayedOptions.length-1)) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              }\n            }\n            // , () => console.log('down',this.state.activeItem, displayedOptions[this.state.activeItem])\n            );\n              \n          } \n          break;\n        // up\n        case 38:\n          if(activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              }\n            }\n            // , () => console.log('up',this.state.activeItem)\n            );\n              \n          } \n          break;\n        // enter\n        case 13:\n          event.preventDefault();\n          this.setState(prevState => {\n            // console.log('enter active',displayedOptions[prevState.activeItem],prevState.activeItem)\n            return {\n              activeItem: 0,\n              selectedValue: displayedOptions[prevState.activeItem],\n              showList: false,\n              shownValue: displayedOptions[prevState.activeItem],\n              displayedOptions: this.props.options\n            }\n          }\n          , \n          () => {\n            console.log('enter',this.state.activeItem);\n            if(this.selectionDisplay.current.innerText !== this.state.selectedValue) {\n              this.selectionDisplay.current.innerText = this.state.selectedValue;\n            }\n\n            document.removeEventListener('mousedown', this.handleClickOutside);\n\n            return onChange(this.state.selectedValue, headerCol, valueRow);\n          }\n          );\n          break;\n    \n        default:\n      }\n    \n    }\n    \n\n  \n    render() {\n      \n      const { gridRow, gridColumn, defaultValue } = this.props;\n      \n      // console.log('dd',this.state, this.props.defaultValue);\n\n      const { selectedValue, showList, displayedOptions, shownValue, activeItem } = this.state;\n      \n      // console.log(displayedOptions.length)\n      \n      let number = displayedOptions.length;\n      number = number > 5 ? 5 : number < 1 ? 1 : number;\n      \n      const dropDownHeight = `${number*100}%`;\n      const liHeight = `calc(${1/number*100}% - 1px)`;\n\n      // console.log(showList,'showList')\n      return (\n        <div \n          className={'dropdown-container'}\n          style={{\n            gridRow,\n            gridColumn\n          }}\n          ref = {this.container}\n        >\n          <div \n            className={showList ? 'selected-value active' : 'selected-value'}\n            onClick={clickEvent => this.handleDisplay(clickEvent, gridColumn-1, gridRow-2)} \n            onKeyDown={e => this.onKeyDown(e, gridColumn-1, gridRow-2)}\n            contentEditable='true'\n            suppressContentEditableWarning={true}\n            onInput={this.onTextChange}\n            ref = {this.selectionDisplay}\n          >\n            {defaultValue}\n          </div>\n\n            {showList && (<ul className='options-list' style={{height: dropDownHeight}}>\n              {displayedOptions.map((value, index) => {\n                // exclude the selectedValue from dropdown list options \n                // except if the shownValue is different to the selectedValue (happens if user types into search field)\n                // if(value !== selectedValue || shownValue !== selectedValue) {\n                  return (\n                    <li \n                      style={{height: liHeight}}\n                      className={`dropdown-option ${index === activeItem ? 'active' : ''}`}\n                      value={value} \n                      key={index}\n                      onClick={e => this.handleOptionClick(e, gridColumn-1, gridRow-2)}\n                    >\n                      {value}\n                    </li>\n                  )\n                // }\n                //   else return null;\n\n              })}\n            </ul>)}\n        </div>\n      );\n    }\n  }\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}