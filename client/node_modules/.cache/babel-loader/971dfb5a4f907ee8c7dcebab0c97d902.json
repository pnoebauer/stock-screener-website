{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx\";\nimport React from 'react';\nimport './dropdown.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      defaultValue\n    } = props;\n    super(props);\n\n    this.handleClickOutside = (event, headerCol, valueRow) => {\n      const {\n        options,\n        onChange\n      } = this.props;\n\n      if (this.container.current && !this.container.current.contains(event.target)) {\n        // console.log(options.includes(shownValue),'click')\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          // const insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : prevState.selectedValue;\n          const activeValue = prevState.displayedOptions[prevState.activeItem];\n          console.log(activeValue, 'activeValue');\n          const insertValue = activeValue === undefined ? prevState.selectedValue : activeValue; // use below to leave the typed in value even if value does not exist in options list\n          // const insertValue = prevState.shownValue;\n          // console.log(insertValue,'insertValue',options.includes(prevState.shownValue))\n\n          return {\n            showList: false,\n            displayedOptions: options,\n            selectedValue: insertValue,\n            shownValue: insertValue\n          };\n        }, () => {\n          // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n          if (this.selectionDisplay.current.innerText !== this.state.selectedValue) {\n            this.selectionDisplay.current.innerText = this.state.selectedValue;\n          }\n\n          ;\n          onChange(this.state.selectedValue, headerCol, valueRow); // ()=>console.log('click out',this.state.selectedValue)\n        });\n      }\n    };\n\n    this.handleDisplay = (clickEvent, headerCol, valueRow) => {\n      const {\n        options\n      } = this.props;\n      const {\n        shownValue\n      } = this.state; // comment if statement to allow closing the list even if value does not exist in options list\n\n      if (options.includes(shownValue)) {\n        this.setState(prevState => {\n          // console.log(prevState,'prevState')\n          // console.log(this.container.current,'this.container.current')\n          // console.log(this.state.displayedOptions, 'this.state.displayedOptions')\n          if (!prevState.showList) {\n            // console.log('add listener')\n            document.addEventListener('mousedown', e => this.handleClickOutside(e, headerCol, valueRow));\n          } else if (prevState.showList) {\n            // console.log('remove listener')\n            document.removeEventListener('mousedown', e => this.handleClickOutside(e, headerCol, valueRow));\n          }\n\n          return {\n            showList: !prevState.showList\n          };\n        });\n      }\n    };\n\n    this.handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(this.selectionDisplay.current.innerText,'this.selectionDisplay')\n      // console.log(event.target.innerText, this.state.shownValue)\n      const {\n        onChange\n      } = this.props;\n      this.setState({\n        selectedValue: event.target.innerText,\n        showList: false,\n        shownValue: event.target.innerText,\n        displayedOptions: this.props.options\n      }, () => {\n        // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n        if (this.selectionDisplay.current.innerText !== event.target.innerText) {\n          this.selectionDisplay.current.innerText = event.target.innerText;\n        }\n\n        onChange(this.state.selectedValue, headerCol, valueRow);\n      });\n    };\n\n    this.onTextChange = event => {\n      // console.log('onTextChange',event.keyCode)\n      // console.log(event.currentTarget.textContent,'text change')\n      const {\n        options\n      } = this.props;\n      const currentInput = event.currentTarget.textContent; // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0; //filter all with the same start\n      }); // console.log(newFilteredOptions);\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      } // ,\n      // ()=>console.log(this.state)\n      );\n    };\n\n    this.onKeyDown = (event, headerCol, valueRow) => {\n      const {\n        onChange\n      } = this.props;\n      const {\n        activeItem,\n        displayedOptions\n      } = this.state; // console.log(event.keyCode);//,activeItem,filteredSuggestions.length);\n      //40 down, 38 up, 13 enter\n\n      switch (event.keyCode) {\n        // down\n        case 40:\n          if (activeItem < displayedOptions.length - 1) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              };\n            } // , () => console.log('down',this.state.activeItem, displayedOptions[this.state.activeItem])\n            );\n          }\n\n          break;\n        // up\n\n        case 38:\n          if (activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              };\n            } // , () => console.log('up',this.state.activeItem)\n            );\n          }\n\n          break;\n        // enter\n\n        case 13:\n          event.preventDefault();\n          this.setState(prevState => {\n            // console.log('enter active',displayedOptions[prevState.activeItem],prevState.activeItem)\n            return {\n              activeItem: 0,\n              selectedValue: displayedOptions[prevState.activeItem],\n              showList: false,\n              shownValue: displayedOptions[prevState.activeItem],\n              displayedOptions: this.props.options\n            };\n          }, () => {\n            // console.log('enter',this.state.activeItem);\n            if (this.selectionDisplay.current.innerText !== this.state.selectedValue) {\n              this.selectionDisplay.current.innerText = this.state.selectedValue;\n            }\n\n            onChange(this.state.selectedValue, headerCol, valueRow);\n          });\n          break;\n\n        default:\n      }\n    };\n\n    this.container = /*#__PURE__*/React.createRef();\n    this.selectionDisplay = /*#__PURE__*/React.createRef();\n    this.state = {\n      selectedValue: defaultValue,\n      showList: false,\n      displayedOptions: this.props.options,\n      shownValue: defaultValue,\n      activeItem: 0\n    };\n  } //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      style\n    } = this.props;\n    const {\n      selectedValue,\n      showList,\n      displayedOptions,\n      shownValue,\n      activeItem\n    } = this.state; // console.log(displayedOptions.length)\n\n    let number = displayedOptions.length;\n    number = number > 5 ? 5 : number < 1 ? 1 : number;\n    const dropDownHeight = `${number * 100}%`;\n    const liHeight = `calc(${1 / number * 100}% - 1px)`; // console.log(showList,'showList')\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'dropdown-container',\n      style: {\n        gridRow: style.gridRow,\n        gridColumn: style.gridColumn\n      },\n      ref: this.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: showList ? 'selected-value active' : 'selected-value',\n        onClick: clickEvent => this.handleDisplay(clickEvent, style.gridColumn - 1, style.gridRow - 2),\n        onKeyDown: e => this.onKeyDown(e, style.gridColumn - 1, style.gridRow - 2),\n        contentEditable: \"true\",\n        suppressContentEditableWarning: true,\n        onInput: this.onTextChange,\n        ref: this.selectionDisplay,\n        children: selectedValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"options-list\",\n        style: {\n          height: dropDownHeight\n        },\n        children: displayedOptions.map((value, index) => {\n          // exclude the selectedValue from dropdown list options \n          // except if the shownValue is different to the selectedValue (happens if user types into search field)\n          // if(value !== selectedValue || shownValue !== selectedValue) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              height: liHeight\n            },\n            className: `dropdown-option ${index === activeItem ? 'active' : ''}`,\n            value: value,\n            onClick: e => this.handleOptionClick(e, style.gridColumn - 1, style.gridRow - 2),\n            children: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 21\n          }, this); // }\n          //   else return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","defaultValue","handleClickOutside","event","headerCol","valueRow","options","onChange","container","current","contains","target","setState","prevState","activeValue","displayedOptions","activeItem","console","log","insertValue","undefined","selectedValue","showList","shownValue","selectionDisplay","innerText","state","handleDisplay","clickEvent","includes","document","addEventListener","e","removeEventListener","handleOptionClick","onTextChange","currentInput","currentTarget","textContent","newFilteredOptions","filter","item","toLowerCase","indexOf","onKeyDown","keyCode","length","preventDefault","createRef","render","style","number","dropDownHeight","liHeight","gridRow","gridColumn","height","map","value","index"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport './dropdown.styles.css';\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n      const {defaultValue} = props;\n      super(props);\n      this.container = React.createRef();\n      this.selectionDisplay = React.createRef();\n\n      this.state = {\n          selectedValue: defaultValue,\n          showList: false,\n          displayedOptions: this.props.options,\n          shownValue: defaultValue,\n          activeItem: 0\n      };\n    }\n\n    //if click happens outside the dropdown area close the list\n    handleClickOutside = (event, headerCol, valueRow) => {\n      const { options, onChange } = this.props;\n\n      if(this.container.current && !this.container.current.contains(event.target)) {\n        \n        // console.log(options.includes(shownValue),'click')\n\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          // const insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : prevState.selectedValue;\n            \n            const activeValue = prevState.displayedOptions[prevState.activeItem];\n            console.log(activeValue,'activeValue')\n            const insertValue = activeValue === undefined ? prevState.selectedValue : activeValue;\n\n          \n          // use below to leave the typed in value even if value does not exist in options list\n          // const insertValue = prevState.shownValue;\n          \n          // console.log(insertValue,'insertValue',options.includes(prevState.shownValue))\n          return {\n            showList: false,\n            displayedOptions: options,\n            selectedValue: insertValue,\n            shownValue: insertValue\n          }\n        }\n          , \n          () => {\n            // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n              if(this.selectionDisplay.current.innerText !== this.state.selectedValue) {\n                this.selectionDisplay.current.innerText = this.state.selectedValue;\n              };\n              onChange(this.state.selectedValue, headerCol, valueRow);\n        // ()=>console.log('click out',this.state.selectedValue)\n          }\n        );\n      }\n\n    }\n\n    //handle the displaying of the list (if currently shown, then hide and vice versa)\n    handleDisplay = (clickEvent, headerCol, valueRow) => {\n      const { options } = this.props;\n      const { shownValue } = this.state;\n\n      // comment if statement to allow closing the list even if value does not exist in options list\n      if(options.includes(shownValue)) { \n        this.setState(prevState => {\n          // console.log(prevState,'prevState')\n          // console.log(this.container.current,'this.container.current')\n          // console.log(this.state.displayedOptions, 'this.state.displayedOptions')\n\n          if(!prevState.showList) {\n            // console.log('add listener')\n            document.addEventListener('mousedown', e => this.handleClickOutside(e, headerCol, valueRow));\n          }\n          else if(prevState.showList) {\n            // console.log('remove listener')\n            document.removeEventListener('mousedown', e => this.handleClickOutside(e, headerCol, valueRow));\n          }\n\n          return { showList: !prevState.showList }\n        });\n        \n      }\n\n    };\n\n    // set text based on click in displayed list\n    handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(this.selectionDisplay.current.innerText,'this.selectionDisplay')\n      // console.log(event.target.innerText, this.state.shownValue)\n      const { onChange } = this.props;\n\n      this.setState({\n        selectedValue: event.target.innerText,\n        showList: false,\n        shownValue: event.target.innerText,\n        displayedOptions: this.props.options\n      }\n        , \n        () => {\n          // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n            if(this.selectionDisplay.current.innerText !== event.target.innerText) {\n              this.selectionDisplay.current.innerText = event.target.innerText;\n            }\n            onChange(this.state.selectedValue, headerCol, valueRow);\n        }      \n      \n      );\n\n    };\n\n    onTextChange = event => {\n      // console.log('onTextChange',event.keyCode)\n      // console.log(event.currentTarget.textContent,'text change')\n      const { options } = this.props;\n\n      const currentInput = event.currentTarget.textContent;\n      // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0 //filter all with the same start\n      });\n\n      // console.log(newFilteredOptions);\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      }\n      // ,\n      // ()=>console.log(this.state)\n      )\n    }\n\n    onKeyDown = (event, headerCol, valueRow) => {\n      const { onChange } = this.props;\n      const { activeItem, displayedOptions } = this.state;\n      // console.log(event.keyCode);//,activeItem,filteredSuggestions.length);\n      //40 down, 38 up, 13 enter\n    \n      switch (event.keyCode) {\n        // down\n        case 40:\n          if(activeItem < (displayedOptions.length-1)) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              }\n            }\n            // , () => console.log('down',this.state.activeItem, displayedOptions[this.state.activeItem])\n            );\n              \n          } \n          break;\n        // up\n        case 38:\n          if(activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              }\n            }\n            // , () => console.log('up',this.state.activeItem)\n            );\n              \n          } \n          break;\n        // enter\n        case 13:\n          event.preventDefault();\n          this.setState(prevState => {\n            // console.log('enter active',displayedOptions[prevState.activeItem],prevState.activeItem)\n            return {\n              activeItem: 0,\n              selectedValue: displayedOptions[prevState.activeItem],\n              showList: false,\n              shownValue: displayedOptions[prevState.activeItem],\n              displayedOptions: this.props.options\n            }\n          }\n          , \n          () => {\n            // console.log('enter',this.state.activeItem);\n            if(this.selectionDisplay.current.innerText !== this.state.selectedValue) {\n              this.selectionDisplay.current.innerText = this.state.selectedValue;\n            }\n            onChange(this.state.selectedValue, headerCol, valueRow);\n          }\n          );\n          break;\n    \n        default:\n      }\n    \n    }\n    \n\n  \n    render() {\n      const { style } = this.props;\n      const { selectedValue, showList, displayedOptions, shownValue, activeItem } = this.state;\n      \n      // console.log(displayedOptions.length)\n      \n      let number = displayedOptions.length;\n      number = number > 5 ? 5 : number < 1 ? 1 : number;\n      \n      const dropDownHeight = `${number*100}%`;\n      const liHeight = `calc(${1/number*100}% - 1px)`;\n\n      // console.log(showList,'showList')\n      return (\n        <div \n          className={'dropdown-container'}\n          style={{ \n            gridRow: style.gridRow,\n            gridColumn: style.gridColumn,\n          }}\n          ref = {this.container}\n        >\n          <div \n            className={showList ? 'selected-value active' : 'selected-value'}\n            onClick={clickEvent => this.handleDisplay(clickEvent, style.gridColumn-1, style.gridRow-2)} \n            onKeyDown={e => this.onKeyDown(e, style.gridColumn-1, style.gridRow-2)}\n            contentEditable='true'\n            suppressContentEditableWarning={true}\n            onInput={this.onTextChange}\n            ref = {this.selectionDisplay}\n          >\n            {selectedValue}\n          </div>\n\n            {showList && (<ul className='options-list' style={{height: dropDownHeight}}>\n              {displayedOptions.map((value, index) => {\n                // exclude the selectedValue from dropdown list options \n                // except if the shownValue is different to the selectedValue (happens if user types into search field)\n                // if(value !== selectedValue || shownValue !== selectedValue) {\n                  return (\n                    <li \n                      style={{height: liHeight}}\n                      className={`dropdown-option ${index === activeItem ? 'active' : ''}`}\n                      value={value} \n                      key={index}\n                      onClick={e => this.handleOptionClick(e, style.gridColumn-1, style.gridRow-2)}\n                    >\n                      {value}\n                    </li>\n                  )\n                // }\n                //   else return null;\n\n              })}\n            </ul>)}\n        </div>\n      );\n    }\n  }\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}