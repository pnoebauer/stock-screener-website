{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport GenerateGrid from '../generate-screen-grid/generate-screen-grid.component';\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst headerTitle = ['Symbol', 'Interval', 'Price'];\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const stateKey = this.state.header[headerCol]; //which column changed (Symbol, Interval)\n\n      const values = [...this.state[stateKey]]; //all values of that column from top to bottom\n\n      const prices = [...this.state.Price]; //all prices\n\n      values[valueRow] = updatedValue; //update that particular cell that changed (i.e. GOOGL to AMZN)\n      // console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\n      let symbol = updatedValue,\n          interval = updatedValue; //set symbol and interval to that new value\n\n      if (stateKey === 'Symbol') {\n        //if a value in the Symbol column changed\n        interval = this.state.Interval[valueRow]; //reset Interval for that row to the prior value\n      } else if (stateKey === 'Interval') {\n        //if a value in the Interval column changed\n        symbol = this.state.Symbol[valueRow]; //reset Symbol for that row to the prior value\n      } // console.log('symbol', symbol, 'interval', interval);\n      // console.log('onchange',headerCol, valueRow)\n\n\n      this.props.fetchRealTimeData(new Array(symbol), 'lastPrice').then(lastPrice => {\n        prices[valueRow] = lastPrice[0];\n        this.setState({\n          Price: prices,\n          [stateKey]: values\n        });\n      });\n    };\n\n    this.sortTable = event => {\n      const sortedTable = this.props.onSort(event, this.state);\n      this.setState(sortedTable);\n    };\n\n    this.getClassNameForHeader = name => {\n      const {\n        sortConfig\n      } = this.props;\n\n      if (!sortConfig) {\n        return;\n      } // console.log(sortConfig, name, sortConfig.direction);\n      // console.log('getClassNameForHeader',sortConfig.sortedField === name ? sortConfig.direction : undefined)\n\n\n      const direction = sortConfig.direction === 1 ? 'ascending' : 'descending';\n      return sortConfig.sortedField === name ? direction : undefined;\n    };\n\n    this.state = {\n      header: headerTitle,\n      Symbol: SYMBOLS.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      Price: Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      Symbol\n    } = this.state; // console.log('mount')\n\n    this.props.fetchRealTimeData(Symbol, 'lastPrice').then(data => this.setState({\n      Price: data\n    }));\n  }\n\n  render() {\n    const {\n      header,\n      Symbol\n    } = this.state; // console.log('rend',this.state)\n    // console.log('rend',this.props)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        children: [header.map((value, colIdx) => /*#__PURE__*/_jsxDEV(ScreenHeader, {\n          gridColumn: colIdx + 1,\n          onSort: this.sortTable,\n          id: value,\n          className: `screen-header ${this.getClassNameForHeader(value)}`,\n          children: value\n        }, colIdx.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this)), //loop through the header items (columns) and afterwards loop through stored values (rows)  \n        header.map((type, colIdx) => this.state[type].map((rowVal, rowIdx) => /*#__PURE__*/_jsxDEV(GenerateGrid, {\n          type: type,\n          gridLocation: {\n            rowIdx,\n            colIdx\n          },\n          onChange: e => this.onChange(e),\n          children: rowVal\n        }, `${Symbol[rowIdx]}-${type}-${rowIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 10\n        }, this)))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","INTERVALS","SYMBOLS","headerTitle","RadarScreen","Component","constructor","props","onChange","updatedValue","headerCol","valueRow","stateKey","state","header","values","prices","Price","symbol","interval","Interval","Symbol","fetchRealTimeData","Array","then","lastPrice","setState","sortTable","event","sortedTable","onSort","getClassNameForHeader","name","sortConfig","direction","sortedField","undefined","slice","fill","componentDidMount","data","render","map","value","colIdx","toString","type","rowVal","rowIdx","e"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport GenerateGrid from '../generate-screen-grid/generate-screen-grid.component';\n\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\n\nconst headerTitle = ['Symbol', 'Interval', 'Price']\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\theader: headerTitle,\n\t\t\tSymbol: SYMBOLS.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\tPrice: Array(8).fill(0)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol } = this.state;\n\t\t// console.log('mount')\n\t\tthis.props.fetchRealTimeData(Symbol, 'lastPrice')\n\t\t.then(data => this.setState({\n\t\t\t\t\tPrice: data\n\t\t\t\t})\t\n\t\t);\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\t\tconst stateKey = this.state.header[headerCol];\t//which column changed (Symbol, Interval)\n\t\tconst values = [...this.state[stateKey]];\t//all values of that column from top to bottom\n\t\tconst prices = [...this.state.Price];\t//all prices\n\n\t\tvalues[valueRow] = updatedValue;\t//update that particular cell that changed (i.e. GOOGL to AMZN)\n\t\t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\t\t\n\t\tlet symbol = updatedValue, interval = updatedValue; //set symbol and interval to that new value\n\t\tif (stateKey==='Symbol') {\t//if a value in the Symbol column changed\n\t\t\tinterval = this.state.Interval[valueRow];\t//reset Interval for that row to the prior value\n\t\t}\n\t\telse if (stateKey==='Interval') {\t//if a value in the Interval column changed\n\t\t\tsymbol = this.state.Symbol[valueRow];\t//reset Symbol for that row to the prior value\n\t\t}\n\t\t// console.log('symbol', symbol, 'interval', interval);\n\t\t// console.log('onchange',headerCol, valueRow)\n\n\t\tthis.props.fetchRealTimeData(new Array(symbol), 'lastPrice')\n\t\t.then(lastPrice => {\n\t\t\tprices[valueRow] = lastPrice[0];\n\t\t\tthis.setState({\n\t\t\t\tPrice: prices,\n\t\t\t\t[stateKey]: values\n\t\t\t});\n\t\t});\n\t}\n\n\tsortTable = (event) => {\n\t\tconst sortedTable = this.props.onSort(event, this.state);\n\t\tthis.setState(sortedTable);\n\t}\n\n\tgetClassNameForHeader = name => {\n\t\tconst { sortConfig } = this.props;\n\t\tif (!sortConfig) {\n\t\t\treturn;\n\t\t}\n\n\t\t// console.log(sortConfig, name, sortConfig.direction);\n\n\t\t// console.log('getClassNameForHeader',sortConfig.sortedField === name ? sortConfig.direction : undefined)\n\t\t\n\t\tconst direction = sortConfig.direction === 1 ? 'ascending' : 'descending';\n\n\t\treturn sortConfig.sortedField === name ? direction : undefined;\n\t};\n\t\n\trender() {\n\t\tconst { header, Symbol } = this.state;\n\t\t// console.log('rend',this.state)\n\t\t// console.log('rend',this.props)\n\t\t\n\n\t\treturn(\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div id=\"grid-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\theader.map((value, colIdx) => (\n\t\t\t\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\tonSort={this.sortTable}\n\t\t\t\t\t\t\t\t\tid={value}\n\t\t\t\t\t\t\t\t\tclassName={`screen-header ${this.getClassNameForHeader(value)}`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t</ScreenHeader>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t\t\t\t\t\theader.map((type, colIdx) => this.state[type].map((rowVal,rowIdx) => (\n\t\t\t\t\t\t\t\t\t<GenerateGrid\n\t\t\t\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\t\t\t\tgridLocation={{rowIdx, colIdx}}\n\t\t\t\t\t\t\t\t\t\tonChange={e=>this.onChange(e)}\n\t\t\t\t\t\t\t\t\t\tkey={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{rowVal}\n\t\t\t\t\t\t\t\t\t</GenerateGrid>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}