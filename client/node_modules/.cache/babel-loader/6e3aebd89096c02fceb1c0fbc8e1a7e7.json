{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\nimport './radarscreen.styles.css'; // const headerTitle = ['Symbol', 'Interval', 'Price']\n// generate-grid-cell\n// const dropdownOptions = {\n// \tSymbol: SYMBOLS,\n// \tInterval: INTERVALS\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst permanentHeaders = ['Symbol', 'Interval'];\nconst indicatorsMapRev = {\n  '52WkHigh': '52 Week High',\n  '52WkLow': '52 Week Low',\n  askPrice: 'Ask Price',\n  askSize: 'Ask Size',\n  assetType: 'Asset Type',\n  bidPrice: 'Bid Price',\n  bidSize: 'Bid Size',\n  closePrice: 'Close Price',\n  divAmount: 'Dividend Amount',\n  divDate: 'Dividend Date',\n  divYield: 'Dividend Yield',\n  exchangeName: 'Exchange',\n  highPrice: 'High Price',\n  lastPrice: 'Last Price',\n  lastSize: 'Last Size',\n  lowPrice: 'Low Price',\n  mark: 'Mark',\n  markChangeInDouble: 'Mark Change',\n  markPercentChangeInDouble: 'Mark Change (%)',\n  nAV: 'Net Asset Value',\n  netChange: 'Net Change',\n  netPercentChangeInDouble: 'Net Change (%)',\n  openPrice: 'Open Price',\n  peRatio: 'PE Ratio',\n  totalVolume: 'Volume',\n  volatility: 'Volatility'\n};\nconst indicatorsMap = {\n  '52 Week High': '52WkHigh',\n  '52 Week Low': '52WkLow',\n  'Ask Price': 'askPrice',\n  'Ask Size': 'askSize',\n  'Asset Type': 'assetType',\n  'Bid Price': 'bidPrice',\n  'Bid Size': 'bidSize',\n  'Close Price': 'closePrice',\n  'Dividend Amount': 'divAmount',\n  'Dividend Date': 'divDate',\n  'Dividend Yield': 'divYield',\n  'Exchange': 'exchangeName',\n  'High Price': 'highPrice',\n  'Last Price': 'lastPrice',\n  'Last Size': 'lastSize',\n  'Low Price': 'lowPrice',\n  'Mark': 'mark',\n  'Mark Change': 'markChangeInDouble',\n  'Mark Change (%)': 'markPercentChangeInDouble',\n  'Net Asset Value': 'nAV',\n  'Net Change': 'netChange',\n  'Net Change (%)': 'netPercentChangeInDouble',\n  'Open Price': 'openPrice',\n  'PE Ratio': 'peRatio',\n  'Volume': 'totalVolume',\n  'Volatility': 'volatility'\n};\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setHeaderTitle = () => {\n      const {\n        header,\n        ...rest\n      } = this.state;\n      const headerTitle = Object.keys(rest); // console.log(headerTitle);\n    };\n\n    this.fetchAndSetState = apiIndicators => {\n      const {\n        Symbol\n      } = this.state;\n      let stateUpdates = {};\n      this.props.fetchRealTimeData(Symbol, apiIndicators).then(indicatorObject => {\n        // Object.keys(indicatorObject).forEach(indicator => {\n        apiIndicators.forEach(apiIndicator => {\n          const indicatorColumn = indicatorsMapRev[apiIndicator];\n          stateUpdates = { ...stateUpdates,\n            [indicatorColumn]: indicatorObject[apiIndicator]\n          };\n          console.log(stateUpdates, 'stateUpdates');\n        });\n      });\n      this.setState(stateUpdates, () => console.log(this.state, 's', apiIndicators)); // this.props.fetchRealTimeData(Symbol, apiIndicators)\n      // .then(indicatorObject => {\n      // \t// Object.keys(indicatorObject).forEach(indicator => {\n      // \tapiIndicators.forEach(apiIndicator => {\n      // \t\tconst indicatorColumn = indicatorsMapRev[apiIndicator];\n      // \t\tthis.setState({\n      // \t\t\t[indicatorColumn]: indicatorObject[apiIndicator]\n      // \t\t}\n      // \t\t\t,\n      // \t\t\t() => console.log(this.state,'s',apiIndicators)\n      // \t\t)\n      // \t}\n      // \t)\n      // });\n    };\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const {\n        fetchRealTimeData\n      } = this.props;\n      this.setState(prevState => {\n        const columnName = prevState.header[headerCol]; //which column changed (Symbol, Interval)\n\n        return {\n          [columnName]: Object.assign([], prevState[columnName], {\n            [valueRow]: updatedValue\n          })\n        };\n      }, () => {\n        fetchRealTimeData(new Array(this.state.Symbol[valueRow]), ['lastPrice', 'highPrice']).then(indicatorObject => {\n          Object.keys(indicatorObject).forEach(indicator => this.setState(prevState => ({\n            [indicator]: Object.assign([], prevState[indicator], {\n              [valueRow]: indicatorObject[indicator][0]\n            })\n          })));\n        }); // .then(lastPrice => {\n        // \tthis.setState(prevState => ({\n        // \t\tPrice: Object.assign([], prevState.Price, {[valueRow]: lastPrice[0]})\n        // \t})\n        // )});\n      });\n    };\n\n    this.sortTable = event => {\n      const sortedTable = this.props.onSort(event, this.state);\n      this.setState(sortedTable);\n    };\n\n    this.getClassNameForHeader = name => {\n      const {\n        sortConfig\n      } = this.props;\n\n      if (!sortConfig) {\n        return;\n      }\n\n      const direction = sortConfig.direction === 1 ? 'ascending' : 'descending';\n      return sortConfig.sortedField === name ? direction : undefined;\n    };\n\n    this.handleColumnUpdate = names => {\n      console.log(names, 'names');\n      const headerTitles = [...permanentHeaders, ...names]; // console.log(headerTitles,'headerTitles');\n      // // const clearState = JSON.parse(JSON.stringify(this.state));\n\n      const apiIndicators = names.map(item => indicatorsMap[item]); // console.log('apiIndicators',apiIndicators)\n      // Object.keys(this.state).forEach(key => {\n      // \tif(!headerTitles.includes(key)) {\n      // \t\tthis.setState({[key]: null})\n      // \t}\n      // })\n      // this.setState({\n      // \theader: headerTitles\n      // },\n      // ()=>console.log('after header update', this.state));\n      // console.log('2 after header update', this.state)\n\n      let clearedState = JSON.parse(JSON.stringify(this.state));\n      Object.keys(clearedState).forEach(key => {\n        if (!headerTitles.includes(key)) {\n          clearedState = { ...clearedState,\n            [key]: null\n          };\n        }\n      });\n      clearedState.header = headerTitles; // console.log(clearedState,'clearedState')\n\n      this.fetchAndSetState(apiIndicators);\n      this.setState(clearedState); // this.setState(clearedState, () => this.fetchAndSetState(apiIndicators));\n      // console.log(this.state,'fetchandset')\n    };\n\n    this.state = {\n      // header: headerTitle,\n      Symbol: SYMBOLS.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      'Last Price': Array(8).fill(0),\n      'Volume': Array(8).fill(0)\n    };\n    this.state.header = Object.keys(this.state); // console.log(this.state)\n\n    this.setHeaderTitle();\n  }\n\n  componentDidMount() {\n    const {\n      Symbol,\n      header\n    } = this.state; // console.log('mount')\n\n    const apiIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [indicatorsMap[item]]); // console.log('apiIndicators',apiIndicators)\n\n    this.fetchAndSetState(apiIndicators);\n  }\n\n  render() {\n    const {\n      header\n    } = this.state;\n    const {\n      sortConfig\n    } = this.props; // console.log('rend',this.state,this.props)\n\n    const usedIndicators = header.flatMap(item => permanentHeaders.includes(item) ? [] : [item]); // console.log(usedIndicators,'usedIndicators')\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        style: {\n          gridTemplateColumns: `repeat(${header.length}, 1fr) 0`\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScreenHeader, {\n          header: header,\n          sortTable: this.sortTable,\n          sortConfig: sortConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddColumnButton, {\n          style: {\n            gridColumn: `${header.length}+1`\n          },\n          handleColumnUpdate: this.handleColumnUpdate,\n          usedIndicators: usedIndicators\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(GenerateGrid, { ...this.state,\n          onChange: this.onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","AddColumnButton","INTERVALS","SYMBOLS","permanentHeaders","indicatorsMapRev","askPrice","askSize","assetType","bidPrice","bidSize","closePrice","divAmount","divDate","divYield","exchangeName","highPrice","lastPrice","lastSize","lowPrice","mark","markChangeInDouble","markPercentChangeInDouble","nAV","netChange","netPercentChangeInDouble","openPrice","peRatio","totalVolume","volatility","indicatorsMap","RadarScreen","Component","constructor","props","setHeaderTitle","header","rest","state","headerTitle","Object","keys","fetchAndSetState","apiIndicators","Symbol","stateUpdates","fetchRealTimeData","then","indicatorObject","forEach","apiIndicator","indicatorColumn","console","log","setState","onChange","updatedValue","headerCol","valueRow","prevState","columnName","assign","Array","indicator","sortTable","event","sortedTable","onSort","getClassNameForHeader","name","sortConfig","direction","sortedField","undefined","handleColumnUpdate","names","headerTitles","map","item","clearedState","JSON","parse","stringify","key","includes","slice","Interval","fill","componentDidMount","flatMap","render","usedIndicators","gridTemplateColumns","length","gridColumn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\n\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\n// const headerTitle = ['Symbol', 'Interval', 'Price']\n\n// generate-grid-cell\n// const dropdownOptions = {\n// \tSymbol: SYMBOLS,\n// \tInterval: INTERVALS\n// }\nconst permanentHeaders = ['Symbol', 'Interval'];\n\n\nconst indicatorsMapRev = {\n\t'52WkHigh': '52 Week High',\n\t'52WkLow': '52 Week Low',\n\taskPrice: 'Ask Price',\n\taskSize: 'Ask Size',\n\tassetType: 'Asset Type',\n\tbidPrice: 'Bid Price',\n\tbidSize: 'Bid Size',\n\tclosePrice: 'Close Price',\n\tdivAmount: 'Dividend Amount',\n\tdivDate: 'Dividend Date',\n\tdivYield: 'Dividend Yield',\n\texchangeName: 'Exchange',\n\thighPrice: 'High Price',\n\tlastPrice: 'Last Price',\n\tlastSize: 'Last Size',\n\tlowPrice: 'Low Price',\n\tmark: 'Mark',\n\tmarkChangeInDouble: 'Mark Change',\n\tmarkPercentChangeInDouble: 'Mark Change (%)',\n\tnAV: 'Net Asset Value',\n\tnetChange: 'Net Change',\n\tnetPercentChangeInDouble: 'Net Change (%)',\n\topenPrice: 'Open Price',\n\tpeRatio: 'PE Ratio',\n\ttotalVolume: 'Volume',\n\tvolatility: 'Volatility'\n};\n\nconst indicatorsMap = {\n\t'52 Week High': '52WkHigh',\n\t'52 Week Low': '52WkLow',\n\t'Ask Price': 'askPrice',\n\t'Ask Size': 'askSize',\n\t'Asset Type': 'assetType',\n\t'Bid Price': 'bidPrice',\n\t'Bid Size': 'bidSize',\n\t'Close Price': 'closePrice',\n\t'Dividend Amount': 'divAmount',\n\t'Dividend Date': 'divDate',\n\t'Dividend Yield': 'divYield',\n\t'Exchange': 'exchangeName',\n\t'High Price': 'highPrice',\n\t'Last Price': 'lastPrice',\n\t'Last Size': 'lastSize',\n\t'Low Price': 'lowPrice',\n\t'Mark': 'mark',\n\t'Mark Change': 'markChangeInDouble',\n\t'Mark Change (%)': 'markPercentChangeInDouble',\n\t'Net Asset Value': 'nAV',\n\t'Net Change': 'netChange',\n\t'Net Change (%)': 'netPercentChangeInDouble',\n\t'Open Price': 'openPrice',\n\t'PE Ratio': 'peRatio',\n\t'Volume': 'totalVolume',\n\t'Volatility': 'volatility' \n};\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t// header: headerTitle,\n\t\t\tSymbol: SYMBOLS.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\t'Last Price': Array(8).fill(0),\n\t\t\t'Volume': Array(8).fill(0)\n\t\t}\n\n\t\tthis.state.header = Object.keys(this.state);\n\n\t\t// console.log(this.state)\n\t\tthis.setHeaderTitle();\n\t}\n\n\tsetHeaderTitle = () => {\n\t\tconst { header, ...rest } = this.state;\n\t\tconst headerTitle = Object.keys(rest);\n\t\t// console.log(headerTitle);\n\t}\n\n\tfetchAndSetState = (apiIndicators) => {\n\t\t\n\t\tconst { Symbol } = this.state;\n\n\t\tlet stateUpdates = {};\n\n\t\tthis.props.fetchRealTimeData(Symbol, apiIndicators)\n\t\t.then(indicatorObject => {\n\t\t\t// Object.keys(indicatorObject).forEach(indicator => {\n\t\t\tapiIndicators.forEach(apiIndicator => {\n\t\t\t\tconst indicatorColumn = indicatorsMapRev[apiIndicator];\n\t\t\t\tstateUpdates = {\n\t\t\t\t\t...stateUpdates,\n\t\t\t\t\t[indicatorColumn]: indicatorObject[apiIndicator]\n\t\t\t\t};\n\n\t\t\t\tconsole.log(stateUpdates,'stateUpdates')\n\t\t\t}\n\t\t\t)\n\t\t});\n\n\t\tthis.setState(stateUpdates,() => console.log(this.state,'s',apiIndicators));\n\n\t\t// this.props.fetchRealTimeData(Symbol, apiIndicators)\n\t\t// .then(indicatorObject => {\n\t\t// \t// Object.keys(indicatorObject).forEach(indicator => {\n\t\t// \tapiIndicators.forEach(apiIndicator => {\n\t\t// \t\tconst indicatorColumn = indicatorsMapRev[apiIndicator];\n\t\t// \t\tthis.setState({\n\t\t// \t\t\t[indicatorColumn]: indicatorObject[apiIndicator]\n\t\t// \t\t}\n\t\t// \t\t\t,\n\t\t// \t\t\t() => console.log(this.state,'s',apiIndicators)\n\t\t// \t\t)\n\t\t// \t}\n\t\t// \t)\n\t\t// });\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol, header } = this.state;\n\t\t// console.log('mount')\n\n\t\tconst apiIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [indicatorsMap[item]]\n\t\t)\n\n\t\t// console.log('apiIndicators',apiIndicators)\n\t\t\n\t\tthis.fetchAndSetState(apiIndicators);\n\t\t\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst {fetchRealTimeData} = this.props;\n\t\tthis.setState(prevState => {\n\t\t\tconst columnName = prevState.header[headerCol];\t//which column changed (Symbol, Interval)\n\t\t\treturn {\n\t\t\t\t[columnName]: Object.assign([], prevState[columnName], {[valueRow]: updatedValue})\n\t\t\t}\n\t\t}\n\t\t,\n\t\t() => {\n\t\t\tfetchRealTimeData(new Array(this.state.Symbol[valueRow]), ['lastPrice', 'highPrice'])\n\t\t\t.then(indicatorObject => {\n\t\t\t\tObject.keys(indicatorObject).forEach(indicator => \n\t\t\t\t\tthis.setState(prevState => ({\n\t\t\t\t\t\t\t[indicator]: Object.assign([], prevState[indicator], {[valueRow]: indicatorObject[indicator][0]})\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t});\n\t\t\t// .then(lastPrice => {\n\t\t\t// \tthis.setState(prevState => ({\n\t\t\t// \t\tPrice: Object.assign([], prevState.Price, {[valueRow]: lastPrice[0]})\n\t\t\t// \t})\n\t\t\t// )});\n\t\t})\n\t}\n\n\tsortTable = (event) => {\n\t\tconst sortedTable = this.props.onSort(event, this.state);\n\t\tthis.setState(sortedTable);\n\t}\n\n\tgetClassNameForHeader = name => {\n\t\tconst { sortConfig } = this.props;\n\t\tif (!sortConfig) {\n\t\t\treturn;\n\t\t}\n\t\tconst direction = sortConfig.direction === 1 ? 'ascending' : 'descending'; \n\t\treturn sortConfig.sortedField === name ? direction : undefined;\n\t};\n\n\thandleColumnUpdate = names => {\n\t\tconsole.log(names, 'names');\n\n\t\tconst headerTitles = [...permanentHeaders, ...names];\n\n\t\t// console.log(headerTitles,'headerTitles');\n\n\t\t// // const clearState = JSON.parse(JSON.stringify(this.state));\n\n\t\tconst apiIndicators = names.map(item => indicatorsMap[item]);\n\n\t\t// console.log('apiIndicators',apiIndicators)\n\t\t\n\t\t// Object.keys(this.state).forEach(key => {\n\t\t// \tif(!headerTitles.includes(key)) {\n\t\t// \t\tthis.setState({[key]: null})\n\t\t// \t}\n\t\t// })\n\n\t\t// this.setState({\n\t\t// \theader: headerTitles\n\t\t// },\n\t\t// ()=>console.log('after header update', this.state));\n\n\t\t// console.log('2 after header update', this.state)\n\n\n\t\tlet clearedState = JSON.parse(JSON.stringify(this.state));\n\n\t\tObject.keys(clearedState).forEach(key => {\n\t\t\tif(!headerTitles.includes(key)) {\n\t\t\t\tclearedState = {\n\t\t\t\t\t...clearedState,\n\t\t\t\t\t[key]: null\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tclearedState.header = headerTitles;\n\n\t\t// console.log(clearedState,'clearedState')\n\n\t\tthis.fetchAndSetState(apiIndicators);\n\n\t\tthis.setState(clearedState);\n\n\t\t// this.setState(clearedState, () => this.fetchAndSetState(apiIndicators));\n\t\t// console.log(this.state,'fetchandset')\n\t}\n\t\n\trender() {\n\t\tconst { header } = this.state;\n\t\tconst { sortConfig } = this.props;\n\t\t// console.log('rend',this.state,this.props)\n\n\t\tconst usedIndicators = header.flatMap(item => \n\t\t\tpermanentHeaders.includes(item) ? [] : [item]\n\t\t);\n\n\t\t// console.log(usedIndicators,'usedIndicators')\n\n\t\treturn (\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div id=\"grid-container\" \n\t\t\t\t\tstyle={{gridTemplateColumns: `repeat(${header.length}, 1fr) 0`}}\n\t\t\t\t>\n\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tsortTable={this.sortTable}\n\t\t\t\t\t\tsortConfig={sortConfig}\n\t\t\t\t\t/>\n\t\t\t\t\t<AddColumnButton \n\t\t\t\t\t\tstyle={{\n                            gridColumn: `${header.length}+1`\n                        }}\n\t\t\t\t\t\thandleColumnUpdate={this.handleColumnUpdate}\n\t\t\t\t\t\tusedIndicators={usedIndicators}\n\t\t\t\t\t/>\n\t\t\t\t\t<GenerateGrid \n\t\t\t\t\t\t{...this.state}\n\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}