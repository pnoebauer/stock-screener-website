{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/client/src/components/build-screener/withSorting.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withSorting(WrappedComponent) {\n  class WithSorting extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.sortTable = (tableObject, sortedField, direction) => {\n        // console.log('sort')\n        const stateClone = JSON.parse(JSON.stringify(tableObject));\n        delete stateClone.sortConfig; // console.log(stateClone,'stateClone orig');\n\n        const list = [...stateClone[sortedField]]; // console.log(list);\n        // temporary array holds objects with position and sort-value\n\n        const mapped = list.map((value, index) => {\n          if (typeof value === 'string') {\n            value = value.toLowerCase();\n          }\n\n          if (sortedField === 'ID') {\n            value = Number(value);\n          }\n\n          return {\n            index,\n            value\n          };\n        }); // console.log(mapped,'mapped');\n        // sorting the mapped array containing the reduced values\n\n        mapped.sort((a, b) => {\n          if (a.value > b.value) {\n            return direction;\n          }\n\n          if (a.value < b.value) {\n            return -direction;\n          }\n\n          return 0;\n        }); // console.log(mapped,'map sort');\n        // table headers (Symbol, Interval, Price, ...)\n\n        const columnHeaders = Object.keys(stateClone); // loop over each header and resort its rows based on mapped array\n\n        columnHeaders.forEach(column => {\n          // reorders the current column based on the resorted list (stored in mapped)\n          stateClone[column] = mapped.map(element => stateClone[column][element.index]); // console.log(stateClone[column],'mapped')\n          // console.log(stateClone,'stateClone')\n        }); // console.log(stateClone,'stateClone fin')\n\n        return stateClone;\n      };\n\n      this.onSort = (event, state) => {\n        const {\n          sortConfig\n        } = this.state; // console.log('click',event.target.id, state)\n\n        let sortedField = event.target.id; // // const list = [...this.state[sortedField]]\n\n        let direction = 1;\n\n        if (sortConfig.sortedField === sortedField) {\n          if (sortConfig.direction === direction) {\n            direction = -1;\n          } else if (sortConfig.direction === -direction) {\n            // direction = 0;\n            // direction = 1;\n            sortedField = 'ID';\n          }\n        } // const sortedData = sortTable(this.state, sortedField, direction);\n\n\n        const sortedData = this.sortTable(state, sortedField, direction); // console.log('sortedData',sortedData)\n        // this.setState(sortedData);\n\n        this.setState({\n          sortConfig: {\n            sortedField,\n            direction\n          }\n        });\n        return sortedData;\n      };\n\n      this.state = {\n        sortConfig: {}\n      };\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        onSort: this.onSort,\n        ...this.state,\n        ...this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this);\n    }\n\n  }\n\n  return WithSorting;\n}\n\nexport default withSorting;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/client/src/components/build-screener/withSorting.jsx"],"names":["React","withSorting","WrappedComponent","WithSorting","Component","constructor","props","sortTable","tableObject","sortedField","direction","stateClone","JSON","parse","stringify","sortConfig","list","mapped","map","value","index","toLowerCase","Number","sort","a","b","columnHeaders","Object","keys","forEach","column","element","onSort","event","state","target","id","sortedData","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nfunction withSorting(WrappedComponent) {\n    class WithSorting extends React.Component {\n\n        constructor(props) {\n            super(props);\n            this.state = {\n                sortConfig: {}\n            };\n        }\n\n        sortTable = (tableObject, sortedField, direction) => {\n            // console.log('sort')\n\t\n            const stateClone = JSON.parse(JSON.stringify(tableObject));\n            \n            delete stateClone.sortConfig;\n            \n            // console.log(stateClone,'stateClone orig');\n            const list = [...stateClone[sortedField]];\n            \n            // console.log(list);\n        \n            // temporary array holds objects with position and sort-value\n            const mapped = list.map((value, index) => {\n                if(typeof(value) ==='string') {\n                    value = value.toLowerCase();\n                }\n                if(sortedField === 'ID') {\n                    value = Number(value);\n                }\n                  \n                return { \n                      index, \n                      value \n                    };\n                }\n            );\n        \n            // console.log(mapped,'mapped');\n        \n            // sorting the mapped array containing the reduced values\n            mapped.sort((a, b) => {\n                if (a.value > b.value) {\n                    return direction;\n                }\n                if (a.value < b.value) {\n                    return -direction;\n                }\n                return 0;\n            });\n        \n            // console.log(mapped,'map sort');\n            // table headers (Symbol, Interval, Price, ...)\n            const columnHeaders = Object.keys(stateClone);\n        \n            // loop over each header and resort its rows based on mapped array\n            columnHeaders.forEach(column => {\n                // reorders the current column based on the resorted list (stored in mapped)\n                stateClone[column] = mapped.map(element => stateClone[column][element.index]);\n                // console.log(stateClone[column],'mapped')\n                // console.log(stateClone,'stateClone')\n            })\n        \n            // console.log(stateClone,'stateClone fin')\n        \n            return stateClone;\n        }\n\n        onSort = (event, state) => {\n            const { sortConfig } = this.state;\n            // console.log('click',event.target.id, state)\n            \n            let sortedField = event.target.id;\n            // // const list = [...this.state[sortedField]]\n    \n            let direction = 1;\n    \n            if(sortConfig.sortedField === sortedField) {\n                if(sortConfig.direction === direction) {\n                    direction = -1;\n                }\n\n                else if(sortConfig.direction === -direction) {\n                    // direction = 0;\n                    // direction = 1;\n                    sortedField = 'ID';\n                }\n            }\n    \n            // const sortedData = sortTable(this.state, sortedField, direction);\n            const sortedData = this.sortTable(state, sortedField, direction);\n\n            // console.log('sortedData',sortedData)\n            // this.setState(sortedData);\n        \n            this.setState({\n                sortConfig: {\n                    sortedField,\n                    direction\n                }\n            });\n\n            return sortedData;\n        }\n\n        render() {\n            return (\n                <WrappedComponent onSort={this.onSort} {...this.state} {...this.props}/>\n            )\n        }\n    }\n    return WithSorting;\n}\n\nexport default withSorting;"]},"metadata":{},"sourceType":"module"}