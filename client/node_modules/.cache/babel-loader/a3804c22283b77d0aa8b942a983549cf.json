{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\nconst headerConst = ['Symbol', 'Interval', 'Price'];\nconst selectTbl = {\n  Symbol: SYMBOLS,\n  Interval: INTERVALS\n};\n\nconst fetchRealTimeData = async symbol => {\n  const params = {\n    apikey,\n    symbol\n  };\n  const queryExt = new URLSearchParams(params).toString();\n  const queryString = urlRealTime.concat('?', queryExt);\n  const response = await fetch(queryString);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  const data = await response.json();\n  return data;\n};\n\nconst sortTable = sortedField => {\n  const list = this.state[sortedField];\n  console.log(list);\n}; // // the array to be sorted\n// var list = ['Delta', 'alpha', 'CHARLIE', 'bravo'];\n// // temporary array holds objects with position and sort-value\n// var mapped = list.map(function(el, i) {\n//   return { index: i, value: el.toLowerCase() };\n// })\n// // sorting the mapped array containing the reduced values\n// mapped.sort(function(a, b) {\n//   if (a.value > b.value) {\n//     return 1;\n//   }\n//   if (a.value < b.value) {\n//     return -1;\n//   }\n//   return 0;\n// });\n// // container for the resulting order\n// var result = mapped.map(function(el){\n//   return list[el.index];\n// });\n\n\nclass RadarScreen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const stateKey = this.state.header[headerCol];\n      const values = [...this.state[stateKey]];\n      const prices = [...this.state.Price];\n      values[valueRow] = updatedValue; // console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\n      let symbol = updatedValue,\n          interval = updatedValue;\n\n      if (stateKey === 'Symbol') {\n        interval = this.state.Interval[valueRow];\n      } else if (stateKey === 'Interval') {\n        symbol = this.state.Symbol[valueRow];\n      } // console.log('symbol', symbol, 'interval', interval);\n\n\n      fetchRealTimeData(symbol).then(data => {\n        const lastPrice = data[symbol].lastPrice; // console.log(lastPrice);\n\n        prices[valueRow] = lastPrice; // console.log(prices);\n\n        this.setState({\n          Price: prices\n        });\n      }).catch(e => {\n        console.log('An error occurred during fetching: ' + e.message);\n      });\n      this.setState({\n        [stateKey]: values\n      });\n    };\n\n    this.sortTable = sortedField => {\n      const list = this.state[sortedField];\n      console.log(list);\n    };\n\n    this.state = {\n      header: headerConst,\n      Symbol: SP500.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      Price: Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      Symbol\n    } = this.state;\n    fetchRealTimeData(Symbol).then(data => {\n      const prices = Symbol.map((symbolName, index) => {\n        return data[symbolName].lastPrice;\n      }); // console.log(prices);\n\n      this.setState({\n        Price: prices\n      } // () => console.log(this.state)\n      );\n    });\n  }\n\n  render() {\n    const {\n      header\n    } = this.state;\n    sortTable('Price'); // console.log(this.state);\n    // const priceArr = [...this.state.Price]\n    // priceArr.sort(function(a, b) {\n    // \treturn a - b;\n    //   })\n    // console.log(priceArr)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        children: [header.map((value, colIdx) => /*#__PURE__*/_jsxDEV(ScreenHeader, {\n          gridColumn: colIdx + 1,\n          children: value\n        }, colIdx.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }, this)), //loop through the header items (columns) and afterwards loop through stored values (rows)  \n        header.map((value, colIdx) => this.state[value].map((rowVal, rowIdx) => {\n          if (selectTbl[header[colIdx]] !== undefined) {\n            return /*#__PURE__*/_jsxDEV(Dropdown, {\n              options: selectTbl[header[colIdx]],\n              defaultValue: this.state[header[colIdx]][rowIdx],\n              gridRow: rowIdx + 2,\n              gridColumn: colIdx + 1,\n              onChange: this.onChange\n            }, colIdx.toString() + rowIdx.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 11\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(ValueCell, {\n              gridRow: rowIdx + 2,\n              gridColumn: colIdx + 1,\n              children: rowVal\n            }, colIdx.toString() + rowIdx.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 11\n            }, this);\n          }\n        }))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","Dropdown","ValueCell","SYMBOLS","INTERVALS","SP500","urlRealTime","apikey","headerConst","selectTbl","Symbol","Interval","fetchRealTimeData","symbol","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","data","json","sortTable","sortedField","list","state","console","log","RadarScreen","PureComponent","constructor","props","onChange","updatedValue","headerCol","valueRow","stateKey","header","values","prices","Price","interval","then","lastPrice","setState","catch","e","slice","Array","fill","componentDidMount","map","symbolName","index","render","value","colIdx","rowVal","rowIdx","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\n\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\n\nconst headerConst = ['Symbol', 'Interval', 'Price']\n\nconst selectTbl = {\n\tSymbol: SYMBOLS,\n\tInterval: INTERVALS\n}\n\nconst fetchRealTimeData = async (symbol) => {\n\tconst params = {apikey, symbol};\n\t\n\tconst queryExt = new URLSearchParams(params).toString();\n\tconst queryString = urlRealTime.concat('?', queryExt);\n\n\tconst response = await fetch(queryString);\n\n\tif (!response.ok) {\n\t\tconst message = `An error has occured: ${response.status}`;\n\t\tthrow new Error(message);\n\t}\n\n\tconst data = await response.json();\n\n\treturn data;\n}\n\n\nconst sortTable = (sortedField) => {\n\tconst list = this.state[sortedField]\n\t\n\tconsole.log(list);\n\n}\n// // the array to be sorted\n// var list = ['Delta', 'alpha', 'CHARLIE', 'bravo'];\n\n// // temporary array holds objects with position and sort-value\n// var mapped = list.map(function(el, i) {\n//   return { index: i, value: el.toLowerCase() };\n// })\n\n// // sorting the mapped array containing the reduced values\n// mapped.sort(function(a, b) {\n//   if (a.value > b.value) {\n//     return 1;\n//   }\n//   if (a.value < b.value) {\n//     return -1;\n//   }\n//   return 0;\n// });\n\n// // container for the resulting order\n// var result = mapped.map(function(el){\n//   return list[el.index];\n// });\n\n\nclass RadarScreen extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\theader: headerConst,\n\t\t\tSymbol: SP500.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\tPrice: Array(8).fill(0)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol } = this.state;\n\n\t\tfetchRealTimeData(Symbol)\n\t\t\t.then(data => {\n\t\t\t\tconst prices = Symbol.map((symbolName, index) => {\n\t\t\t\t\treturn data[symbolName].lastPrice;\n\t\t\t\t})\n\t\t\t\t// console.log(prices);\n\t\t\t\tthis.setState({\n\t\t\t\t\tPrice: prices\n\t\t\t\t}\n\t\t\t\t,\n\t\t\t\t// () => console.log(this.state)\n\t\t\t\t);\n\t\t\t})\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst stateKey = this.state.header[headerCol];\n\t\tconst values = [...this.state[stateKey]];\n\t\tconst prices = [...this.state.Price];\n\n\t\tvalues[valueRow] = updatedValue;\n\n\t\t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\t\t\n\t\tlet symbol = updatedValue, interval = updatedValue;\n\t\tif (stateKey==='Symbol') {\n\t\t\tinterval = this.state.Interval[valueRow];\n\t\t}\n\t\telse if (stateKey==='Interval'){\n\t\t\tsymbol = this.state.Symbol[valueRow];\n\t\t}\n\n\t\t// console.log('symbol', symbol, 'interval', interval);\n\n\t\tfetchRealTimeData(symbol)\n\t\t\t.then(data => {\n\t\t\t\tconst lastPrice = data[symbol].lastPrice;\n\t\t\t\t// console.log(lastPrice);\n\n\t\t\t\tprices[valueRow] = lastPrice;\n\n\t\t\t\t// console.log(prices);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tPrice: prices\n\t\t\t\t});\n\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconsole.log('An error occurred during fetching: ' + e.message);\n\t\t  \t});\n\n\n\t\tthis.setState({\n\t\t\t[stateKey]: values\n\t\t});\n\t}\n\n\tsortTable = (sortedField) => {\n\t\tconst list = this.state[sortedField]\n\t\t\n\t\tconsole.log(list);\n\t\n\t}\n\n\trender() {\n\n\t\tconst { header } = this.state;\n\n\t\tsortTable('Price');\n\n\t\t// console.log(this.state);\n\n\t\t// const priceArr = [...this.state.Price]\n\t\t// priceArr.sort(function(a, b) {\n\t\t// \treturn a - b;\n\t\t//   })\n\n\t\t// console.log(priceArr)\n\n\t\treturn(\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div className='space'></div>\n\t\t\t\t\n\t\t\t\t<div id=\"grid-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\theader.map((value, colIdx) => (\n\t\t\t\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t</ScreenHeader>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t\t\t\t\t\theader.map((value, colIdx) => this.state[value].map((rowVal,rowIdx) => {\n\t\t\t\t\t\t\t\tif(selectTbl[header[colIdx]] !== undefined) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Dropdown \n\t\t\t\t\t\t\t\t\t\t\toptions={selectTbl[header[colIdx]]}\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={this.state[header[colIdx]][rowIdx]}\n\t\t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t\t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\t\t\t\t/> \n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<ValueCell \n\t\t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t\t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{rowVal}\n\t\t\t\t\t\t\t\t\t\t</ValueCell>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}