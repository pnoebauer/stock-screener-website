{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\nconst headerTitle = ['Symbol', 'Interval', 'Price'];\nconst selectTbl = {\n  Symbol: SYMBOLS,\n  Interval: INTERVALS\n};\n\nconst fetchRealTimeData = async symbol => {\n  // console.log('fetch')\n  const params = {\n    apikey,\n    symbol\n  };\n  const queryExt = new URLSearchParams(params).toString();\n  const queryString = urlRealTime.concat('?', queryExt);\n  const response = await fetch(queryString);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  const data = await response.json();\n  console.log(data);\n  return data;\n};\n\nconst sortTable = (state, sortedField, direction) => {\n  const stateClone = JSON.parse(JSON.stringify(state));\n  delete stateClone.header;\n  delete stateClone.sortConfig; // console.log(stateClone,'stateClone orig');\n\n  const list = [...stateClone[sortedField]]; // console.log(list);\n  // temporary array holds objects with position and sort-value\n\n  const mapped = list.map((value, index) => {\n    if (typeof value === 'string') value = value.toLowerCase();\n    return {\n      index,\n      value\n    };\n  }); // console.log(mapped);\n  // sorting the mapped array containing the reduced values\n\n  mapped.sort((a, b) => {\n    if (a.value > b.value) {\n      return direction;\n    }\n\n    if (a.value < b.value) {\n      return -direction;\n    }\n\n    return 0;\n  }); // console.log(mapped);\n  // console.log(stateClone,'stateClone start')\n\n  const keys = Object.keys(stateClone);\n  keys.forEach(key => {\n    // console.log(stateClone[key],'k')\n    stateClone[key] = mapped.map(element => stateClone[key][element.index]); // console.log(stateClone[key],'mapped')\n    // console.log(stateClone,'stateClone')\n  }); // console.log(stateClone,'stateClone fin')\n\n  return stateClone;\n};\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const stateKey = this.state.header[headerCol]; //which column changed (Symbol, Interval)\n\n      const values = [...this.state[stateKey]]; //all values of that column from top to bottom\n\n      const prices = [...this.state.Price]; //all prices\n\n      values[valueRow] = updatedValue; //update that particular cell that changed (i.e. GOOGL to AMZN)\n      // console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\n      let symbol = updatedValue,\n          interval = updatedValue; //set symbol and interval to that new value\n\n      if (stateKey === 'Symbol') {\n        //if a value in the Symbol column changed\n        interval = this.state.Interval[valueRow]; //reset Interval for that row to the prior value\n      } else if (stateKey === 'Interval') {\n        //if a value in the Interval column changed\n        symbol = this.state.Symbol[valueRow]; //reset Symbol for that row to the prior value\n      } // console.log('symbol', symbol, 'interval', interval);\n      // console.log('onchange',headerCol, valueRow)\n\n\n      fetchRealTimeData(symbol).then(data => {\n        const lastPrice = data[symbol].lastPrice; // console.log(lastPrice);\n\n        prices[valueRow] = lastPrice; // console.log(prices);\n\n        this.setState({\n          Price: prices\n        });\n      }).catch(e => {\n        console.log('An error occurred during fetching: ' + e.message);\n      });\n      this.setState({\n        [stateKey]: values\n      });\n    };\n\n    this.onSort = event => {\n      const {\n        sortConfig\n      } = this.state; // console.log('click',event.target.id)\n      // const sortedField = 'Price';\n\n      const sortedField = event.target.id; // const list = [...this.state[sortedField]]\n\n      let direction = 1;\n\n      if (sortConfig.sortedField === sortedField) {\n        if (sortConfig.direction === direction) {\n          direction = -1;\n        } else if (sortConfig.direction === -1) {// direction = 0;\n        }\n      }\n\n      const sortedData = sortTable(this.state, sortedField, direction); // console.log(sortedData.Price);\n      // console.log(sortedData,'sortedData');\n\n      this.setState({\n        sortConfig: {\n          sortedField,\n          direction\n        }\n      } // ()` => console.log(this.state)\n      );\n      this.setState(sortedData);\n    };\n\n    this.state = {\n      header: headerTitle,\n      sortConfig: {},\n      Symbol: SP500.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      Price: Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      Symbol\n    } = this.state; // console.log('mount')\n\n    fetchRealTimeData(Symbol).then(data => {\n      const prices = Symbol.map((symbolName, index) => {\n        return data[symbolName].lastPrice;\n      }); // console.log(prices);\n\n      this.setState({\n        Price: prices\n      } // () => console.log(this.state)\n      );\n    });\n  }\n\n  render() {\n    const {\n      header\n    } = this.state; // console.log('rend',this.state)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space\",\n        onClick: this.onSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        children: [header.map((value, colIdx) => /*#__PURE__*/_jsxDEV(ScreenHeader, {\n          gridColumn: colIdx + 1,\n          onSort: this.onSort,\n          id: value,\n          children: value\n        }, colIdx.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 9\n        }, this)), //loop through the header items (columns) and afterwards loop through stored values (rows)  \n        header.map((type, colIdx) => this.state[type].map((rowVal, rowIdx) => {\n          if (selectTbl[type] !== undefined) {\n            console.log(type); // if(colIdx === 0 && rowIdx === 0) console.log('dd pass',this.state[header[colIdx]][rowIdx])\n\n            return /*#__PURE__*/_jsxDEV(Dropdown, {\n              options: selectTbl[type],\n              gridRow: rowIdx + 2,\n              gridColumn: colIdx + 1,\n              onChange: this.onChange,\n              children: rowVal\n            }, colIdx.toString() + rowIdx.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 11\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(ValueCell, {\n              gridRow: rowIdx + 2,\n              gridColumn: colIdx + 1,\n              children: rowVal\n            }, colIdx.toString() + rowIdx.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 11\n            }, this);\n          }\n        }))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","Dropdown","ValueCell","SYMBOLS","INTERVALS","SP500","urlRealTime","apikey","headerTitle","selectTbl","Symbol","Interval","fetchRealTimeData","symbol","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","data","json","console","log","sortTable","state","sortedField","direction","stateClone","JSON","parse","stringify","header","sortConfig","list","mapped","map","value","index","toLowerCase","sort","a","b","keys","Object","forEach","key","element","RadarScreen","Component","constructor","props","onChange","updatedValue","headerCol","valueRow","stateKey","values","prices","Price","interval","then","lastPrice","setState","catch","e","onSort","event","target","id","sortedData","slice","Array","fill","componentDidMount","symbolName","render","colIdx","type","rowVal","rowIdx","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\n\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\n\nconst headerTitle = ['Symbol', 'Interval', 'Price']\n\nconst selectTbl = {\n\tSymbol: SYMBOLS,\n\tInterval: INTERVALS\n}\n\nconst fetchRealTimeData = async (symbol) => {\n\t// console.log('fetch')\n\n\tconst params = {apikey, symbol};\n\t\n\tconst queryExt = new URLSearchParams(params).toString();\n\tconst queryString = urlRealTime.concat('?', queryExt);\n\n\tconst response = await fetch(queryString);\n\n\tif (!response.ok) {\n\t\tconst message = `An error has occured: ${response.status}`;\n\t\tthrow new Error(message);\n\t}\n\n\tconst data = await response.json();\n\tconsole.log(data)\n\treturn data;\n}\n\nconst sortTable = (state, sortedField, direction) => {\n\t\n\tconst stateClone = JSON.parse(JSON.stringify(state));\n\tdelete stateClone.header;\n\tdelete stateClone.sortConfig;\n\t\n\t// console.log(stateClone,'stateClone orig');\n\tconst list = [...stateClone[sortedField]];\n\t\n\t// console.log(list);\n\n\t// temporary array holds objects with position and sort-value\n\tconst mapped = list.map((value, index) => {\n\t\tif(typeof(value) ==='string') value = value.toLowerCase();\n\t\t  \n\t\treturn { \n\t\t\t  index, \n\t\t\t  value \n\t\t\t};\n\t\t}\n\t);\n\n\t// console.log(mapped);\n\n\t// sorting the mapped array containing the reduced values\n\tmapped.sort((a, b) => {\n\t\tif (a.value > b.value) {\n\t\t\treturn direction;\n\t\t}\n\t\tif (a.value < b.value) {\n\t\t\treturn -direction;\n\t\t}\n\t\treturn 0;\n\t});\n\n\t// console.log(mapped);\n\n\t// console.log(stateClone,'stateClone start')\n\n\tconst keys = Object.keys(stateClone);\n\n\tkeys.forEach(key => {\n\t\t// console.log(stateClone[key],'k')\n\n\t\tstateClone[key] = mapped.map(element => stateClone[key][element.index]);\n\t\t// console.log(stateClone[key],'mapped')\n\t\t// console.log(stateClone,'stateClone')\n\t})\n\n\t// console.log(stateClone,'stateClone fin')\n\n\treturn stateClone;\n}\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\theader: headerTitle,\n\t\t\tsortConfig: {},\n\t\t\tSymbol: SP500.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\tPrice: Array(8).fill(0)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol } = this.state;\n\t\t// console.log('mount')\n\t\tfetchRealTimeData(Symbol)\n\t\t\t.then(data => {\n\t\t\t\tconst prices = Symbol.map((symbolName, index) => {\n\t\t\t\t\treturn data[symbolName].lastPrice;\n\t\t\t\t})\n\t\t\t\t// console.log(prices);\n\t\t\t\tthis.setState({\n\t\t\t\t\tPrice: prices\n\t\t\t\t}\n\t\t\t\t,\n\t\t\t\t// () => console.log(this.state)\n\t\t\t\t);\n\t\t\t})\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst stateKey = this.state.header[headerCol];\t//which column changed (Symbol, Interval)\n\t\tconst values = [...this.state[stateKey]];\t//all values of that column from top to bottom\n\t\tconst prices = [...this.state.Price];\t//all prices\n\n\t\tvalues[valueRow] = updatedValue;\t//update that particular cell that changed (i.e. GOOGL to AMZN)\n\t\t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\t\t\n\t\tlet symbol = updatedValue, interval = updatedValue; //set symbol and interval to that new value\n\t\tif (stateKey==='Symbol') {\t//if a value in the Symbol column changed\n\t\t\tinterval = this.state.Interval[valueRow];\t//reset Interval for that row to the prior value\n\t\t}\n\t\telse if (stateKey==='Interval') {\t//if a value in the Interval column changed\n\t\t\tsymbol = this.state.Symbol[valueRow];\t//reset Symbol for that row to the prior value\n\t\t}\n\n\t\t// console.log('symbol', symbol, 'interval', interval);\n\n\t\t// console.log('onchange',headerCol, valueRow)\n\n\t\tfetchRealTimeData(symbol)\n\t\t\t.then(data => {\n\t\t\t\tconst lastPrice = data[symbol].lastPrice;\n\t\t\t\t// console.log(lastPrice);\n\n\t\t\t\tprices[valueRow] = lastPrice;\n\n\t\t\t\t// console.log(prices);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tPrice: prices\n\t\t\t\t});\n\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconsole.log('An error occurred during fetching: ' + e.message);\n\t\t  \t});\n\n\n\t\tthis.setState({\n\t\t\t[stateKey]: values\n\t\t});\n\t}\n\n\tonSort = (event) => {\n\t\tconst { sortConfig } = this.state;\n\t\t// console.log('click',event.target.id)\n\t\t\n\t\t// const sortedField = 'Price';\n\t\tconst sortedField = event.target.id;\n\t\t// const list = [...this.state[sortedField]]\n\n\t\tlet direction = 1;\n\n\t\tif(sortConfig.sortedField === sortedField) {\n\t\t\tif(sortConfig.direction === direction) {\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\telse if(sortConfig.direction === -1) {\n\t\t\t\t// direction = 0;\n\t\t\t}\n\t\t}\n\n\t\tconst sortedData = sortTable(this.state, sortedField, direction);\n\t\t// console.log(sortedData.Price);\n\t\t// console.log(sortedData,'sortedData');\n\n\t\tthis.setState({\n\t\t\tsortConfig: {\n\t\t\t\tsortedField,\n\t\t\t\tdirection\n\t\t\t}\n\t\t}\n\t\t,\n\t\t// ()` => console.log(this.state)\n\t\t);\n\n\t\t\n\n\t\tthis.setState(sortedData);\n\n\t}\n\n\trender() {\n\n\t\tconst { header } = this.state;\n\t\t// console.log('rend',this.state)\n\n\t\treturn(\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div className='space'\n\t\t\t\t\tonClick={this.onSort}\n\t\t\t\t></div>\n\t\t\t\t\n\t\t\t\t<div id=\"grid-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\theader.map((value, colIdx) => (\n\t\t\t\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\tonSort={this.onSort}\n\t\t\t\t\t\t\t\t\tid={value}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t</ScreenHeader>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t\t\t\t\t\theader.map((type, colIdx) => this.state[type].map((rowVal,rowIdx) => {\n\t\t\t\t\t\t\t\tif(selectTbl[type] !== undefined) {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tconsole.log(type)\n\t\t\t\t\t\t\t\t\t// if(colIdx === 0 && rowIdx === 0) console.log('dd pass',this.state[header[colIdx]][rowIdx])\n\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Dropdown \n\t\t\t\t\t\t\t\t\t\t\toptions={selectTbl[type]}\n\t\t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t\t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{rowVal}\n\t\t\t\t\t\t\t\t\t\t</Dropdown> \n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<ValueCell \n\t\t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t\t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{rowVal}\n\t\t\t\t\t\t\t\t\t\t</ValueCell>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}