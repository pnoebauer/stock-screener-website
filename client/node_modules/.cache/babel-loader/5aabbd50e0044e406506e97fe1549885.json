{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx\";\n// import React from 'react';\n// import GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n// const GenerateGrid = ( { onChange, header, ...props} ) => {\n//     const { Symbol } = props;\n//     // console.log('map',header, Symbol)\n//     return (\n//         <>\n//         {   \n//             //loop through the header items (columns) and afterwards loop through stored values (rows)  \n//             header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => (\n//                         <GenerateGridCell\n//                             type={type}\n//                             gridLocation={{rowIdx, colIdx}}\n//                             onChange={onChange}\n//                             key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n//                             // id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n//                         >\n//                             {rowVal}\n//                         </GenerateGridCell>\n//                     )\n//                 )\n//             ) \n//         }\n//         </>\n//     )\n// }\n// export default GenerateGrid;\nimport React from 'react';\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GenerateGrid = ({\n  onChange,\n  header,\n  ...props\n}) => {\n  const {\n    Symbol\n  } = props; // console.log('map',header, Symbol)\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: // //loop through the header items (columns) and afterwards loop through stored values (rows)  \n    // header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => (\n    //             <GenerateGridCell\n    //                 type={type}\n    //                 gridLocation={{rowIdx, colIdx}}\n    //                 onChange={onChange}\n    //                 key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n    //                 // id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n    //             >\n    //                 {rowVal}\n    //             </GenerateGridCell>\n    //         )\n    //     )\n    // ) \n    //loop through the header items (columns) and afterwards loop through stored values (rows)  \n    props.Symbol.map(rowVal => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rowVal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n};\n\n_c = GenerateGrid;\n\nconst GridRow = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(GenerateGridCell, {\n      type: type,\n      gridLocation: {\n        rowIdx,\n        colIdx\n      },\n      onChange: onChange,\n      children: rowVal\n    }, `${Symbol[rowIdx]}-${type}-${rowIdx}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_c2 = GridRow;\nexport default GenerateGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GenerateGrid\");\n$RefreshReg$(_c2, \"GridRow\");","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx"],"names":["React","GenerateGridCell","GenerateGrid","onChange","header","props","Symbol","map","rowVal","GridRow","type","rowIdx","colIdx"],"mappings":";AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,oDAA7B;;;;AAEA,MAAMC,YAAY,GAAG,CAAE;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoB,KAAGC;AAAvB,CAAF,KAAqC;AAEtD,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAnB,CAFsD,CAGtD;;AACA,sBACI;AAAA,cAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAA,IAAAA,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiBC,MAAM,iBACnB;AAAA,gBACKA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAlBJ,mBADJ;AA6BH,CAjCD;;KAAMN,Y;;AAmCN,MAAMO,OAAO,GAAG,MAAM;AAClB,sBACI;AAAA,2BACI,QAAC,gBAAD;AACI,MAAA,IAAI,EAAEC,IADV;AAEI,MAAA,YAAY,EAAE;AAACC,QAAAA,MAAD;AAASC,QAAAA;AAAT,OAFlB;AAGI,MAAA,QAAQ,EAAET,QAHd;AAAA,gBAOKK;AAPL,OAIU,GAAEF,MAAM,CAACK,MAAD,CAAS,IAAGD,IAAK,IAAGC,MAAO,EAJ7C;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAaH,CAdD;;MAAMF,O;AAgBN,eAAeP,YAAf","sourcesContent":["// import React from 'react';\n\n// import GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n\n// const GenerateGrid = ( { onChange, header, ...props} ) => {\n    \n//     const { Symbol } = props;\n//     // console.log('map',header, Symbol)\n//     return (\n//         <>\n//         {   \n//             //loop through the header items (columns) and afterwards loop through stored values (rows)  \n//             header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => (\n//                         <GenerateGridCell\n//                             type={type}\n//                             gridLocation={{rowIdx, colIdx}}\n//                             onChange={onChange}\n//                             key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n//                             // id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n//                         >\n//                             {rowVal}\n//                         </GenerateGridCell>\n//                     )\n//                 )\n//             ) \n//         }\n//         </>\n//     )\n// }\n\n// export default GenerateGrid;\n\n\nimport React from 'react';\n\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n\nconst GenerateGrid = ( { onChange, header, ...props} ) => {\n    \n    const { Symbol } = props;\n    // console.log('map',header, Symbol)\n    return (\n        <>\n        {   \n            // //loop through the header items (columns) and afterwards loop through stored values (rows)  \n            // header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => (\n            //             <GenerateGridCell\n            //                 type={type}\n            //                 gridLocation={{rowIdx, colIdx}}\n            //                 onChange={onChange}\n            //                 key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n            //                 // id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n            //             >\n            //                 {rowVal}\n            //             </GenerateGridCell>\n            //         )\n            //     )\n            // ) \n\n            //loop through the header items (columns) and afterwards loop through stored values (rows)  \n            props.Symbol.map(rowVal => (\n                <div>\n                    {rowVal}\n                </div>\n            )\n            )\n            \n        }\n        </>\n    )\n}\n\nconst GridRow = () => {\n    return (\n        <>\n            <GenerateGridCell\n                type={type}\n                gridLocation={{rowIdx, colIdx}}\n                onChange={onChange}\n                key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n                // id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n            >\n                {rowVal}\n            </GenerateGridCell>\n        </>\n    )\n}\n\nexport default GenerateGrid;"]},"metadata":{},"sourceType":"module"}