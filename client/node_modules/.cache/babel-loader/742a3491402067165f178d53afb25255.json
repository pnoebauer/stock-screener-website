{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/indicator-selector/indicator-selector.component.jsx\";\nimport React from 'react';\nimport IndicatorsList from '../indicators-list/indicators-list.component';\nimport './indicator-selector.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass IndicatorSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onToggle = event => {\n      const updatedIndex = event.target.id;\n      const className = event.target.className;\n      const indicatorListName = className.replace('selected', '').trim(); // console.log(indicatorListName);\n      // console.log(className.includes('available-indicators'))\n      //  METHOD 1 ------------------\n      // this.setState(prevState => {\n      //     const updatedIndicator = {\n      //         ...prevState.availableIndicators[updatedIndex],\n      //         selected: newSelect\n      //     };\n      //     return {\n      //         availableIndicators: Object.assign([], prevState.availableIndicators, {[updatedIndex]: updatedIndicator})\n      //     }\n      // });\n      // const updatedIndicator = {\n      //     ...prevState.availableIndicators[updatedIndex],\n      //     selected: newSelect\n      // };\n      // return {\n      //     availableIndicators: Object.assign([], prevState.availableIndicators, {[updatedIndex]: updatedIndicator})\n      // }\n      //  METHOD 2 ------------------\n\n      this.setState(prevState => {\n        const updated = prevState[indicatorListName].map((value, index) => {\n          if (updatedIndex == index) {\n            return { ...value,\n              selected: !value.selected\n            };\n          } else {\n            return { ...value\n            };\n          }\n        });\n        return {\n          [indicatorListName]: updated\n        };\n      });\n    };\n\n    this.handleClick = event => {\n      const type = event.target.className;\n      const moveFrom = type === 'add' ? 'availableIndicators' : 'usedIndicators';\n      const moveTo = type === 'add' ? 'usedIndicators' : 'availableIndicators';\n      this.setState(prevState => {\n        return {\n          [moveFrom]: prevState[moveFrom].filter(item => !item.selected).map(item => ({ ...item,\n            selected: false\n          })),\n          [moveTo]: [...prevState[moveTo], ...prevState[moveFrom].filter(item => item.selected).map(item => ({ ...item,\n            selected: false\n          }))]\n        };\n      });\n    };\n\n    this.handleOk = () => {\n      // console.log(this.state)\n      this.unSelect();\n      this.props.handleConfirm(this.state);\n    };\n\n    this.handleCancel = () => {\n      const { ...priorState\n      } = this.props;\n      console.log(this.state, priorState);\n      this.unSelect(); // this.props.handleConfirm(this.state);\n    };\n\n    this.state = {\n      availableIndicators: this.props.availableIndicators,\n      usedIndicators: this.props.usedIndicators\n    };\n  }\n\n  unSelect() {\n    this.setState({\n      availableIndicators: this.state.availableIndicators.map(item => ({ ...item,\n        selected: false\n      })),\n      usedIndicators: this.state.usedIndicators.map(item => ({ ...item,\n        selected: false\n      }))\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"indicator-selector\",\n      children: [/*#__PURE__*/_jsxDEV(IndicatorsList, {\n        displayedIndicators: this.state.availableIndicators,\n        onToggle: this.onToggle,\n        className: \"availableIndicators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-remove\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleClick,\n          className: \"add\",\n          children: \"ADD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleClick,\n          className: \"remove\",\n          children: \"REMOVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IndicatorsList, {\n        displayedIndicators: this.state.usedIndicators,\n        onToggle: this.onToggle,\n        className: \"usedIndicators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ok-cancel\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel\",\n          onClick: this.handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ok\",\n          onClick: this.handleOk,\n          children: \"Okay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default IndicatorSelector;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/indicator-selector/indicator-selector.component.jsx"],"names":["React","IndicatorsList","IndicatorSelector","Component","constructor","props","onToggle","event","updatedIndex","target","id","className","indicatorListName","replace","trim","setState","prevState","updated","map","value","index","selected","handleClick","type","moveFrom","moveTo","filter","item","handleOk","unSelect","handleConfirm","state","handleCancel","priorState","console","log","availableIndicators","usedIndicators","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport IndicatorsList from '../indicators-list/indicators-list.component';\n\nimport './indicator-selector.styles.css';\n\nclass IndicatorSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            availableIndicators: this.props.availableIndicators,\n            usedIndicators: this.props.usedIndicators\n        }\n    }\n\n    onToggle = event => {\n        const updatedIndex = event.target.id;\n        const className = event.target.className;\n        const indicatorListName = className.replace('selected', '').trim()\n\n        // console.log(indicatorListName);\n\n        // console.log(className.includes('available-indicators'))\n\n        //  METHOD 1 ------------------\n        // this.setState(prevState => {\n        //     const updatedIndicator = {\n        //         ...prevState.availableIndicators[updatedIndex],\n        //         selected: newSelect\n        //     };\n        //     return {\n        //         availableIndicators: Object.assign([], prevState.availableIndicators, {[updatedIndex]: updatedIndicator})\n        //     }\n        // });\n        // const updatedIndicator = {\n        //     ...prevState.availableIndicators[updatedIndex],\n        //     selected: newSelect\n        // };\n        // return {\n        //     availableIndicators: Object.assign([], prevState.availableIndicators, {[updatedIndex]: updatedIndicator})\n        // }\n        //  METHOD 2 ------------------\n        this.setState(prevState => {\n            const updated = prevState[indicatorListName].map((value, index) => {\n                if(updatedIndex==index) {\n                    return {\n                        ...value,\n                        selected: !value.selected\n                    };\n                }\n                else {\n                    return {\n                        ...value\n                    };\n                }\n            });\n            return {\n                [indicatorListName]: updated\n            }\n        });\n    }\n\n    // onAdd = e => {\n    //     this.setState(prevState => {            \n    //         return {\n    //             availableIndicators: \n    //                 prevState.availableIndicators.filter(item => !item.selected),\n    //             usedIndicators: \n    //             [...prevState.usedIndicators,\n    //                 ...prevState.availableIndicators.filter(item => item.selected).map(item => ({...item, selected: false}))\n    //             ]\n    //         }\n    //     })\n    // }\n\n    // onRemove = e => {\n    //     this.setState(prevState => {            \n    //         return {\n    //             usedIndicators: \n    //                 prevState.usedIndicators.filter(item => !item.selected),\n    //             availableIndicators: \n    //             [...prevState.availableIndicators,\n    //                 ...prevState.usedIndicators.filter(item => item.selected).map(item => ({...item, selected: false}))\n    //             ]\n    //         }\n    //     })\n    // }\n\n    handleClick = event => {\n        const type = event.target.className;\n        \n        const moveFrom = type === 'add' ? 'availableIndicators' : 'usedIndicators';\n        const moveTo = type === 'add' ? 'usedIndicators' : 'availableIndicators';\n\n        this.setState(prevState => {            \n            return {\n                [moveFrom]: \n                    prevState[moveFrom].filter(item => !item.selected).map(item => ({...item, selected: false})),\n                [moveTo]: \n                    [\n                        ...prevState[moveTo],\n                        ...prevState[moveFrom].filter(item => item.selected).map(item => ({...item, selected: false}))\n                    ]\n            }\n        })\n    }\n    \n    unSelect() {\n        this.setState({\n            availableIndicators: this.state.availableIndicators.map(item => ({...item, selected: false})),\n            usedIndicators: this.state.usedIndicators.map(item => ({...item, selected: false}))\n        })\n    }\n\n    handleOk = () => {\n        // console.log(this.state)\n        this.unSelect();\n        this.props.handleConfirm(this.state);\n    }\n\n    handleCancel = () => {\n        const { ...priorState } = this.props;\n        console.log(this.state, priorState)\n\n        this.unSelect();\n        // this.props.handleConfirm(this.state);\n    }\n\n    render() {\n        return (\n            <div className=\"indicator-selector\">\n                \n                <IndicatorsList \n                    displayedIndicators={this.state.availableIndicators}\n                    onToggle={this.onToggle}\n                    className=\"availableIndicators\"\n                />\n                \n                <div className=\"add-remove\">\n                    <button \n                        onClick={this.handleClick}\n                        className='add'\n                    >\n                        ADD\n                    </button>\n                    <button \n                        onClick={this.handleClick}\n                        className='remove'\n                    >\n                        REMOVE\n                    </button>\n                </div>\n                \n                <IndicatorsList \n                    displayedIndicators={this.state.usedIndicators}\n                    onToggle={this.onToggle}\n                    className=\"usedIndicators\"\n                />\n\n                <div className=\"ok-cancel\">\n                    <button \n                        className=\"cancel\"\n                        onClick={this.handleCancel}\n                    >\n                        Cancel\n                    </button>\n                    <button \n                        className=\"ok\"\n                        onClick={this.handleOk}\n                    >\n                        Okay\n                    </button>  \n                </div>\n                \n                \n            </div>\n            \n        )\n    }\n}\n\nexport default IndicatorSelector;"]},"metadata":{},"sourceType":"module"}