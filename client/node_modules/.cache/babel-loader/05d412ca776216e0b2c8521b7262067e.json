{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx\";\nimport React from 'react';\nimport './dropdown.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      defaultValue\n    } = props;\n    super(props);\n\n    this.handleClickOutside = event => {\n      const {\n        options\n      } = this.props;\n\n      if (this.container.current && !this.container.current.contains(event.target)) {\n        // console.log(options.includes(shownValue),'click')\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          const insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : prevState.selectedValue; // use below to leave the typed in value even if value does not exist in options list\n          // const insertValue = prevState.shownValue;\n          // console.log(insertValue,'insertValue',options.includes(prevState.shownValue))\n\n          return {\n            showList: false,\n            displayedOptions: options,\n            selectedValue: insertValue,\n            shownValue: insertValue\n          };\n        }, () => {\n          // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n          if (this.selectionDisplay.current.innerText !== this.state.selectedValue) {\n            this.selectionDisplay.current.innerText = this.state.selectedValue;\n          } // ()=>console.log('click out',this.state.selectedValue)\n\n        });\n      }\n    };\n\n    this.handleDisplay = () => {\n      const {\n        options\n      } = this.props;\n      const {\n        shownValue\n      } = this.state; // comment if statement to allow closing the list even if value does not exist in options list\n\n      if (options.includes(shownValue)) {\n        this.setState(prevState => {\n          // console.log(prevState,'prevState')\n          // console.log(this.container.current,'this.container.current')\n          // console.log(this.state.displayedOptions, 'this.state.displayedOptions')\n          if (!prevState.showList) {\n            // console.log('add listener')\n            document.addEventListener('mousedown', this.handleClickOutside);\n          } else if (prevState.showList) {\n            // console.log('remove listener')\n            document.removeEventListener('mousedown', this.handleClickOutside);\n          }\n\n          return {\n            showList: !prevState.showList\n          };\n        });\n      }\n    };\n\n    this.handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(this.selectionDisplay.current.innerText,'this.selectionDisplay')\n      // console.log(event.target.innerText, this.state.shownValue)\n      const {\n        onChange\n      } = this.props;\n      this.setState({\n        selectedValue: event.target.innerText,\n        showList: false,\n        shownValue: event.target.innerText,\n        displayedOptions: this.props.options\n      }, () => {\n        // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n        if (this.selectionDisplay.current.innerText !== event.target.innerText) {\n          this.selectionDisplay.current.innerText = event.target.innerText;\n        }\n\n        onChange(this.state.selectedValue, headerCol, valueRow);\n      });\n    };\n\n    this.onTextChange = event => {\n      console.log('onTextChange'); // console.log(event.currentTarget.textContent,'text change')\n\n      const {\n        options\n      } = this.props;\n      const currentInput = event.currentTarget.textContent; // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0; //filter all with the same start\n      }); // console.log(newFilteredOptions);\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      } // ,\n      // ()=>console.log(this.state)\n      );\n    };\n\n    this.onKeyDown = event => {\n      const {\n        activeItem,\n        displayedOptions\n      } = this.state; // console.log(event.keyCode);//,activeItem,filteredSuggestions.length);\n      //40 down, 38 up, 13 enter\n\n      switch (event.keyCode) {\n        // down\n        case 40:\n          if (activeItem < displayedOptions.length - 1) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              };\n            } // , () => console.log('down',this.state.activeItem, displayedOptions[this.state.activeItem])\n            );\n          }\n\n          break;\n        // up\n\n        case 38:\n          if (activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              };\n            } // , () => console.log('up',this.state.activeItem)\n            );\n          }\n\n          break;\n        // enter\n\n        case 13:\n          this.setState(prevState => {\n            // console.log('enter active',displayedOptions[prevState.activeItem])\n            return {\n              activeItem: 0,\n              selectedValue: displayedOptions[prevState.activeItem],\n              showList: false,\n              shownValue: displayedOptions[prevState.activeItem],\n              displayedOptions: this.props.options\n            };\n          } // , () => console.log('enter',this.state.activeItem)\n          );\n          break;\n\n        default:\n      }\n    };\n\n    this.container = /*#__PURE__*/React.createRef();\n    this.selectionDisplay = /*#__PURE__*/React.createRef();\n    this.state = {\n      selectedValue: defaultValue,\n      showList: false,\n      displayedOptions: this.props.options,\n      shownValue: defaultValue,\n      activeItem: 0\n    };\n  } //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      style\n    } = this.props;\n    const {\n      selectedValue,\n      showList,\n      displayedOptions,\n      shownValue\n    } = this.state; // console.log(displayedOptions.length)\n\n    let number = displayedOptions.length;\n    number = number > 5 ? 5 : number < 1 ? 1 : number;\n    const dropDownHeight = `${number * 100}%`;\n    const liHeight = `calc(${1 / number * 100}% - 1px)`;\n    console.log(showList, 'showList');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'dropdown-container',\n      style: {\n        gridRow: style.gridRow,\n        gridColumn: style.gridColumn\n      },\n      ref: this.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: showList ? 'selected-value active' : 'selected-value',\n        onClick: this.handleDisplay,\n        onKeyDown: this.onKeyDown,\n        contentEditable: \"true\",\n        suppressContentEditableWarning: true,\n        onInput: this.onTextChange,\n        ref: this.selectionDisplay,\n        children: selectedValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"options-list\",\n        style: {\n          height: dropDownHeight\n        },\n        children: displayedOptions.map((value, index) => {\n          // exclude the selectedValue from dropdown list options \n          // except if the shownValue is different to the selectedValue (happens if user types into search field)\n          if (value !== selectedValue || shownValue !== selectedValue) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                height: liHeight\n              },\n              className: \"dropdown-option\",\n              value: value,\n              onClick: e => this.handleOptionClick(e, style.gridColumn - 1, style.gridRow - 2),\n              children: value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 21\n            }, this);\n          } else return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","defaultValue","handleClickOutside","event","options","container","current","contains","target","setState","prevState","insertValue","includes","shownValue","selectedValue","showList","displayedOptions","selectionDisplay","innerText","state","handleDisplay","document","addEventListener","removeEventListener","handleOptionClick","headerCol","valueRow","onChange","onTextChange","console","log","currentInput","currentTarget","textContent","newFilteredOptions","filter","item","toLowerCase","indexOf","activeItem","onKeyDown","keyCode","length","createRef","render","style","number","dropDownHeight","liHeight","gridRow","gridColumn","height","map","value","index","e"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport './dropdown.styles.css';\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n      const {defaultValue} = props;\n      super(props);\n      this.container = React.createRef();\n      this.selectionDisplay = React.createRef();\n\n      this.state = {\n          selectedValue: defaultValue,\n          showList: false,\n          displayedOptions: this.props.options,\n          shownValue: defaultValue,\n          activeItem: 0\n      };\n    }\n\n    //if click happens outside the dropdown area close the list\n    handleClickOutside = event => {\n      const { options } = this.props;\n\n      if(this.container.current && !this.container.current.contains(event.target)) {\n        \n        // console.log(options.includes(shownValue),'click')\n\n        this.setState(prevState => {\n          // if the typed in value exists in the options list then use it,\n          // if it does not exist replace it with the value that was in the cell before typing in\n          const insertValue = options.includes(prevState.shownValue) ? prevState.shownValue : prevState.selectedValue;\n          \n          // use below to leave the typed in value even if value does not exist in options list\n          // const insertValue = prevState.shownValue;\n          \n          // console.log(insertValue,'insertValue',options.includes(prevState.shownValue))\n          return {\n            showList: false,\n            displayedOptions: options,\n            selectedValue: insertValue,\n            shownValue: insertValue\n          }\n        }\n          , \n          () => {\n            // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n              if(this.selectionDisplay.current.innerText !== this.state.selectedValue) {\n                this.selectionDisplay.current.innerText = this.state.selectedValue;\n              }\n        // ()=>console.log('click out',this.state.selectedValue)\n          }\n        );\n      }\n\n    }\n\n    //handle the displaying of the list (if currently shown, then hide and vice versa)\n    handleDisplay = () => {\n      const { options } = this.props;\n      const { shownValue } = this.state;\n\n      // comment if statement to allow closing the list even if value does not exist in options list\n      if(options.includes(shownValue)) { \n        this.setState(prevState => {\n          // console.log(prevState,'prevState')\n          // console.log(this.container.current,'this.container.current')\n          // console.log(this.state.displayedOptions, 'this.state.displayedOptions')\n\n          if(!prevState.showList) {\n            // console.log('add listener')\n            document.addEventListener('mousedown', this.handleClickOutside);\n          }\n          else if(prevState.showList) {\n            // console.log('remove listener')\n            document.removeEventListener('mousedown', this.handleClickOutside);\n          }\n\n          return { showList: !prevState.showList }\n        });\n        \n      }\n\n    };\n\n    // set text based on click in displayed list\n    handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(this.selectionDisplay.current.innerText,'this.selectionDisplay')\n      // console.log(event.target.innerText, this.state.shownValue)\n      const { onChange } = this.props;\n\n      this.setState({\n        selectedValue: event.target.innerText,\n        showList: false,\n        shownValue: event.target.innerText,\n        displayedOptions: this.props.options\n      }\n        , \n        () => {\n          // console.log(this.selectionDisplay.current.innerText,event.target.innerText)\n            if(this.selectionDisplay.current.innerText !== event.target.innerText) {\n              this.selectionDisplay.current.innerText = event.target.innerText;\n            }\n            onChange(this.state.selectedValue, headerCol, valueRow);\n        }      \n      \n      );\n\n    };\n\n    onTextChange = event => {\n      console.log('onTextChange')\n      // console.log(event.currentTarget.textContent,'text change')\n      const { options } = this.props;\n\n      const currentInput = event.currentTarget.textContent;\n      // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0 //filter all with the same start\n      });\n\n      // console.log(newFilteredOptions);\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput,\n        activeItem: 0\n      }\n      // ,\n      // ()=>console.log(this.state)\n      )\n    }\n\n    onKeyDown = (event) => {\n      const { activeItem, displayedOptions } = this.state;\n      // console.log(event.keyCode);//,activeItem,filteredSuggestions.length);\n      //40 down, 38 up, 13 enter\n    \n      switch (event.keyCode) {\n        // down\n        case 40:\n          if(activeItem < (displayedOptions.length-1)) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem + 1\n              }\n            }\n            // , () => console.log('down',this.state.activeItem, displayedOptions[this.state.activeItem])\n            );\n              \n          } \n          break;\n        // up\n        case 38:\n          if(activeItem > 0) {\n            this.setState(prevState => {\n              return {\n                activeItem: prevState.activeItem - 1\n              }\n            }\n            // , () => console.log('up',this.state.activeItem)\n            );\n              \n          } \n          break;\n        // enter\n        case 13:\n          this.setState(prevState => {\n            // console.log('enter active',displayedOptions[prevState.activeItem])\n            return {\n              activeItem: 0,\n              selectedValue: displayedOptions[prevState.activeItem],\n              showList: false,\n              shownValue: displayedOptions[prevState.activeItem],\n              displayedOptions: this.props.options\n            }\n          }\n          // , () => console.log('enter',this.state.activeItem)\n          );\n          break;\n    \n        default:\n      }\n    \n    }\n    \n\n  \n    render() {\n      const { style } = this.props;\n      const { selectedValue, showList, displayedOptions, shownValue } = this.state;\n      \n      // console.log(displayedOptions.length)\n      \n      let number = displayedOptions.length;\n      number = number > 5 ? 5 : number < 1 ? 1 : number;\n      \n      const dropDownHeight = `${number*100}%`;\n      const liHeight = `calc(${1/number*100}% - 1px)`;\n\n      console.log(showList,'showList')\n      return (\n        <div \n          className={'dropdown-container'}\n          style={{ \n            gridRow: style.gridRow,\n            gridColumn: style.gridColumn,\n          }}\n          ref = {this.container}\n        >\n          <div \n            className={showList ? 'selected-value active' : 'selected-value'}\n            onClick={this.handleDisplay}  \n            onKeyDown={this.onKeyDown}\n            contentEditable='true'\n            suppressContentEditableWarning={true}\n            onInput={this.onTextChange}\n            ref = {this.selectionDisplay}\n          >\n            {selectedValue}\n          </div>\n\n            {showList && (<ul className='options-list' style={{height: dropDownHeight}}>\n              {displayedOptions.map((value, index) => {\n                // exclude the selectedValue from dropdown list options \n                // except if the shownValue is different to the selectedValue (happens if user types into search field)\n                if(value !== selectedValue || shownValue !== selectedValue) {\n                  return(\n                    <li \n                      style={{height: liHeight}}\n                      className='dropdown-option'\n                      value={value} \n                      key={index}\n                      onClick={e => this.handleOptionClick(e, style.gridColumn-1, style.gridRow-2)}\n                    >\n                      {value}\n                    </li>\n                  )}\n                  else return null;\n              })}\n            </ul>)}\n        </div>\n      );\n    }\n  }\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}