{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\nconst headerConst = ['Symbol', 'Interval', 'Price'];\nconst selectTbl = {\n  Symbol: SYMBOLS,\n  Interval: INTERVALS\n};\n\nconst fetchRealTimeData = async symbol => {\n  const params = {\n    apikey,\n    symbol\n  };\n  const queryExt = new URLSearchParams(params).toString();\n  const queryString = urlRealTime.concat('?', queryExt);\n  const response = await fetch(queryString);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  const data = await response.json();\n  return data;\n};\n\nconst sortTable = list => {\n  // const list = [...this.state[sortedField]]\n  console.log(list); // temporary array holds objects with position and sort-value\n\n  const mapped = list.map((value, index) => {\n    if (typeof value === 'string') value = value.toLowerCase();\n    return {\n      index,\n      value\n    };\n  });\n  console.log(mapped); // sorting the mapped array containing the reduced values\n\n  mapped.sort(function (a, b) {\n    if (a.value > b.value) {\n      return 1;\n    }\n\n    if (a.value < b.value) {\n      return -1;\n    }\n\n    return 0;\n  });\n  console.log(mapped); // container for the resulting order\n\n  const result = mapped.map(element => list[element.index]);\n  console.log(result);\n}; // // the array to be sorted\n// var list = ['Delta', 'alpha', 'CHARLIE', 'bravo'];\n// // temporary array holds objects with position and sort-value\n// var mapped = list.map(function(el, i) {\n//   return { index: i, value: el.toLowerCase() };\n// })\n// // sorting the mapped array containing the reduced values\n// mapped.sort(function(a, b) {\n//   if (a.value > b.value) {\n//     return 1;\n//   }\n//   if (a.value < b.value) {\n//     return -1;\n//   }\n//   return 0;\n// });\n// // container for the resulting order\n// var result = mapped.map(function(el){\n//   return list[el.index];\n// });\n\n\nclass RadarScreen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const stateKey = this.state.header[headerCol];\n      const values = [...this.state[stateKey]];\n      const prices = [...this.state.Price];\n      values[valueRow] = updatedValue; // console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\n      let symbol = updatedValue,\n          interval = updatedValue;\n\n      if (stateKey === 'Symbol') {\n        interval = this.state.Interval[valueRow];\n      } else if (stateKey === 'Interval') {\n        symbol = this.state.Symbol[valueRow];\n      } // console.log('symbol', symbol, 'interval', interval);\n\n\n      fetchRealTimeData(symbol).then(data => {\n        const lastPrice = data[symbol].lastPrice; // console.log(lastPrice);\n\n        prices[valueRow] = lastPrice; // console.log(prices);\n\n        this.setState({\n          Price: prices\n        });\n      }).catch(e => {\n        console.log('An error occurred during fetching: ' + e.message);\n      });\n      this.setState({\n        [stateKey]: values\n      });\n    };\n\n    this.state = {\n      header: headerConst,\n      Symbol: SP500.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      Price: Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      Symbol\n    } = this.state;\n    fetchRealTimeData(Symbol).then(data => {\n      const prices = Symbol.map((symbolName, index) => {\n        return data[symbolName].lastPrice;\n      }); // console.log(prices);\n\n      this.setState({\n        Price: prices\n      } // () => console.log(this.state)\n      );\n    });\n  }\n\n  render() {\n    const {\n      header\n    } = this.state;\n    const sortedField = 'Price';\n    const list = [...this.state[sortedField]];\n    sortTable(list); // console.log(this.state);\n    // const priceArr = [...this.state.Price]\n    // priceArr.sort(function(a, b) {\n    // \treturn a - b;\n    //   })\n    // console.log(priceArr)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        children: [header.map((value, colIdx) => /*#__PURE__*/_jsxDEV(ScreenHeader, {\n          gridColumn: colIdx + 1,\n          children: value\n        }, colIdx.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 9\n        }, this)), //loop through the header items (columns) and afterwards loop through stored values (rows)  \n        header.map((value, colIdx) => this.state[value].map((rowVal, rowIdx) => {\n          if (selectTbl[header[colIdx]] !== undefined) {\n            return /*#__PURE__*/_jsxDEV(Dropdown, {\n              options: selectTbl[header[colIdx]],\n              defaultValue: this.state[header[colIdx]][rowIdx],\n              gridRow: rowIdx + 2,\n              gridColumn: colIdx + 1,\n              onChange: this.onChange\n            }, colIdx.toString() + rowIdx.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 11\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(ValueCell, {\n              gridRow: rowIdx + 2,\n              gridColumn: colIdx + 1,\n              children: rowVal\n            }, colIdx.toString() + rowIdx.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 11\n            }, this);\n          }\n        }))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","Dropdown","ValueCell","SYMBOLS","INTERVALS","SP500","urlRealTime","apikey","headerConst","selectTbl","Symbol","Interval","fetchRealTimeData","symbol","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","data","json","sortTable","list","console","log","mapped","map","value","index","toLowerCase","sort","a","b","result","element","RadarScreen","PureComponent","constructor","props","onChange","updatedValue","headerCol","valueRow","stateKey","state","header","values","prices","Price","interval","then","lastPrice","setState","catch","e","slice","Array","fill","componentDidMount","symbolName","render","sortedField","colIdx","rowVal","rowIdx","undefined"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AAEA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,KAA7B,QAA0C,wBAA1C;AAEA,OAAO,0BAAP;;AAEA,MAAMC,WAAW,GAAG,mDAApB;AACA,MAAMC,MAAM,GAAG,kCAAf;AAEA,MAAMC,WAAW,GAAG,CAAC,QAAD,EAAW,UAAX,EAAuB,OAAvB,CAApB;AAEA,MAAMC,SAAS,GAAG;AACjBC,EAAAA,MAAM,EAAEP,OADS;AAEjBQ,EAAAA,QAAQ,EAAEP;AAFO,CAAlB;;AAKA,MAAMQ,iBAAiB,GAAG,MAAOC,MAAP,IAAkB;AAC3C,QAAMC,MAAM,GAAG;AAACP,IAAAA,MAAD;AAASM,IAAAA;AAAT,GAAf;AAEA,QAAME,QAAQ,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,QAA5B,EAAjB;AACA,QAAMC,WAAW,GAAGZ,WAAW,CAACa,MAAZ,CAAmB,GAAnB,EAAwBJ,QAAxB,CAApB;AAEA,QAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAD,CAA5B;;AAEA,MAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AACjB,UAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,UAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACA;;AAED,QAAMG,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;AAEA,SAAOD,IAAP;AACA,CAhBD;;AAmBA,MAAME,SAAS,GAAIC,IAAD,IAAU;AAC3B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAH2B,CAK3B;;AACA,QAAMG,MAAM,GAAGH,IAAI,CAACI,GAAL,CAAS,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzC,QAAG,OAAOD,KAAP,KAAiB,QAApB,EAA8BA,KAAK,GAAGA,KAAK,CAACE,WAAN,EAAR;AAE9B,WAAO;AACJD,MAAAA,KADI;AAEJD,MAAAA;AAFI,KAAP;AAIC,GAPa,CAAf;AAUAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ,EAhB2B,CAkB3B;;AACAA,EAAAA,MAAM,CAACK,IAAP,CAAY,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,QAAID,CAAC,CAACJ,KAAF,GAAUK,CAAC,CAACL,KAAhB,EAAuB;AACtB,aAAO,CAAP;AACA;;AACD,QAAII,CAAC,CAACJ,KAAF,GAAUK,CAAC,CAACL,KAAhB,EAAuB;AACtB,aAAO,CAAC,CAAR;AACA;;AACD,WAAO,CAAP;AACA,GARD;AAUAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ,EA7B2B,CA+B3B;;AACA,QAAMQ,MAAM,GAAGR,MAAM,CAACC,GAAP,CAAWQ,OAAO,IAAIZ,IAAI,CAACY,OAAO,CAACN,KAAT,CAA1B,CAAf;AAEAL,EAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACA,CAnCD,C,CAoCA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAGA,MAAME,WAAN,SAA0B3C,KAAK,CAAC4C,aAAhC,CAA8C;AAC7CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SA4BnBC,QA5BmB,GA4BR,CAACC,YAAD,EAAeC,SAAf,EAA0BC,QAA1B,KAAuC;AAEjD,YAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,MAAX,CAAkBJ,SAAlB,CAAjB;AACA,YAAMK,MAAM,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWD,QAAX,CAAJ,CAAf;AACA,YAAMI,MAAM,GAAG,CAAC,GAAG,KAAKH,KAAL,CAAWI,KAAf,CAAf;AAEAF,MAAAA,MAAM,CAACJ,QAAD,CAAN,GAAmBF,YAAnB,CANiD,CAQjD;;AAEA,UAAIlC,MAAM,GAAGkC,YAAb;AAAA,UAA2BS,QAAQ,GAAGT,YAAtC;;AACA,UAAIG,QAAQ,KAAG,QAAf,EAAyB;AACxBM,QAAAA,QAAQ,GAAG,KAAKL,KAAL,CAAWxC,QAAX,CAAoBsC,QAApB,CAAX;AACA,OAFD,MAGK,IAAIC,QAAQ,KAAG,UAAf,EAA0B;AAC9BrC,QAAAA,MAAM,GAAG,KAAKsC,KAAL,CAAWzC,MAAX,CAAkBuC,QAAlB,CAAT;AACA,OAhBgD,CAkBjD;;;AAEArC,MAAAA,iBAAiB,CAACC,MAAD,CAAjB,CACE4C,IADF,CACO/B,IAAI,IAAI;AACb,cAAMgC,SAAS,GAAGhC,IAAI,CAACb,MAAD,CAAJ,CAAa6C,SAA/B,CADa,CAEb;;AAEAJ,QAAAA,MAAM,CAACL,QAAD,CAAN,GAAmBS,SAAnB,CAJa,CAMb;;AAEA,aAAKC,QAAL,CAAc;AACbJ,UAAAA,KAAK,EAAED;AADM,SAAd;AAIA,OAbF,EAcEM,KAdF,CAcQC,CAAC,IAAI;AACX/B,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwC8B,CAAC,CAACtC,OAAtD;AACE,OAhBJ;AAmBA,WAAKoC,QAAL,CAAc;AACb,SAACT,QAAD,GAAYG;AADC,OAAd;AAGA,KAtEkB;;AAElB,SAAKF,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAE5C,WADI;AAEZE,MAAAA,MAAM,EAAEL,KAAK,CAACyD,KAAN,CAAY,CAAZ,EAAc,CAAd,CAFI;AAGZnD,MAAAA,QAAQ,EAAEoD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc5D,SAAS,CAAC,CAAD,CAAvB,CAHE;AAIZmD,MAAAA,KAAK,EAAEQ,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,CAAd;AAJK,KAAb;AAMA;;AAEDC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEvD,MAAAA;AAAF,QAAa,KAAKyC,KAAxB;AAEAvC,IAAAA,iBAAiB,CAACF,MAAD,CAAjB,CACE+C,IADF,CACO/B,IAAI,IAAI;AACb,YAAM4B,MAAM,GAAG5C,MAAM,CAACuB,GAAP,CAAW,CAACiC,UAAD,EAAa/B,KAAb,KAAuB;AAChD,eAAOT,IAAI,CAACwC,UAAD,CAAJ,CAAiBR,SAAxB;AACA,OAFc,CAAf,CADa,CAIb;;AACA,WAAKC,QAAL,CAAc;AACbJ,QAAAA,KAAK,EAAED;AADM,OAAd,CAIA;AAJA;AAMA,KAZF;AAaA;;AA8CDa,EAAAA,MAAM,GAAG;AAER,UAAM;AAAEf,MAAAA;AAAF,QAAa,KAAKD,KAAxB;AAEA,UAAMiB,WAAW,GAAG,OAApB;AACA,UAAMvC,IAAI,GAAG,CAAC,GAAG,KAAKsB,KAAL,CAAWiB,WAAX,CAAJ,CAAb;AAEAxC,IAAAA,SAAS,CAACC,IAAD,CAAT,CAPQ,CASR;AAEA;AACA;AACA;AACA;AAEA;;AAEA,wBACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADD,eAGC;AAAK,QAAA,EAAE,EAAC,gBAAR;AAAA,mBAEEuB,MAAM,CAACnB,GAAP,CAAW,CAACC,KAAD,EAAQmC,MAAR,kBACT,QAAC,YAAD;AAEC,UAAA,UAAU,EAAEA,MAAM,GAAC,CAFpB;AAAA,oBAIEnC;AAJF,WACMmC,MAAM,CAACpD,QAAP,EADN;AAAA;AAAA;AAAA;AAAA,gBADF,CAFF,EAcE;AACAmC,QAAAA,MAAM,CAACnB,GAAP,CAAW,CAACC,KAAD,EAAQmC,MAAR,KAAmB,KAAKlB,KAAL,CAAWjB,KAAX,EAAkBD,GAAlB,CAAsB,CAACqC,MAAD,EAAQC,MAAR,KAAmB;AACrE,cAAG9D,SAAS,CAAC2C,MAAM,CAACiB,MAAD,CAAP,CAAT,KAA8BG,SAAjC,EAA4C;AAC3C,gCACC,QAAC,QAAD;AACC,cAAA,OAAO,EAAE/D,SAAS,CAAC2C,MAAM,CAACiB,MAAD,CAAP,CADnB;AAEC,cAAA,YAAY,EAAE,KAAKlB,KAAL,CAAWC,MAAM,CAACiB,MAAD,CAAjB,EAA2BE,MAA3B,CAFf;AAGC,cAAA,OAAO,EAAEA,MAAM,GAAC,CAHjB;AAIC,cAAA,UAAU,EAAEF,MAAM,GAAC,CAJpB;AAMC,cAAA,QAAQ,EAAE,KAAKvB;AANhB,eAKMuB,MAAM,CAACpD,QAAP,KAAkBsD,MAAM,CAACtD,QAAP,EALxB;AAAA;AAAA;AAAA;AAAA,oBADD;AAUA,WAXD,MAYK;AACJ,gCACC,QAAC,SAAD;AAEC,cAAA,OAAO,EAAEsD,MAAM,GAAC,CAFjB;AAGC,cAAA,UAAU,EAAEF,MAAM,GAAC,CAHpB;AAAA,wBAKEC;AALF,eACMD,MAAM,CAACpD,QAAP,KAAkBsD,MAAM,CAACtD,QAAP,EADxB;AAAA;AAAA;AAAA;AAAA,oBADD;AASA;AACD,SAxB4B,CAA9B,CAfF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAkDA;;AA7I4C;;AAiJ9C,eAAeyB,WAAf","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport Dropdown from '../dropdown/dropdown.component';\nimport ValueCell from '../screen-value-cell/screen-value-cell.component';\n\nimport { SYMBOLS, INTERVALS, SP500 } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\nconst urlRealTime = 'https://api.tdameritrade.com/v1/marketdata/quotes';\nconst apikey = 'APRKWXOAWALLEUMXPY1FCGHQZ5HDJGKD';\n\nconst headerConst = ['Symbol', 'Interval', 'Price']\n\nconst selectTbl = {\n\tSymbol: SYMBOLS,\n\tInterval: INTERVALS\n}\n\nconst fetchRealTimeData = async (symbol) => {\n\tconst params = {apikey, symbol};\n\t\n\tconst queryExt = new URLSearchParams(params).toString();\n\tconst queryString = urlRealTime.concat('?', queryExt);\n\n\tconst response = await fetch(queryString);\n\n\tif (!response.ok) {\n\t\tconst message = `An error has occured: ${response.status}`;\n\t\tthrow new Error(message);\n\t}\n\n\tconst data = await response.json();\n\n\treturn data;\n}\n\n\nconst sortTable = (list) => {\n\t// const list = [...this.state[sortedField]]\n\t\n\tconsole.log(list);\n\n\t// temporary array holds objects with position and sort-value\n\tconst mapped = list.map((value, index) => {\n\t\tif(typeof(value) ==='string') value = value.toLowerCase();\n\t\t  \n\t\treturn { \n\t\t\t  index, \n\t\t\t  value \n\t\t\t};\n\t\t}\n\t);\n\n\tconsole.log(mapped);\n\n\t// sorting the mapped array containing the reduced values\n\tmapped.sort(function(a, b) {\n\t\tif (a.value > b.value) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (a.value < b.value) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\tconsole.log(mapped);\n\n\t// container for the resulting order\n\tconst result = mapped.map(element => list[element.index]);\n\n\tconsole.log(result)\n}\n// // the array to be sorted\n// var list = ['Delta', 'alpha', 'CHARLIE', 'bravo'];\n\n// // temporary array holds objects with position and sort-value\n// var mapped = list.map(function(el, i) {\n//   return { index: i, value: el.toLowerCase() };\n// })\n\n// // sorting the mapped array containing the reduced values\n// mapped.sort(function(a, b) {\n//   if (a.value > b.value) {\n//     return 1;\n//   }\n//   if (a.value < b.value) {\n//     return -1;\n//   }\n//   return 0;\n// });\n\n// // container for the resulting order\n// var result = mapped.map(function(el){\n//   return list[el.index];\n// });\n\n\nclass RadarScreen extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\theader: headerConst,\n\t\t\tSymbol: SP500.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\tPrice: Array(8).fill(0)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol } = this.state;\n\n\t\tfetchRealTimeData(Symbol)\n\t\t\t.then(data => {\n\t\t\t\tconst prices = Symbol.map((symbolName, index) => {\n\t\t\t\t\treturn data[symbolName].lastPrice;\n\t\t\t\t})\n\t\t\t\t// console.log(prices);\n\t\t\t\tthis.setState({\n\t\t\t\t\tPrice: prices\n\t\t\t\t}\n\t\t\t\t,\n\t\t\t\t// () => console.log(this.state)\n\t\t\t\t);\n\t\t\t})\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst stateKey = this.state.header[headerCol];\n\t\tconst values = [...this.state[stateKey]];\n\t\tconst prices = [...this.state.Price];\n\n\t\tvalues[valueRow] = updatedValue;\n\n\t\t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\t\t\n\t\tlet symbol = updatedValue, interval = updatedValue;\n\t\tif (stateKey==='Symbol') {\n\t\t\tinterval = this.state.Interval[valueRow];\n\t\t}\n\t\telse if (stateKey==='Interval'){\n\t\t\tsymbol = this.state.Symbol[valueRow];\n\t\t}\n\n\t\t// console.log('symbol', symbol, 'interval', interval);\n\n\t\tfetchRealTimeData(symbol)\n\t\t\t.then(data => {\n\t\t\t\tconst lastPrice = data[symbol].lastPrice;\n\t\t\t\t// console.log(lastPrice);\n\n\t\t\t\tprices[valueRow] = lastPrice;\n\n\t\t\t\t// console.log(prices);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tPrice: prices\n\t\t\t\t});\n\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconsole.log('An error occurred during fetching: ' + e.message);\n\t\t  \t});\n\n\n\t\tthis.setState({\n\t\t\t[stateKey]: values\n\t\t});\n\t}\n\n\trender() {\n\n\t\tconst { header } = this.state;\n\n\t\tconst sortedField = 'Price';\n\t\tconst list = [...this.state[sortedField]]\n\n\t\tsortTable(list);\n\n\t\t// console.log(this.state);\n\n\t\t// const priceArr = [...this.state.Price]\n\t\t// priceArr.sort(function(a, b) {\n\t\t// \treturn a - b;\n\t\t//   })\n\n\t\t// console.log(priceArr)\n\n\t\treturn(\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div className='space'></div>\n\t\t\t\t\n\t\t\t\t<div id=\"grid-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\theader.map((value, colIdx) => (\n\t\t\t\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t</ScreenHeader>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t\t\t\t\t\theader.map((value, colIdx) => this.state[value].map((rowVal,rowIdx) => {\n\t\t\t\t\t\t\t\tif(selectTbl[header[colIdx]] !== undefined) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Dropdown \n\t\t\t\t\t\t\t\t\t\t\toptions={selectTbl[header[colIdx]]}\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={this.state[header[colIdx]][rowIdx]}\n\t\t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t\t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\t\t\t\t/> \n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<ValueCell \n\t\t\t\t\t\t\t\t\t\t\tkey={colIdx.toString()+rowIdx.toString()} \n\t\t\t\t\t\t\t\t\t\t\tgridRow={rowIdx+2}\n\t\t\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{rowVal}\n\t\t\t\t\t\t\t\t\t\t</ValueCell>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}