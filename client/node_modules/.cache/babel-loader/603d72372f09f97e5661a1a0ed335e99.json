{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/indicator-selector/indicator-selector.component.jsx\";\nimport React from 'react';\nimport List from '../list/list.component';\nimport './indicator-selector.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass IndicatorSelector extends React.Component {\n  constructor(props) {\n    super(props); // console.log('constructor IndicatorSelector', this.props)\n\n    this.onToggle = event => {\n      const updatedID = event.target.id;\n      const className = event.target.className;\n      const indicatorListName = className.replace('selected', '').trim();\n      this.setState(prevState => {\n        const updated = prevState[indicatorListName].map(value => {\n          if (updatedID === value.id) {\n            return { ...value,\n              selected: !value.selected\n            };\n          } else {\n            return { ...value\n            };\n          }\n        });\n        return {\n          [indicatorListName]: updated\n        };\n      });\n    };\n\n    this.handleClick = event => {\n      const type = event.target.className;\n      const moveFrom = type === 'add' ? 'availableIndicators' : 'usedIndicators';\n      const moveTo = type === 'add' ? 'usedIndicators' : 'availableIndicators';\n      this.setState(prevState => {\n        return {\n          [moveFrom]: prevState[moveFrom].filter(item => !item.selected).map(item => ({ ...item,\n            selected: false\n          })),\n          [moveTo]: [...prevState[moveTo], ...prevState[moveFrom].filter(item => item.selected).map(item => ({ ...item,\n            selected: false\n          }))]\n        };\n      } // () => console.log()\n      );\n    };\n\n    this.handleOk = () => {\n      // console.log(this.state)\n      this.unSelect();\n      this.props.handleOkCancel('ok', this.state);\n    };\n\n    this.handleCancel = () => {\n      const {\n        handleOkCancel,\n        ...priorState\n      } = this.props; // console.log(priorState, this.state)\n\n      const {\n        availableIndicatorsDefault,\n        usedIndicatorsDefault\n      } = priorState;\n      this.setState({\n        availableIndicators: [...this.state.availableIndicators.flatMap(item => []), ...availableIndicatorsDefault],\n        usedIndicators: [...this.state.usedIndicators.flatMap(item => []), ...usedIndicatorsDefault]\n      } // ,\n      // ()=>console.log(this.state,'s')\n      );\n      this.unSelect();\n      this.props.handleOkCancel('cancel');\n    };\n\n    this.state = {\n      availableIndicators: this.props.availableIndicatorsDefault,\n      usedIndicators: this.props.usedIndicatorsDefault\n    };\n  }\n\n  unSelect() {\n    this.setState({\n      availableIndicators: this.state.availableIndicators.map(item => ({ ...item,\n        selected: false\n      })),\n      usedIndicators: this.state.usedIndicators.map(item => ({ ...item,\n        selected: false\n      }))\n    });\n  }\n\n  render() {\n    // console.log(this.props.usedIndicatorsDefault, this.state.usedIndicators)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"indicator-selector\",\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        displayedItems: this.state.availableIndicators,\n        onToggle: this.onToggle,\n        className: \"availableIndicators\",\n        headerName: \"Available Indicators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-remove\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleClick,\n          className: \"add\",\n          children: \"ADD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleClick,\n          className: \"remove\",\n          children: \"REMOVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        displayedItems: this.state.usedIndicators,\n        onToggle: this.onToggle,\n        className: \"usedIndicators\",\n        headerName: \"Used Indicators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ok-cancel\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel\",\n          onClick: this.handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ok\",\n          onClick: this.handleOk,\n          children: \"Okay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default IndicatorSelector;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/indicator-selector/indicator-selector.component.jsx"],"names":["React","List","IndicatorSelector","Component","constructor","props","onToggle","event","updatedID","target","id","className","indicatorListName","replace","trim","setState","prevState","updated","map","value","selected","handleClick","type","moveFrom","moveTo","filter","item","handleOk","unSelect","handleOkCancel","state","handleCancel","priorState","availableIndicatorsDefault","usedIndicatorsDefault","availableIndicators","flatMap","usedIndicators","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport List from '../list/list.component';\n\nimport './indicator-selector.styles.css';\n\nclass IndicatorSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        // console.log('constructor IndicatorSelector', this.props)\n        this.state = {\n            availableIndicators: this.props.availableIndicatorsDefault,\n            usedIndicators: this.props.usedIndicatorsDefault\n        }\n    }\n\n    onToggle = event => {\n        const updatedID = event.target.id;\n        const className = event.target.className;\n        const indicatorListName = className.replace('selected', '').trim();\n\n        this.setState(prevState => {\n            const updated = prevState[indicatorListName].map(value => {\n                if(updatedID === value.id) {\n                    return {\n                        ...value,\n                        selected: !value.selected\n                    };\n                }\n                else {\n                    return {\n                        ...value\n                    };\n                }\n            });\n            return {\n                [indicatorListName]: updated\n            }\n        });\n    }\n\n    handleClick = event => {\n        const type = event.target.className;\n        \n        const moveFrom = type === 'add' ? 'availableIndicators' : 'usedIndicators';\n        const moveTo = type === 'add' ? 'usedIndicators' : 'availableIndicators';\n\n        this.setState(prevState => {            \n            return {\n                [moveFrom]: \n                    prevState[moveFrom].filter(item => !item.selected).map(item => ({...item, selected: false})),\n                [moveTo]: \n                    [\n                        ...prevState[moveTo],\n                        ...prevState[moveFrom].filter(item => item.selected).map(item => ({...item, selected: false}))\n                    ]\n            }\n        }\n        ,\n        // () => console.log()\n        )\n    }\n    \n    unSelect() {\n        this.setState({\n            availableIndicators: this.state.availableIndicators.map(item => ({...item, selected: false})),\n            usedIndicators: this.state.usedIndicators.map(item => ({...item, selected: false}))\n        })\n    }\n\n    handleOk = () => {\n        // console.log(this.state)\n        this.unSelect();\n        this.props.handleOkCancel('ok',this.state);\n    }\n\n    handleCancel = () => {\n        const { handleOkCancel, ...priorState} = this.props;\n\n        // console.log(priorState, this.state)\n        const { availableIndicatorsDefault, usedIndicatorsDefault } = priorState;\n\n        this.setState({\n            availableIndicators: [\n                ...this.state.availableIndicators.flatMap(item => ([])),\n                ...availableIndicatorsDefault\n            ],\n            usedIndicators: [\n                ...this.state.usedIndicators.flatMap(item => ([])),\n                ...usedIndicatorsDefault\n            ]\n        }\n            // ,\n            // ()=>console.log(this.state,'s')\n        );\n\n        this.unSelect();\n        this.props.handleOkCancel('cancel');\n    }\n\n    render() {\n            // console.log(this.props.usedIndicatorsDefault, this.state.usedIndicators)\n        return (\n            <div className=\"indicator-selector\">\n                \n                <List \n                    displayedItems={this.state.availableIndicators}\n                    onToggle={this.onToggle}\n                    className=\"availableIndicators\"\n                    headerName='Available Indicators'\n                />\n                \n                <div className=\"add-remove\">\n                    <button \n                        onClick={this.handleClick}\n                        className='add'\n                    >\n                        ADD\n                    </button>\n                    <button \n                        onClick={this.handleClick}\n                        className='remove'\n                    >\n                        REMOVE\n                    </button>\n                </div>\n                \n                <List \n                    displayedItems={this.state.usedIndicators}\n                    onToggle={this.onToggle}\n                    className=\"usedIndicators\"\n                    headerName='Used Indicators'\n                />\n\n                <div className=\"ok-cancel\">\n                    <button \n                        className=\"cancel\"\n                        onClick={this.handleCancel}\n                    >\n                        Cancel\n                    </button>\n                    <button \n                        className=\"ok\"\n                        onClick={this.handleOk}\n                    >\n                        Okay\n                    </button>  \n                </div>\n                \n                \n            </div>\n            \n        )\n    }\n}\n\nexport default IndicatorSelector;"]},"metadata":{},"sourceType":"module"}