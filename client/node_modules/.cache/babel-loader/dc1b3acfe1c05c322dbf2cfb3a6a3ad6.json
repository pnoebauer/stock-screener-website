{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withFetch.jsx\";\nimport React from 'react';\nimport { SYMBOLS } from '../../assets/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withFetch(WrappedComponent, urlRealTime, apikey) {\n  class WithFetch extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.fetchRealTimeData = async (urlRealTime, symbol) => {\n        // console.log('fetch')\n        this.setState({\n          data: [],\n          isLoading: true,\n          isError: false\n        });\n        const params = {\n          apikey,\n          symbol\n        };\n        const queryExt = new URLSearchParams(params).toString();\n        const queryString = urlRealTime.concat('?', queryExt);\n\n        try {\n          const response = await fetch(queryString);\n\n          if (!response.ok) {\n            const message = `An error has occured: ${response.status}`;\n            throw new Error(message);\n          }\n\n          const data = await response.json(); // console.log(data)\n\n          this.setState({\n            data,\n            isLoading: false,\n            isError: false\n          });\n          const size = new TextEncoder().encode(JSON.stringify(data)).length;\n          const kiloBytes = size / 1024;\n          const megaBytes = kiloBytes / 1024;\n          console.log(megaBytes);\n          return data;\n        } catch (err) {\n          this.setState({\n            isLoading: false,\n            isError: true // or pass the err itself\n\n          });\n        }\n      };\n\n      this.state = {\n        data: [],\n        isLoading: false,\n        isError: false\n      };\n    }\n\n    componentDidMount() {\n      console.log('withFetch mounted');\n\n      if (urlRealTime) {\n        this.fetchRealTimeData(urlRealTime, SYMBOLS.slice(0, 8)); // .then(data => console.log(data,'data'))\n      }\n    }\n\n    render() {\n      const { ...passThroughProps\n      } = this.props;\n      console.log(urlRealTime, 'url', passThroughProps, '...this.props');\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, { ...this.state,\n        ...passThroughProps,\n        getData: this.fetchRealTimeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this);\n    }\n\n  }\n\n  return WithFetch;\n}\n\nexport default withFetch;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withFetch.jsx"],"names":["React","SYMBOLS","withFetch","WrappedComponent","urlRealTime","apikey","WithFetch","Component","constructor","props","fetchRealTimeData","symbol","setState","data","isLoading","isError","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","json","size","TextEncoder","encode","JSON","stringify","length","kiloBytes","megaBytes","console","log","err","state","componentDidMount","slice","render","passThroughProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,wBAAxB;;;AAGA,SAASC,SAAT,CAAmBC,gBAAnB,EAAqCC,WAArC,EAAkDC,MAAlD,EAA0D;AACtD,QAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACpCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;;AADe,WASnBC,iBATmB,GASC,OAAON,WAAP,EAAoBO,MAApB,KAA+B;AAC/C;AAEA,aAAKC,QAAL,CAAc;AACVC,UAAAA,IAAI,EAAE,EADI;AAEVC,UAAAA,SAAS,EAAE,IAFD;AAGVC,UAAAA,OAAO,EAAE;AAHC,SAAd;AAMA,cAAMC,MAAM,GAAG;AAACX,UAAAA,MAAD;AAASM,UAAAA;AAAT,SAAf;AAEA,cAAMM,QAAQ,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,QAA5B,EAAjB;AACA,cAAMC,WAAW,GAAGhB,WAAW,CAACiB,MAAZ,CAAmB,GAAnB,EAAwBJ,QAAxB,CAApB;;AAEI,YAAI;AACA,gBAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAD,CAA5B;;AAEA,cAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AACd,kBAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,kBAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACH;;AAED,gBAAMZ,IAAI,GAAG,MAAMS,QAAQ,CAACM,IAAT,EAAnB,CARA,CASA;;AACA,eAAKhB,QAAL,CAAc;AACVC,YAAAA,IADU;AAEVC,YAAAA,SAAS,EAAE,KAFD;AAGVC,YAAAA,OAAO,EAAE;AAHC,WAAd;AAMA,gBAAMc,IAAI,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBC,IAAI,CAACC,SAAL,CAAepB,IAAf,CAAzB,EAA+CqB,MAA5D;AACA,gBAAMC,SAAS,GAAGN,IAAI,GAAG,IAAzB;AACA,gBAAMO,SAAS,GAAGD,SAAS,GAAG,IAA9B;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAEA,iBAAOvB,IAAP;AAEH,SAvBD,CAwBA,OAAO0B,GAAP,EAAY;AACR,eAAK3B,QAAL,CAAc;AACVE,YAAAA,SAAS,EAAE,KADD;AAEVC,YAAAA,OAAO,EAAE,IAFC,CAEI;;AAFJ,WAAd;AAIH;AAER,OAtDkB;;AAEf,WAAKyB,KAAL,GAAa;AACT3B,QAAAA,IAAI,EAAE,EADG;AAETC,QAAAA,SAAS,EAAE,KAFF;AAGTC,QAAAA,OAAO,EAAE;AAHA,OAAb;AAKH;;AAiDD0B,IAAAA,iBAAiB,GAAG;AAChBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,UAAGlC,WAAH,EAAgB;AACZ,aAAKM,iBAAL,CAAuBN,WAAvB,EAAoCH,OAAO,CAACyC,KAAR,CAAc,CAAd,EAAgB,CAAhB,CAApC,EADY,CAEZ;AACH;AAGJ;;AAEDC,IAAAA,MAAM,GAAG;AACL,YAAM,EAAE,GAAGC;AAAL,UAA0B,KAAKnC,KAArC;AAEA4B,MAAAA,OAAO,CAACC,GAAR,CAAYlC,WAAZ,EAAwB,KAAxB,EAA8BwC,gBAA9B,EAA+C,eAA/C;AACA,0BACI,QAAC,gBAAD,OACQ,KAAKJ,KADb;AAAA,WAEQI,gBAFR;AAGI,QAAA,OAAO,EAAE,KAAKlC;AAHlB;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH;;AA/EmC;;AAiFxC,SAAOJ,SAAP;AACH;;AAGD,eAAeJ,SAAf","sourcesContent":["import React from 'react';\n\nimport { SYMBOLS } from '../../assets/constants';\n\n\nfunction withFetch(WrappedComponent, urlRealTime, apikey) {\n    class WithFetch extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                data: [],\n                isLoading: false,\n                isError: false\n            };\n        }\n\n        fetchRealTimeData = async (urlRealTime, symbol) => {\n            // console.log('fetch')\n\n            this.setState({\n                data: [],\n                isLoading: true,\n                isError: false\n            });\n        \n            const params = {apikey, symbol};\n            \n            const queryExt = new URLSearchParams(params).toString();\n            const queryString = urlRealTime.concat('?', queryExt);\n            \n                try {\n                    const response = await fetch(queryString);\n                \n                    if (!response.ok) {\n                        const message = `An error has occured: ${response.status}`;\n                        throw new Error(message);\n                    }\n                \n                    const data = await response.json();\n                    // console.log(data)\n                    this.setState({\n                        data,\n                        isLoading: false,\n                        isError: false\n                    });\n\n                    const size = new TextEncoder().encode(JSON.stringify(data)).length\n                    const kiloBytes = size / 1024;\n                    const megaBytes = kiloBytes / 1024;\n                    console.log(megaBytes)\n\n                    return data;\n\n                }\n                catch (err) {\n                    this.setState({\n                        isLoading: false,\n                        isError: true // or pass the err itself\n                    });\n                }\n            \n        }\n\n        componentDidMount() {\n            console.log('withFetch mounted')\n            if(urlRealTime) {\n                this.fetchRealTimeData(urlRealTime, SYMBOLS.slice(0,8))\n                // .then(data => console.log(data,'data'))\n            }\n\n            \n        }\n        \n        render() {\n            const { ...passThroughProps } = this.props;\n\n            console.log(urlRealTime,'url',passThroughProps,'...this.props')\n            return (\n                <WrappedComponent \n                    {...this.state}\n                    {...passThroughProps} \n                    getData={this.fetchRealTimeData}\n                \n                />\n            );\n        }\n    }\n    return WithFetch;\n} \n\n\nexport default withFetch;"]},"metadata":{},"sourceType":"module"}