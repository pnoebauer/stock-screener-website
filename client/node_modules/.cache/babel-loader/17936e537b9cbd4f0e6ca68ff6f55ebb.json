{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withFetch.jsx\";\nimport React from 'react'; // import { SYMBOLS } from '../../assets/constants';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withFetch(WrappedComponent, urlRealTime, apikey) {\n  class WithFetch extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.fetchRealTimeData = async (symbol, indicator) => {\n        this.setState({\n          isLoading: true,\n          isError: false\n        });\n        const params = {\n          apikey,\n          symbol\n        };\n        const queryExt = new URLSearchParams(params).toString();\n        const queryString = urlRealTime.concat('?', queryExt);\n\n        try {\n          const response = await fetch(queryString);\n\n          if (!response.ok) {\n            const message = `An error has occured: ${response.status}`;\n            throw new Error(message);\n          }\n\n          const data = await response.json();\n          console.log(data);\n          const indicatorObject = {};\n          indicator.forEach(indicatorName => {\n            // console.log(indicatorName)\n            return { ...indicatorObject,\n              [indicatorName]: symbol.map(symbolName => {\n                // console.log(data[symbolName][indicatorName],'dagt')\n                return data[symbolName][indicatorName];\n              })\n            };\n          });\n          console.log(indicatorObject, 'indicatorObject');\n          const prices = symbol.map((symbolName, index) => {\n            return data[symbolName][indicator];\n          });\n          this.setState({\n            isLoading: false,\n            isError: false\n          });\n          return prices;\n        } catch (err) {\n          this.setState({\n            isLoading: false,\n            isError: true // or pass the err itself\n\n          });\n        }\n      };\n\n      this.state = {\n        isLoading: false,\n        isError: false\n      };\n    }\n\n    render() {\n      const { ...passThroughProps\n      } = this.props; // console.log(urlRealTime,'url',passThroughProps,'...this.props')\n\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, { ...this.state,\n        ...passThroughProps,\n        fetchRealTimeData: this.fetchRealTimeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this);\n    }\n\n  }\n\n  return WithFetch;\n}\n\nexport default withFetch;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withFetch.jsx"],"names":["React","withFetch","WrappedComponent","urlRealTime","apikey","WithFetch","Component","constructor","props","fetchRealTimeData","symbol","indicator","setState","isLoading","isError","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","data","json","console","log","indicatorObject","forEach","indicatorName","map","symbolName","prices","index","err","state","render","passThroughProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;;;AAGA,SAASC,SAAT,CAAmBC,gBAAnB,EAAqCC,WAArC,EAAkDC,MAAlD,EAA0D;AACtD,QAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AACpCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;;AADe,WAQnBC,iBARmB,GAQC,OAAOC,MAAP,EAAeC,SAAf,KAA6B;AAE7C,aAAKC,QAAL,CAAc;AACVC,UAAAA,SAAS,EAAE,IADD;AAEVC,UAAAA,OAAO,EAAE;AAFC,SAAd;AAKA,cAAMC,MAAM,GAAG;AAACX,UAAAA,MAAD;AAASM,UAAAA;AAAT,SAAf;AAEA,cAAMM,QAAQ,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,QAA5B,EAAjB;AACA,cAAMC,WAAW,GAAGhB,WAAW,CAACiB,MAAZ,CAAmB,GAAnB,EAAwBJ,QAAxB,CAApB;;AAEA,YAAI;AACA,gBAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAD,CAA5B;;AAEA,cAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AACd,kBAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,kBAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACH;;AAED,gBAAMG,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;AAEAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,gBAAMI,eAAe,GAAG,EAAxB;AACApB,UAAAA,SAAS,CAACqB,OAAV,CAAkBC,aAAa,IAAI;AAC/B;AACA,mBAAO,EACH,GAAGF,eADA;AAEH,eAACE,aAAD,GAAiBvB,MAAM,CAACwB,GAAP,CAAWC,UAAU,IAAI;AACtC;AACA,uBAAOR,IAAI,CAACQ,UAAD,CAAJ,CAAiBF,aAAjB,CAAP;AACH,eAHgB;AAFd,aAAP;AAOH,WATD;AAWAJ,UAAAA,OAAO,CAACC,GAAR,CAAYC,eAAZ,EAA4B,iBAA5B;AAEA,gBAAMK,MAAM,GAAG1B,MAAM,CAACwB,GAAP,CAAW,CAACC,UAAD,EAAaE,KAAb,KAAuB;AAC7C,mBAAOV,IAAI,CAACQ,UAAD,CAAJ,CAAiBxB,SAAjB,CAAP;AACH,WAFc,CAAf;AAMA,eAAKC,QAAL,CAAc;AACVC,YAAAA,SAAS,EAAE,KADD;AAEVC,YAAAA,OAAO,EAAE;AAFC,WAAd;AAKA,iBAAOsB,MAAP;AAEH,SAvCD,CAwCA,OAAOE,GAAP,EAAY;AACR,eAAK1B,QAAL,CAAc;AACVC,YAAAA,SAAS,EAAE,KADD;AAEVC,YAAAA,OAAO,EAAE,IAFC,CAEI;;AAFJ,WAAd;AAIH;AAEJ,OAnEkB;;AAEf,WAAKyB,KAAL,GAAa;AACT1B,QAAAA,SAAS,EAAE,KADF;AAETC,QAAAA,OAAO,EAAE;AAFA,OAAb;AAIH;;AA+DD0B,IAAAA,MAAM,GAAG;AACL,YAAM,EAAE,GAAGC;AAAL,UAA0B,KAAKjC,KAArC,CADK,CAGL;;AACA,0BACI,QAAC,gBAAD,OACQ,KAAK+B,KADb;AAAA,WAEQE,gBAFR;AAGI,QAAA,iBAAiB,EAAE,KAAKhC;AAH5B;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;;AAjFmC;;AAmFxC,SAAOJ,SAAP;AACH;;AAGD,eAAeJ,SAAf","sourcesContent":["import React from 'react';\n\n// import { SYMBOLS } from '../../assets/constants';\n\n\nfunction withFetch(WrappedComponent, urlRealTime, apikey) {\n    class WithFetch extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                isLoading: false,\n                isError: false\n            };\n        }\n\n        fetchRealTimeData = async (symbol, indicator) => {\n\n            this.setState({\n                isLoading: true,\n                isError: false\n            });\n        \n            const params = {apikey, symbol};\n            \n            const queryExt = new URLSearchParams(params).toString();\n            const queryString = urlRealTime.concat('?', queryExt);\n            \n            try {\n                const response = await fetch(queryString);\n            \n                if (!response.ok) {\n                    const message = `An error has occured: ${response.status}`;\n                    throw new Error(message);\n                }\n            \n                const data = await response.json();\n\n                console.log(data);\n                \n                const indicatorObject = {};\n                indicator.forEach(indicatorName => {\n                    // console.log(indicatorName)\n                    return {\n                        ...indicatorObject,\n                        [indicatorName]: symbol.map(symbolName => {\n                            // console.log(data[symbolName][indicatorName],'dagt')\n                            return data[symbolName][indicatorName]\n                        })\n                    }\n                })\n\n                console.log(indicatorObject,'indicatorObject');\n                \n                const prices = symbol.map((symbolName, index) => {\n                    return data[symbolName][indicator];\n                });\n\n\n\n                this.setState({\n                    isLoading: false,\n                    isError: false\n                });\n\n                return prices;\n\n            }\n            catch (err) {\n                this.setState({\n                    isLoading: false,\n                    isError: true // or pass the err itself\n                });\n            }\n            \n        }\n        \n        render() {\n            const { ...passThroughProps } = this.props;\n\n            // console.log(urlRealTime,'url',passThroughProps,'...this.props')\n            return (\n                <WrappedComponent \n                    {...this.state}\n                    {...passThroughProps} \n                    fetchRealTimeData={this.fetchRealTimeData}\n                />\n            );\n        }\n    }\n    return WithFetch;\n} \n\n\nexport default withFetch;"]},"metadata":{},"sourceType":"module"}