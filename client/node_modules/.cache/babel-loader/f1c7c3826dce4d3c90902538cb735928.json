{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\nimport './radarscreen.styles.css'; // const headerTitle = ['Symbol', 'Interval', 'Price']\n// generate-grid-cell\n// const dropdownOptions = {\n// \tSymbol: SYMBOLS,\n// \tInterval: INTERVALS\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst permanentHeaders = ['Symbol', 'Interval']; // const indicators = {\n// \t'52WkHigh': '52 Week High',\n// \t'52WkLow': '52 Week Low',\n// \taskPrice: 'Ask Price',\n// \taskSize: 'Ask Size',\n// \tassetType: 'Asset Type',\n// \tbidPrice: 'Bid Price',\n// \tbidSize: 'Bid Size',\n// \tclosePrice: 'Close Price',\n// \tdivAmount: 'Dividend Amount',\n// \tdivDate: 'Dividend Date',\n// \tdivYield: 'Dividend Yield',\n// \texchangeName: 'Exchange',\n// \thighPrice: 'High Price',\n// \tlastPrice: 'Last Price',\n// \tlastSize: 'Last Size',\n// \tlowPrice: 'Low Price',\n// \tmark: 'Mark',\n// \tmarkChangeInDouble: 'Mark Change',\n// \tmarkPercentChangeInDouble: 'Mark Change (%)',\n// \tnAV: 'Net Asset Value',\n// \tnetChange: 'Net Change',\n// \tnetPercentChangeInDouble: 'Net Change (%)',\n// \topenPrice: 'Open Price',\n// \tpeRatio: 'PE Ratio',\n// \ttotalVolume: 'Volume',\n// \tvolatility: 'Volatility'\n// };\n\nconst indicators = {\n  '52 Week High': '52WkHigh',\n  '52 Week Low': '52WkLow',\n  'Ask Price': 'askPrice',\n  'Ask Size': 'askSize',\n  'Asset Type': 'assetType',\n  'Bid Price': 'bidPrice',\n  'Bid Size': 'bidSize',\n  'Close Price': 'closePrice',\n  'Dividend Amount': 'divAmount',\n  'Dividend Date': 'divDate',\n  'Dividend Yield': 'divYield',\n  'Exchange': 'exchangeName',\n  'High Price': 'highPrice',\n  'Last Price': 'lastPrice',\n  'Last Size': 'lastSize',\n  'Low Price': 'lowPrice',\n  'Mark': 'mark',\n  'Mark Change': 'markChangeInDouble',\n  'Mark Change (%)': 'markPercentChangeInDouble',\n  'Net Asset Value': 'nAV',\n  'Net Change': 'netChange',\n  'Net Change (%)': 'netPercentChangeInDouble',\n  'Open Price': 'openPrice',\n  'PE Ratio': 'peRatio',\n  'Volume': 'totalVolume',\n  'Volatility': 'volatility'\n};\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setHeaderTitle = () => {\n      const {\n        header,\n        ...rest\n      } = this.state;\n      const headerTitle = Object.keys(rest); // console.log(headerTitle);\n    };\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const {\n        fetchRealTimeData\n      } = this.props;\n      this.setState(prevState => {\n        const columnName = prevState.header[headerCol]; //which column changed (Symbol, Interval)\n\n        return {\n          [columnName]: Object.assign([], prevState[columnName], {\n            [valueRow]: updatedValue\n          })\n        };\n      }, () => {\n        fetchRealTimeData(new Array(this.state.Symbol[valueRow]), ['lastPrice', 'highPrice']).then(indicatorObject => {\n          Object.keys(indicatorObject).forEach(indicator => this.setState(prevState => ({\n            [indicator]: Object.assign([], prevState[indicator], {\n              [valueRow]: indicatorObject[indicator][0]\n            })\n          })));\n        }); // .then(lastPrice => {\n        // \tthis.setState(prevState => ({\n        // \t\tPrice: Object.assign([], prevState.Price, {[valueRow]: lastPrice[0]})\n        // \t})\n        // )});\n      });\n    };\n\n    this.sortTable = event => {\n      const sortedTable = this.props.onSort(event, this.state);\n      this.setState(sortedTable);\n    };\n\n    this.getClassNameForHeader = name => {\n      const {\n        sortConfig\n      } = this.props;\n\n      if (!sortConfig) {\n        return;\n      }\n\n      const direction = sortConfig.direction === 1 ? 'ascending' : 'descending';\n      return sortConfig.sortedField === name ? direction : undefined;\n    };\n\n    this.handleColumnUpdate = names => {\n      // console.log(names);\n      const headerTitles = [...permanentHeaders, ...names]; // console.log(headerTitles,'headerTitles');\n\n      this.setState({\n        header: headerTitles\n      }); // const stateClone = JSON.parse(JSON.stringify(this.state));\n      // const headerList = stateClone.header;\n      // delete stateClone.header;\n      // headerList.forEach(header => {\n      // \tif(names.includes(header)) {\n      // \t\tconsole.log(header, 'included')\n      // \t}\n      // \telse {\n      // \t\tconsole.log(header, 'not included')\n      // \t}\n      // })\n      // names.forEach((value,index) => {\n      // \t// console.log(value in stateClone, value, 'exists')\n      // \t// console.log(!(value in stateClone), value, 'does not exist')\n      // \tif(stateClone.hasOwnProperty(value)) {\n      // \t\tconsole.log(value, 'hasOwnProperty exists');\n      // \t}\n      // \tif(!stateClone.hasOwnProperty(value)) {\n      // \t\tconsole.log(value, 'hasOwnProperty does not exist');\n      // \t}\n      // })\n    };\n\n    this.state = {\n      // header: headerTitle,\n      Symbol: SYMBOLS.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      'Last Price': Array(8).fill(0)\n    };\n    this.state.header = Object.keys(this.state); // console.log(this.state)\n\n    this.setHeaderTitle();\n  }\n\n  componentDidMount() {\n    const {\n      Symbol,\n      header\n    } = this.state; // console.log('mount')\n    // console.log(header);\n\n    header.map(item => {\n      console.log(item);\n\n      if (!permanentHeaders.includes(item)) {// console.log(item,'not')\n      }\n    });\n    this.props.fetchRealTimeData(Symbol, ['lastPrice', 'highPrice']).then(indicatorObject => {\n      Object.keys(indicatorObject).forEach(indicator => this.setState({\n        [indicator]: indicatorObject[indicator]\n      } // () => console.log(this.state)\n      )); // this.setState({\n      // \t\tPrice: data\n      // \t})\t\n    }); // console.log(this.state)\n  }\n\n  render() {\n    const {\n      header\n    } = this.state;\n    const {\n      sortConfig\n    } = this.props; // console.log('rend',this.state,this.props)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        style: {\n          gridTemplateColumns: `repeat(${header.length}, 1fr) 0`\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScreenHeader, {\n          header: header,\n          sortTable: this.sortTable,\n          sortConfig: sortConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddColumnButton, {\n          style: {\n            gridColumn: `${header.length}+1`\n          },\n          handleColumnUpdate: this.handleColumnUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","AddColumnButton","INTERVALS","SYMBOLS","permanentHeaders","indicators","RadarScreen","Component","constructor","props","setHeaderTitle","header","rest","state","headerTitle","Object","keys","onChange","updatedValue","headerCol","valueRow","fetchRealTimeData","setState","prevState","columnName","assign","Array","Symbol","then","indicatorObject","forEach","indicator","sortTable","event","sortedTable","onSort","getClassNameForHeader","name","sortConfig","direction","sortedField","undefined","handleColumnUpdate","names","headerTitles","slice","Interval","fill","componentDidMount","map","item","console","log","includes","render","gridTemplateColumns","length","gridColumn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ScreenHeader from '../screen-header/screen-header.component';\nimport GenerateGrid from '../generate-grid/generate-grid.component';\nimport AddColumnButton from '../add-column-button/add-column-button.component';\n\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\n// const headerTitle = ['Symbol', 'Interval', 'Price']\n\n// generate-grid-cell\n// const dropdownOptions = {\n// \tSymbol: SYMBOLS,\n// \tInterval: INTERVALS\n// }\nconst permanentHeaders = ['Symbol', 'Interval'];\n\n\n// const indicators = {\n// \t'52WkHigh': '52 Week High',\n// \t'52WkLow': '52 Week Low',\n// \taskPrice: 'Ask Price',\n// \taskSize: 'Ask Size',\n// \tassetType: 'Asset Type',\n// \tbidPrice: 'Bid Price',\n// \tbidSize: 'Bid Size',\n// \tclosePrice: 'Close Price',\n// \tdivAmount: 'Dividend Amount',\n// \tdivDate: 'Dividend Date',\n// \tdivYield: 'Dividend Yield',\n// \texchangeName: 'Exchange',\n// \thighPrice: 'High Price',\n// \tlastPrice: 'Last Price',\n// \tlastSize: 'Last Size',\n// \tlowPrice: 'Low Price',\n// \tmark: 'Mark',\n// \tmarkChangeInDouble: 'Mark Change',\n// \tmarkPercentChangeInDouble: 'Mark Change (%)',\n// \tnAV: 'Net Asset Value',\n// \tnetChange: 'Net Change',\n// \tnetPercentChangeInDouble: 'Net Change (%)',\n// \topenPrice: 'Open Price',\n// \tpeRatio: 'PE Ratio',\n// \ttotalVolume: 'Volume',\n// \tvolatility: 'Volatility'\n// };\n\nconst indicators = {\n\t'52 Week High': '52WkHigh',\n\t'52 Week Low': '52WkLow',\n\t'Ask Price': 'askPrice',\n\t'Ask Size': 'askSize',\n\t'Asset Type': 'assetType',\n\t'Bid Price': 'bidPrice',\n\t'Bid Size': 'bidSize',\n\t'Close Price': 'closePrice',\n\t'Dividend Amount': 'divAmount',\n\t'Dividend Date': 'divDate',\n\t'Dividend Yield': 'divYield',\n\t'Exchange': 'exchangeName',\n\t'High Price': 'highPrice',\n\t'Last Price': 'lastPrice',\n\t'Last Size': 'lastSize',\n\t'Low Price': 'lowPrice',\n\t'Mark': 'mark',\n\t'Mark Change': 'markChangeInDouble',\n\t'Mark Change (%)': 'markPercentChangeInDouble',\n\t'Net Asset Value': 'nAV',\n\t'Net Change': 'netChange',\n\t'Net Change (%)': 'netPercentChangeInDouble',\n\t'Open Price': 'openPrice',\n\t'PE Ratio': 'peRatio',\n\t'Volume': 'totalVolume',\n\t'Volatility': 'volatility' \n};\n\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t// header: headerTitle,\n\t\t\tSymbol: SYMBOLS.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\t'Last Price': Array(8).fill(0)\n\t\t}\n\n\t\tthis.state.header = Object.keys(this.state);\n\n\t\t// console.log(this.state)\n\t\tthis.setHeaderTitle();\n\t}\n\n\tsetHeaderTitle = () => {\n\t\tconst { header, ...rest } = this.state;\n\t\tconst headerTitle = Object.keys(rest);\n\t\t// console.log(headerTitle);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol, header } = this.state;\n\t\t// console.log('mount')\n\t\t// console.log(header);\n\n\t\theader.map(item => {\n\t\t\tconsole.log(item)\n\t\t\tif(!permanentHeaders.includes(item)) {\n\t\t\t\t// console.log(item,'not')\n\t\t\t}\n\t\t})\n\n\t\tthis.props.fetchRealTimeData(Symbol, ['lastPrice', 'highPrice'])\n\t\t.then(indicatorObject => {\n\t\t\tObject.keys(indicatorObject).forEach(indicator => \n\t\t\t\tthis.setState({\n\t\t\t\t\t[indicator]: indicatorObject[indicator]\n\t\t\t\t}\n\t\t\t\t,\n\t\t\t\t// () => console.log(this.state)\n\t\t\t\t))\n\t\t\t// this.setState({\n\t\t\t// \t\tPrice: data\n\t\t\t// \t})\t\n\t\t});\n\n\t\t// console.log(this.state)\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\n\t\tconst {fetchRealTimeData} = this.props;\n\t\tthis.setState(prevState => {\n\t\t\tconst columnName = prevState.header[headerCol];\t//which column changed (Symbol, Interval)\n\t\t\treturn {\n\t\t\t\t[columnName]: Object.assign([], prevState[columnName], {[valueRow]: updatedValue})\n\t\t\t}\n\t\t}\n\t\t,\n\t\t() => {\n\t\t\tfetchRealTimeData(new Array(this.state.Symbol[valueRow]), ['lastPrice', 'highPrice'])\n\t\t\t.then(indicatorObject => {\n\t\t\t\tObject.keys(indicatorObject).forEach(indicator => \n\t\t\t\t\tthis.setState(prevState => ({\n\t\t\t\t\t\t\t[indicator]: Object.assign([], prevState[indicator], {[valueRow]: indicatorObject[indicator][0]})\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t});\n\t\t\t// .then(lastPrice => {\n\t\t\t// \tthis.setState(prevState => ({\n\t\t\t// \t\tPrice: Object.assign([], prevState.Price, {[valueRow]: lastPrice[0]})\n\t\t\t// \t})\n\t\t\t// )});\n\t\t})\n\t}\n\n\tsortTable = (event) => {\n\t\tconst sortedTable = this.props.onSort(event, this.state);\n\t\tthis.setState(sortedTable);\n\t}\n\n\tgetClassNameForHeader = name => {\n\t\tconst { sortConfig } = this.props;\n\t\tif (!sortConfig) {\n\t\t\treturn;\n\t\t}\n\t\tconst direction = sortConfig.direction === 1 ? 'ascending' : 'descending'; \n\t\treturn sortConfig.sortedField === name ? direction : undefined;\n\t};\n\n\thandleColumnUpdate = names => {\n\t\t// console.log(names);\n\n\t\tconst headerTitles = [...permanentHeaders, ...names];\n\n\t\t// console.log(headerTitles,'headerTitles');\n\n\t\tthis.setState({\n\t\t\theader: headerTitles\n\t\t});\n\n\t\t// const stateClone = JSON.parse(JSON.stringify(this.state));\n\t\t// const headerList = stateClone.header;\n\t\t// delete stateClone.header;\n\n\t\t// headerList.forEach(header => {\n\t\t// \tif(names.includes(header)) {\n\t\t// \t\tconsole.log(header, 'included')\n\t\t// \t}\n\t\t// \telse {\n\t\t// \t\tconsole.log(header, 'not included')\n\t\t// \t}\n\n\t\t// })\n\n\t\t// names.forEach((value,index) => {\n\t\t// \t// console.log(value in stateClone, value, 'exists')\n\t\t// \t// console.log(!(value in stateClone), value, 'does not exist')\n\t\t// \tif(stateClone.hasOwnProperty(value)) {\n\t\t// \t\tconsole.log(value, 'hasOwnProperty exists');\n\t\t// \t}\n\t\t// \tif(!stateClone.hasOwnProperty(value)) {\n\t\t// \t\tconsole.log(value, 'hasOwnProperty does not exist');\n\t\t// \t}\n\t\t// })\n\n\t}\n\t\n\trender() {\n\t\tconst { header } = this.state;\n\t\tconst { sortConfig } = this.props;\n\t\t// console.log('rend',this.state,this.props)\n\n\t\treturn (\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div id=\"grid-container\" \n\t\t\t\t\tstyle={{gridTemplateColumns: `repeat(${header.length}, 1fr) 0`}}\n\t\t\t\t>\n\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\theader={header}\n\t\t\t\t\t\tsortTable={this.sortTable}\n\t\t\t\t\t\tsortConfig={sortConfig}\n\t\t\t\t\t/>\n\t\t\t\t\t<AddColumnButton \n\t\t\t\t\t\tstyle={{\n                            gridColumn: `${header.length}+1`\n                        }}\n\t\t\t\t\t\thandleColumnUpdate={this.handleColumnUpdate}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* <GenerateGrid \n\t\t\t\t\t\t{...this.state}\n\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t/> */}\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}