{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/indicator-selector/indicator-selector.component.jsx\";\nimport React from 'react';\nimport IndicatorsList from '../indicators-list/indicators-list.component';\nimport './indicator-selector.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass IndicatorSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onToggle = event => {\n      const updatedIndex = event.target.id;\n      const className = event.target.className;\n      const indicatorListName = className.replace('selected', '').trim(); // console.log(indicatorListName);\n      // console.log(className.includes('available-indicators'))\n      //  METHOD 1 ------------------\n      // this.setState(prevState => {\n      //     const updatedIndicator = {\n      //         ...prevState.availableIndicators[updatedIndex],\n      //         selected: newSelect\n      //     };\n      //     return {\n      //         availableIndicators: Object.assign([], prevState.availableIndicators, {[updatedIndex]: updatedIndicator})\n      //     }\n      // });\n      // const updatedIndicator = {\n      //     ...prevState.availableIndicators[updatedIndex],\n      //     selected: newSelect\n      // };\n      // return {\n      //     availableIndicators: Object.assign([], prevState.availableIndicators, {[updatedIndex]: updatedIndicator})\n      // }\n      //  METHOD 2 ------------------\n\n      this.setState(prevState => {\n        const updated = prevState[indicatorListName].map((value, index) => {\n          if (updatedIndex == index) {\n            return { ...value,\n              selected: !value.selected\n            };\n          } else {\n            return { ...value\n            };\n          }\n        });\n        return {\n          [indicatorListName]: updated\n        };\n      });\n    };\n\n    this.onAdd = e => {\n      this.setState(prevState => {\n        // const addedInd = prevState.availableIndicators.filter(item => item.selected).map(item => ({...item, selected: false}));\n        // // console.log(addedInd)\n        // console.log(prevState.usedIndicators,addedInd)\n        // console.log([...prevState.usedIndicators,addedInd])\n        // const a = [...prevState.usedIndicators]\n        // a.push(...addedInd);\n        // console.log(a)\n        console.log(prevState.availableIndicators);\n        console.log([...prevState.usedIndicators, ...prevState.availableIndicators.filter(item => item.selected).map(item => ({ ...item,\n          selected: false\n        }))]);\n        return {\n          availableIndicators: prevState.availableIndicators.filter(item => !item.selected),\n          usedIndicators: [...prevState.usedIndicators, prevState.availableIndicators.filter(item => item.selected).map(item => ({ ...item,\n            selected: false\n          }))]\n        };\n      });\n    };\n\n    this.state = {\n      availableIndicators: [{\n        name: 'SMA',\n        id: 0,\n        selected: false\n      }, {\n        name: 'EMA',\n        id: 1,\n        selected: false\n      }, {\n        name: 'Open',\n        id: 2,\n        selected: true\n      }, {\n        name: 'Close',\n        id: 3,\n        selected: false\n      }],\n      usedIndicators: [],\n      availableIndicatorsSelected: [],\n      usedIndicatorsSelected: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"indicator-selector\",\n      children: [/*#__PURE__*/_jsxDEV(IndicatorsList, {\n        displayedIndicators: this.state.availableIndicators,\n        onToggle: this.onToggle,\n        className: \"availableIndicators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-remove\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onAdd,\n          children: \"ADD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"REMOVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IndicatorsList, {\n        displayedIndicators: this.state.usedIndicators,\n        onToggle: this.onToggle,\n        className: \"usedIndicators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default IndicatorSelector;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/indicator-selector/indicator-selector.component.jsx"],"names":["React","IndicatorsList","IndicatorSelector","Component","constructor","props","onToggle","event","updatedIndex","target","id","className","indicatorListName","replace","trim","setState","prevState","updated","map","value","index","selected","onAdd","e","console","log","availableIndicators","usedIndicators","filter","item","state","name","availableIndicatorsSelected","usedIndicatorsSelected","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport IndicatorsList from '../indicators-list/indicators-list.component';\n\nimport './indicator-selector.styles.css';\n\nclass IndicatorSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            availableIndicators: [\n                {name: 'SMA', id: 0, selected: false}, \n                {name: 'EMA', id: 1, selected: false}, \n                {name: 'Open', id: 2, selected: true},\n                {name: 'Close', id: 3, selected: false}\n            ],\n            usedIndicators: [],\n            availableIndicatorsSelected: [],\n            usedIndicatorsSelected: []\n        }\n    }\n\n    onToggle = event => {\n        const updatedIndex = event.target.id;\n        const className = event.target.className;\n        const indicatorListName = className.replace('selected', '').trim()\n\n        // console.log(indicatorListName);\n\n        // console.log(className.includes('available-indicators'))\n\n        //  METHOD 1 ------------------\n        // this.setState(prevState => {\n        //     const updatedIndicator = {\n        //         ...prevState.availableIndicators[updatedIndex],\n        //         selected: newSelect\n        //     };\n        //     return {\n        //         availableIndicators: Object.assign([], prevState.availableIndicators, {[updatedIndex]: updatedIndicator})\n        //     }\n        // });\n        // const updatedIndicator = {\n        //     ...prevState.availableIndicators[updatedIndex],\n        //     selected: newSelect\n        // };\n        // return {\n        //     availableIndicators: Object.assign([], prevState.availableIndicators, {[updatedIndex]: updatedIndicator})\n        // }\n        //  METHOD 2 ------------------\n        this.setState(prevState => {\n            const updated = prevState[indicatorListName].map((value, index) => {\n                if(updatedIndex==index) {\n                    return {\n                        ...value,\n                        selected: !value.selected\n                    };\n                }\n                else {\n                    return {\n                        ...value\n                    };\n                }\n            });\n            return {\n                [indicatorListName]: updated\n            }\n        });\n    }\n\n    onAdd = e => {\n        this.setState(prevState => {\n            // const addedInd = prevState.availableIndicators.filter(item => item.selected).map(item => ({...item, selected: false}));\n            // // console.log(addedInd)\n            // console.log(prevState.usedIndicators,addedInd)\n\n            // console.log([...prevState.usedIndicators,addedInd])\n            // const a = [...prevState.usedIndicators]\n\n            // a.push(...addedInd);\n            // console.log(a)\n\n            console.log(prevState.availableIndicators)\n            console.log([...prevState.usedIndicators,\n                ...prevState.availableIndicators.filter(item => item.selected).map(item => ({...item, selected: false}))\n            ])\n            \n            return {\n                availableIndicators: \n                    prevState.availableIndicators.filter(item => !item.selected),\n                usedIndicators: \n                [...prevState.usedIndicators,\n                    prevState.availableIndicators.filter(item => item.selected).map(item => ({...item, selected: false}))\n                ]\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"indicator-selector\">\n                <IndicatorsList \n                    displayedIndicators={this.state.availableIndicators}\n                    onToggle={this.onToggle}\n                    className=\"availableIndicators\"\n                />\n                \n                <div className=\"add-remove\">\n                    <button onClick={this.onAdd}>ADD</button>\n                    <button>REMOVE</button>\n                </div>\n                \n                <IndicatorsList \n                    displayedIndicators={this.state.usedIndicators}\n                    onToggle={this.onToggle}\n                    className=\"usedIndicators\"\n                />\n            </div>\n            \n        )\n    }\n}\n\nexport default IndicatorSelector;"]},"metadata":{},"sourceType":"module"}