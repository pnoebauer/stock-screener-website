{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withFetch.jsx\";\nimport React from 'react'; // import { SYMBOLS } from '../../assets/constants';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withFetch(WrappedComponent, urlRealTime, apikey) {\n  class WithFetch extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.fetchRealTimeData = async (symbol, indicator) => {\n        this.setState({\n          isLoading: true,\n          isError: false\n        });\n        const params = {\n          apikey,\n          symbol\n        };\n        const queryExt = new URLSearchParams(params).toString();\n        const queryString = urlRealTime.concat('?', queryExt);\n\n        try {\n          const response = await fetch(queryString);\n\n          if (!response.ok) {\n            const message = `An error has occured: ${response.status}`;\n            throw new Error(message);\n          }\n\n          const data = await response.json(); // console.log(data);\n\n          let indicatorObject = {};\n          indicator.forEach(indicatorName => indicatorObject = { ...indicatorObject,\n            [indicatorName]: symbol.map(symbolName => data[symbolName][indicatorName])\n          });\n          this.setState({\n            isLoading: false,\n            isError: false\n          });\n          return indicatorObject;\n        } catch (err) {\n          this.setState({\n            isLoading: false,\n            isError: true // or pass the err itself\n\n          });\n        }\n      };\n\n      this.state = {\n        isLoading: false,\n        isError: false\n      };\n    }\n\n    render() {\n      const { ...passThroughProps\n      } = this.props; // console.log(urlRealTime,'url',passThroughProps,'...this.props')\n\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, { ...this.state,\n        ...passThroughProps,\n        fetchRealTimeData: this.fetchRealTimeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this);\n    }\n\n  }\n\n  return WithFetch;\n}\n\nexport default withFetch;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/build-screener/withFetch.jsx"],"names":["React","withFetch","WrappedComponent","urlRealTime","apikey","WithFetch","Component","constructor","props","fetchRealTimeData","symbol","indicator","setState","isLoading","isError","params","queryExt","URLSearchParams","toString","queryString","concat","response","fetch","ok","message","status","Error","data","json","indicatorObject","forEach","indicatorName","map","symbolName","err","state","render","passThroughProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;;;AAGA,SAASC,SAAT,CAAmBC,gBAAnB,EAAqCC,WAArC,EAAkDC,MAAlD,EAA0D;AACtD,QAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AACpCC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;;AADe,WAQnBC,iBARmB,GAQC,OAAOC,MAAP,EAAeC,SAAf,KAA6B;AAE7C,aAAKC,QAAL,CAAc;AACVC,UAAAA,SAAS,EAAE,IADD;AAEVC,UAAAA,OAAO,EAAE;AAFC,SAAd;AAKA,cAAMC,MAAM,GAAG;AAACX,UAAAA,MAAD;AAASM,UAAAA;AAAT,SAAf;AAEA,cAAMM,QAAQ,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,QAA5B,EAAjB;AACA,cAAMC,WAAW,GAAGhB,WAAW,CAACiB,MAAZ,CAAmB,GAAnB,EAAwBJ,QAAxB,CAApB;;AAEA,YAAI;AACA,gBAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAD,CAA5B;;AAEA,cAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AACd,kBAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,kBAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACH;;AAED,gBAAMG,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB,CARA,CASA;;AAEA,cAAIC,eAAe,GAAG,EAAtB;AACAlB,UAAAA,SAAS,CAACmB,OAAV,CAAkBC,aAAa,IAAIF,eAAe,GAAG,EAC7C,GAAGA,eAD0C;AAE7C,aAACE,aAAD,GAAiBrB,MAAM,CAACsB,GAAP,CAAWC,UAAU,IAClCN,IAAI,CAACM,UAAD,CAAJ,CAAiBF,aAAjB,CADa;AAF4B,WAArD;AAQA,eAAKnB,QAAL,CAAc;AACVC,YAAAA,SAAS,EAAE,KADD;AAEVC,YAAAA,OAAO,EAAE;AAFC,WAAd;AAKA,iBAAOe,eAAP;AAEH,SA3BD,CA4BA,OAAOK,GAAP,EAAY;AACR,eAAKtB,QAAL,CAAc;AACVC,YAAAA,SAAS,EAAE,KADD;AAEVC,YAAAA,OAAO,EAAE,IAFC,CAEI;;AAFJ,WAAd;AAIH;AAEJ,OAvDkB;;AAEf,WAAKqB,KAAL,GAAa;AACTtB,QAAAA,SAAS,EAAE,KADF;AAETC,QAAAA,OAAO,EAAE;AAFA,OAAb;AAIH;;AAmDDsB,IAAAA,MAAM,GAAG;AACL,YAAM,EAAE,GAAGC;AAAL,UAA0B,KAAK7B,KAArC,CADK,CAGL;;AACA,0BACI,QAAC,gBAAD,OACQ,KAAK2B,KADb;AAAA,WAEQE,gBAFR;AAGI,QAAA,iBAAiB,EAAE,KAAK5B;AAH5B;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;;AArEmC;;AAuExC,SAAOJ,SAAP;AACH;;AAGD,eAAeJ,SAAf","sourcesContent":["import React from 'react';\n\n// import { SYMBOLS } from '../../assets/constants';\n\n\nfunction withFetch(WrappedComponent, urlRealTime, apikey) {\n    class WithFetch extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                isLoading: false,\n                isError: false\n            };\n        }\n\n        fetchRealTimeData = async (symbol, indicator) => {\n\n            this.setState({\n                isLoading: true,\n                isError: false\n            });\n        \n            const params = {apikey, symbol};\n            \n            const queryExt = new URLSearchParams(params).toString();\n            const queryString = urlRealTime.concat('?', queryExt);\n            \n            try {\n                const response = await fetch(queryString);\n            \n                if (!response.ok) {\n                    const message = `An error has occured: ${response.status}`;\n                    throw new Error(message);\n                }\n            \n                const data = await response.json();\n                // console.log(data);\n                \n                let indicatorObject = {};\n                indicator.forEach(indicatorName => indicatorObject = {\n                        ...indicatorObject,\n                        [indicatorName]: symbol.map(symbolName => \n                            data[symbolName][indicatorName]\n                        )\n                    }\n                )\n\n                this.setState({\n                    isLoading: false,\n                    isError: false\n                });\n\n                return indicatorObject;\n\n            }\n            catch (err) {\n                this.setState({\n                    isLoading: false,\n                    isError: true // or pass the err itself\n                });\n            }\n            \n        }\n        \n        render() {\n            const { ...passThroughProps } = this.props;\n\n            // console.log(urlRealTime,'url',passThroughProps,'...this.props')\n            return (\n                <WrappedComponent \n                    {...this.state}\n                    {...passThroughProps} \n                    fetchRealTimeData={this.fetchRealTimeData}\n                />\n            );\n        }\n    }\n    return WithFetch;\n} \n\n\nexport default withFetch;"]},"metadata":{},"sourceType":"module"}