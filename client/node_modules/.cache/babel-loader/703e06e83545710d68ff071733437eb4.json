{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx\";\nimport React from 'react';\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport GenerateGrid from '../generate-screen-grid/generate-screen-grid.component';\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\nimport './radarscreen.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst headerTitle = ['Symbol', 'Interval', 'Price'];\n\nconst sortTable = (state, sortedField, direction) => {\n  const stateClone = JSON.parse(JSON.stringify(state));\n  delete stateClone.header;\n  delete stateClone.sortConfig; // console.log(stateClone,'stateClone orig');\n\n  const list = [...stateClone[sortedField]]; // console.log(list);\n  // temporary array holds objects with position and sort-value\n\n  const mapped = list.map((value, index) => {\n    if (typeof value === 'string') value = value.toLowerCase();\n    return {\n      index,\n      value\n    };\n  }); // console.log(mapped);\n  // sorting the mapped array containing the reduced values\n\n  mapped.sort((a, b) => {\n    if (a.value > b.value) {\n      return direction;\n    }\n\n    if (a.value < b.value) {\n      return -direction;\n    }\n\n    return 0;\n  }); // console.log(mapped);\n  // table headers (Symbol, Interval, Price, ...)\n\n  const columnHeaders = Object.keys(stateClone); // loop over each header and resort its rows based on mapped array\n\n  columnHeaders.forEach(column => {\n    // reorders the current column based on the resorted list (stored in mapped)\n    stateClone[column] = mapped.map(element => stateClone[column][element.index]); // console.log(stateClone[column],'mapped')\n    // console.log(stateClone,'stateClone')\n  }); // console.log(stateClone,'stateClone fin')\n\n  return stateClone;\n};\n\nclass RadarScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (updatedValue, headerCol, valueRow) => {\n      const stateKey = this.state.header[headerCol]; //which column changed (Symbol, Interval)\n\n      const values = [...this.state[stateKey]]; //all values of that column from top to bottom\n\n      const prices = [...this.state.Price]; //all prices\n\n      values[valueRow] = updatedValue; //update that particular cell that changed (i.e. GOOGL to AMZN)\n      // console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\n      let symbol = updatedValue,\n          interval = updatedValue; //set symbol and interval to that new value\n\n      if (stateKey === 'Symbol') {\n        //if a value in the Symbol column changed\n        interval = this.state.Interval[valueRow]; //reset Interval for that row to the prior value\n      } else if (stateKey === 'Interval') {\n        //if a value in the Interval column changed\n        symbol = this.state.Symbol[valueRow]; //reset Symbol for that row to the prior value\n      } // console.log('symbol', symbol, 'interval', interval);\n      // console.log('onchange',headerCol, valueRow)\n\n\n      this.props.fetchRealTimeData(new Array(symbol), 'lastPrice').then(lastPrice => {\n        prices[valueRow] = lastPrice[0];\n        this.setState({\n          Price: prices,\n          [stateKey]: values\n        });\n      });\n    };\n\n    this.onSort = event => {\n      const {\n        sortConfig\n      } = this.state; // console.log('click',event.target.id)\n\n      const sortedField = event.target.id; // const list = [...this.state[sortedField]]\n\n      let direction = 1;\n\n      if (sortConfig.sortedField === sortedField) {\n        if (sortConfig.direction === direction) {\n          direction = -1;\n        }\n      }\n\n      const sortedData = sortTable(this.state, sortedField, direction);\n      this.setState(sortedData);\n      this.setState({\n        sortConfig: {\n          sortedField,\n          direction\n        }\n      });\n    };\n\n    this.state = {\n      header: headerTitle,\n      sortConfig: {},\n      Symbol: SYMBOLS.slice(0, 8),\n      Interval: Array(8).fill(INTERVALS[0]),\n      Price: Array(8).fill(0)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      Symbol\n    } = this.state; // console.log('mount')\n\n    this.props.fetchRealTimeData(Symbol, 'lastPrice').then(data => this.setState({\n      Price: data\n    }));\n  }\n\n  render() {\n    const {\n      header,\n      Symbol\n    } = this.state; // console.log('rend',this.state)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radarscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid-container\",\n        children: [header.map((value, colIdx) => /*#__PURE__*/_jsxDEV(ScreenHeader, {\n          gridColumn: colIdx + 1,\n          onSort: this.onSort,\n          id: value,\n          children: value\n        }, colIdx.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this)), //loop through the header items (columns) and afterwards loop through stored values (rows)  \n        header.map((type, colIdx) => this.state[type].map((rowVal, rowIdx) => /*#__PURE__*/_jsxDEV(GenerateGrid, {\n          type: type,\n          gridLocation: {\n            rowIdx,\n            colIdx\n          },\n          onChange: this.onChange,\n          children: rowVal\n        }, `${Symbol[rowIdx]}-${type}-${rowIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 10\n        }, this)))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RadarScreen;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/radarscreen/radarscreen.component.jsx"],"names":["React","ScreenHeader","GenerateGrid","INTERVALS","SYMBOLS","headerTitle","sortTable","state","sortedField","direction","stateClone","JSON","parse","stringify","header","sortConfig","list","mapped","map","value","index","toLowerCase","sort","a","b","columnHeaders","Object","keys","forEach","column","element","RadarScreen","Component","constructor","props","onChange","updatedValue","headerCol","valueRow","stateKey","values","prices","Price","symbol","interval","Interval","Symbol","fetchRealTimeData","Array","then","lastPrice","setState","onSort","event","target","id","sortedData","slice","fill","componentDidMount","data","render","colIdx","toString","type","rowVal","rowIdx"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScreenHeader from '../screen-heading/screen-heading.component';\nimport GenerateGrid from '../generate-screen-grid/generate-screen-grid.component';\n\nimport { INTERVALS, SYMBOLS } from '../../assets/constants';\n\nimport './radarscreen.styles.css';\n\n\nconst headerTitle = ['Symbol', 'Interval', 'Price']\n\nconst sortTable = (state, sortedField, direction) => {\n\t\n\tconst stateClone = JSON.parse(JSON.stringify(state));\n\tdelete stateClone.header;\n\tdelete stateClone.sortConfig;\n\t\n\t// console.log(stateClone,'stateClone orig');\n\tconst list = [...stateClone[sortedField]];\n\t\n\t// console.log(list);\n\n\t// temporary array holds objects with position and sort-value\n\tconst mapped = list.map((value, index) => {\n\t\tif(typeof(value) ==='string') value = value.toLowerCase();\n\t\t  \n\t\treturn { \n\t\t\t  index, \n\t\t\t  value \n\t\t\t};\n\t\t}\n\t);\n\n\t// console.log(mapped);\n\n\t// sorting the mapped array containing the reduced values\n\tmapped.sort((a, b) => {\n\t\tif (a.value > b.value) {\n\t\t\treturn direction;\n\t\t}\n\t\tif (a.value < b.value) {\n\t\t\treturn -direction;\n\t\t}\n\t\treturn 0;\n\t});\n\n\t// console.log(mapped);\n\t// table headers (Symbol, Interval, Price, ...)\n\tconst columnHeaders = Object.keys(stateClone);\n\n\t// loop over each header and resort its rows based on mapped array\n\tcolumnHeaders.forEach(column => {\n\t\t// reorders the current column based on the resorted list (stored in mapped)\n\t\tstateClone[column] = mapped.map(element => stateClone[column][element.index]);\n\t\t// console.log(stateClone[column],'mapped')\n\t\t// console.log(stateClone,'stateClone')\n\t})\n\n\t// console.log(stateClone,'stateClone fin')\n\n\treturn stateClone;\n}\n\nclass RadarScreen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\theader: headerTitle,\n\t\t\tsortConfig: {},\n\t\t\tSymbol: SYMBOLS.slice(0,8),\n\t\t\tInterval: Array(8).fill(INTERVALS[0]),\n\t\t\tPrice: Array(8).fill(0)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { Symbol } = this.state;\n\t\t// console.log('mount')\n\t\tthis.props.fetchRealTimeData(Symbol, 'lastPrice')\n\t\t.then(data => this.setState({\n\t\t\t\t\tPrice: data\n\t\t\t\t})\t\n\t\t);\n\t}\n\n\tonChange = (updatedValue, headerCol, valueRow) => {\n\t\tconst stateKey = this.state.header[headerCol];\t//which column changed (Symbol, Interval)\n\t\tconst values = [...this.state[stateKey]];\t//all values of that column from top to bottom\n\t\tconst prices = [...this.state.Price];\t//all prices\n\n\t\tvalues[valueRow] = updatedValue;\t//update that particular cell that changed (i.e. GOOGL to AMZN)\n\t\t// console.log('change', stateKey, updatedValue, this.state.header[headerCol], valueRow);\n\t\t\n\t\tlet symbol = updatedValue, interval = updatedValue; //set symbol and interval to that new value\n\t\tif (stateKey==='Symbol') {\t//if a value in the Symbol column changed\n\t\t\tinterval = this.state.Interval[valueRow];\t//reset Interval for that row to the prior value\n\t\t}\n\t\telse if (stateKey==='Interval') {\t//if a value in the Interval column changed\n\t\t\tsymbol = this.state.Symbol[valueRow];\t//reset Symbol for that row to the prior value\n\t\t}\n\t\t// console.log('symbol', symbol, 'interval', interval);\n\t\t// console.log('onchange',headerCol, valueRow)\n\n\t\tthis.props.fetchRealTimeData(new Array(symbol), 'lastPrice')\n\t\t.then(lastPrice => {\n\t\t\tprices[valueRow] = lastPrice[0];\n\t\t\tthis.setState({\n\t\t\t\tPrice: prices,\n\t\t\t\t[stateKey]: values\n\t\t\t});\n\t\t});\n\t}\n\n\tonSort = (event) => {\n\t\tconst { sortConfig } = this.state;\n\t\t// console.log('click',event.target.id)\n\t\t\n\t\tconst sortedField = event.target.id;\n\t\t// const list = [...this.state[sortedField]]\n\n\t\tlet direction = 1;\n\n\t\tif(sortConfig.sortedField === sortedField) {\n\t\t\tif(sortConfig.direction === direction) {\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\n\t\tconst sortedData = sortTable(this.state, sortedField, direction);\n\t\tthis.setState(sortedData);\n\t\n\t\tthis.setState({\n\t\t\tsortConfig: {\n\t\t\t\tsortedField,\n\t\t\t\tdirection\n\t\t\t}\n\t\t});\n\n\t}\n\n\trender() {\n\n\t\tconst { header, Symbol } = this.state;\n\t\t// console.log('rend',this.state)\n\n\t\treturn(\n\t\t\t<div className=\"radarscreen\">\n\t\t\t\t<div id=\"grid-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\theader.map((value, colIdx) => (\n\t\t\t\t\t\t\t\t<ScreenHeader \n\t\t\t\t\t\t\t\t\tkey={colIdx.toString()} \n\t\t\t\t\t\t\t\t\tgridColumn={colIdx+1}\n\t\t\t\t\t\t\t\t\tonSort={this.onSort}\n\t\t\t\t\t\t\t\t\tid={value}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t</ScreenHeader>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\t//loop through the header items (columns) and afterwards loop through stored values (rows)  \n\t\t\t\t\t\theader.map((type, colIdx) => this.state[type].map((rowVal,rowIdx) => (\n\t\t\t\t\t\t\t\t\t<GenerateGrid\n\t\t\t\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\t\t\t\tgridLocation={{rowIdx, colIdx}}\n\t\t\t\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\t\t\t\tkey={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{rowVal}\n\t\t\t\t\t\t\t\t\t</GenerateGrid>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default RadarScreen;"]},"metadata":{},"sourceType":"module"}