{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/add-column-button/add-column-button.component.jsx\";\n// import React from 'react';\n// import IndicatorPopup from '../indicator-popup/indicator-popup.component';\n// class AddColumnButton extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             showPopup: false\n//         }\n//     }\n//     togglePopup = () => {\n//         this.setState(prevState => ({\n//             showPopup: !prevState.showPopup\n//         }))\n//     }\n//     render() {\n//         return (\n//             <>\n//                 <>\n//                     <button \n//                         className=\"add-column-button\" \n//                         style={{\n//                             gridColumn: 4,\n//                             width: '35px'\n//                         }}\n//                         onClick={this.togglePopup}\n//                     >\n//                         +\n//                     </button>\n//                 </>\n//                 {this.state.showPopup ? <IndicatorPopup /> : null}\n//             </>\n//         )\n//     }\n// }\n// export default AddColumnButton;\nimport React from 'react';\nimport Modal from '../modal/modal.component';\nimport IndicatorSelector from '../indicator-selector/indicator-selector.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddColumnButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.show = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.hide = () => {\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleOkCancel = (type, updatedState) => {\n      this.hide();\n      if (type === 'ok') this.setState(updatedState);\n    };\n\n    this.state = {\n      visible: false,\n      //TEMPORARY TO TEST PASSING OF STATE - REMOVE AFTERWARDS\n      availableIndicators: [{\n        name: 'SMA',\n        id: 0,\n        selected: false\n      }, {\n        name: 'EMA',\n        id: 1,\n        selected: false\n      }, {\n        name: 'Open',\n        id: 2,\n        selected: true\n      }, {\n        name: 'Close',\n        id: 3,\n        selected: false\n      }],\n      usedIndicators: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.show,\n        className: \"add-column-button\",\n        style: {\n          gridColumn: 4,\n          width: '55px'\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        visible: this.state.visible,\n        onClose: this.hide,\n        width: 60,\n        height: 50,\n        measure: '%',\n        showCloseButton: false,\n        closeOnEsc: false,\n        closeMaskOnClick: false,\n        children: /*#__PURE__*/_jsxDEV(IndicatorSelector, {\n          handleOkCancel: this.handleOkCancel,\n          availableIndicators: this.state.availableIndicators,\n          usedIndicators: this.state.usedIndicators\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default AddColumnButton;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/add-column-button/add-column-button.component.jsx"],"names":["React","Modal","IndicatorSelector","AddColumnButton","Component","constructor","props","show","setState","visible","hide","handleOkCancel","type","updatedState","state","availableIndicators","name","id","selected","usedIndicators","render","gridColumn","width"],"mappings":";AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AAEA,OAAOC,iBAAP,MAA8B,oDAA9B;;;;AAGA,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAA8C;AAE1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAenBC,IAfmB,GAeZ,MAAM;AACT,WAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KAjBkB;;AAAA,SAmBnBC,IAnBmB,GAmBZ,MAAM;AACT,WAAKF,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KArBkB;;AAAA,SAwBnBE,cAxBmB,GAwBF,CAACC,IAAD,EAAOC,YAAP,KAAwB;AACrC,WAAKH,IAAL;AACA,UAAGE,IAAI,KAAK,IAAZ,EAAkB,KAAKJ,QAAL,CAAcK,YAAd;AACrB,KA3BkB;;AAEf,SAAKC,KAAL,GAAa;AACTL,MAAAA,OAAO,EAAE,KADA;AAET;AACAM,MAAAA,mBAAmB,EAAE,CACjB;AAACC,QAAAA,IAAI,EAAE,KAAP;AAAcC,QAAAA,EAAE,EAAE,CAAlB;AAAqBC,QAAAA,QAAQ,EAAE;AAA/B,OADiB,EAEjB;AAACF,QAAAA,IAAI,EAAE,KAAP;AAAcC,QAAAA,EAAE,EAAE,CAAlB;AAAqBC,QAAAA,QAAQ,EAAE;AAA/B,OAFiB,EAGjB;AAACF,QAAAA,IAAI,EAAE,MAAP;AAAeC,QAAAA,EAAE,EAAE,CAAnB;AAAsBC,QAAAA,QAAQ,EAAE;AAAhC,OAHiB,EAIjB;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBC,QAAAA,EAAE,EAAE,CAApB;AAAuBC,QAAAA,QAAQ,EAAE;AAAjC,OAJiB,CAHZ;AASTC,MAAAA,cAAc,EAAE;AATP,KAAb;AAWH;;AAgBDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AACI,QAAA,OAAO,EAAE,KAAKb,IADlB;AAEI,QAAA,SAAS,EAAC,mBAFd;AAGI,QAAA,KAAK,EAAE;AACCc,UAAAA,UAAU,EAAE,CADb;AAECC,UAAAA,KAAK,EAAE;AAFR,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI,QAAC,KAAD;AACI,QAAA,OAAO,EAAE,KAAKR,KAAL,CAAWL,OADxB;AAEI,QAAA,OAAO,EAAE,KAAKC,IAFlB;AAGI,QAAA,KAAK,EAAE,EAHX;AAII,QAAA,MAAM,EAAE,EAJZ;AAKI,QAAA,OAAO,EAAE,GALb;AAMI,QAAA,eAAe,EAAE,KANrB;AAOI,QAAA,UAAU,EAAE,KAPhB;AAQI,QAAA,gBAAgB,EAAE,KARtB;AAAA,+BAUI,QAAC,iBAAD;AACI,UAAA,cAAc,EAAE,KAAKC,cADzB;AAEI,UAAA,mBAAmB,EAAE,KAAKG,KAAL,CAAWC,mBAFpC;AAGI,UAAA,cAAc,EAAE,KAAKD,KAAL,CAAWK;AAH/B;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA,oBADJ;AA+BH;;AA/DyC;;AAkE9C,eAAehB,eAAf","sourcesContent":["// import React from 'react';\n\n// import IndicatorPopup from '../indicator-popup/indicator-popup.component';\n\n// class AddColumnButton extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             showPopup: false\n//         }\n//     }\n//     togglePopup = () => {\n//         this.setState(prevState => ({\n//             showPopup: !prevState.showPopup\n//         }))\n//     }\n\n//     render() {\n//         return (\n//             <>\n//                 <>\n//                     <button \n//                         className=\"add-column-button\" \n//                         style={{\n//                             gridColumn: 4,\n//                             width: '35px'\n//                         }}\n//                         onClick={this.togglePopup}\n//                     >\n//                         +\n//                     </button>\n//                 </>\n//                 {this.state.showPopup ? <IndicatorPopup /> : null}\n//             </>\n//         )\n//     }\n// }\n\n// export default AddColumnButton;\n\n\nimport React from 'react';\nimport Modal from '../modal/modal.component';\n\nimport IndicatorSelector from '../indicator-selector/indicator-selector.component';\n\n\nclass AddColumnButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            visible: false,\n            //TEMPORARY TO TEST PASSING OF STATE - REMOVE AFTERWARDS\n            availableIndicators: [\n                {name: 'SMA', id: 0, selected: false}, \n                {name: 'EMA', id: 1, selected: false}, \n                {name: 'Open', id: 2, selected: true},\n                {name: 'Close', id: 3, selected: false}\n            ],\n            usedIndicators: []\n        };\n    }\n\n    show = () => {\n        this.setState({ visible: true });\n    }\n\n    hide = () => {\n        this.setState({ visible: false });\n    }\n\n    //TEMPORARY METHOD TO TEST PASSING OF STATE - REMOVE AFTERWARDS\n    handleOkCancel = (type, updatedState) => {\n        this.hide();\n        if(type === 'ok') this.setState(updatedState);\n    }\n\n    render() {\n        return (\n            <>\n                <button \n                    onClick={this.show}\n                    className=\"add-column-button\" \n                    style={{\n                            gridColumn: 4,\n                            width: '55px'\n                        }}\n                >\n                    +\n                </button>\n\n                <Modal \n                    visible={this.state.visible} \n                    onClose={this.hide}\n                    width={60}\n                    height={50}\n                    measure={'%'}\n                    showCloseButton={false}\n                    closeOnEsc={false}\n                    closeMaskOnClick={false}\n                >\n                    <IndicatorSelector \n                        handleOkCancel={this.handleOkCancel}\n                        availableIndicators={this.state.availableIndicators}\n                        usedIndicators={this.state.usedIndicators}\n                    />\n                </Modal>\n            </>\n        )\n    }\n}\n\nexport default AddColumnButton;"]},"metadata":{},"sourceType":"module"}