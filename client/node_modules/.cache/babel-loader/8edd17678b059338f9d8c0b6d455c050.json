{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx\";\n// import React from 'react';\n// import GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n// const GenerateGrid = ( { onChange, header, ...props} ) => {\n//     const { Symbol } = props;\n//     const itemNum = Symbol.length;\n//     console.log('map',header, Symbol)\n//     return (\n//         <>\n//         {   \n//             //loop through rows\n//             [...Array(itemNum)].map((value, rowIdx) => {\n//                     const rowValues = header.map((type, colIdx) => props[type][rowIdx]);            \n//                     return (\n//                         <>\n//                             <GridRow \n//                                 rowValues={rowValues} \n//                                 rowIdx={rowIdx} \n//                                 header={header}\n//                                 onChange={onChange}\n//                                 key={rowIdx}\n//                             />\n//                         </>\n//                     )\n//                 }\n//             )\n//         }\n//         </>\n//     )\n// }\n// const GridRow = ( { rowValues, rowIdx, header, onChange } ) => {\n//     // console.log(rowValues, rowIdx)\n//     return (\n//         <>\n//             {\n//                 rowValues.map((value, colIdx) => {\n//                     console.log('ggc',header[colIdx], value)\n//                     return (\n//                         <GenerateGridCell\n//                             type={header[colIdx]}\n//                             gridLocation={{rowIdx, colIdx}}\n//                             onChange={onChange}\n//                             key={header[colIdx]} \n//                         >\n//                             {value}\n//                         </GenerateGridCell>\n//                     )\n//                 })\n//             }\n//         </>\n//     )\n// }\n// \n// export default GenerateGrid;\nimport React from 'react';\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GenerateGrid = ({\n  onChange,\n  header,\n  ...props\n}) => {\n  const {\n    Symbol\n  } = props;\n  console.log('map', header, Symbol);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: //loop through the header items (columns) and afterwards loop through stored values (rows)  \n    header.map((type, colIdx) => props[type].map((rowVal, rowIdx) => {\n      console.log('gg', type, rowVal);\n      return /*#__PURE__*/_jsxDEV(GenerateGridCell, {\n        type: type,\n        gridLocation: {\n          rowIdx,\n          colIdx\n        },\n        onChange: onChange,\n        children: rowVal\n      }, `${Symbol[rowIdx]}-${type}-${rowIdx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this);\n    }))\n  }, void 0, false);\n};\n\n_c = GenerateGrid;\nexport default GenerateGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateGrid\");","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/generate-grid/generate-grid.component.jsx"],"names":["React","GenerateGridCell","GenerateGrid","onChange","header","props","Symbol","console","log","map","type","colIdx","rowVal","rowIdx"],"mappings":";AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,oDAA7B;;;;AAEA,MAAMC,YAAY,GAAG,CAAE;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoB,KAAGC;AAAvB,CAAF,KAAqC;AAEtD,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAnB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBJ,MAAlB,EAA0BE,MAA1B;AACA,sBACI;AAAA,cAEI;AACAF,IAAAA,MAAM,CAACK,GAAP,CAAW,CAACC,IAAD,EAAOC,MAAP,KAAkBN,KAAK,CAACK,IAAD,CAAL,CAAYD,GAAZ,CAAgB,CAACG,MAAD,EAAQC,MAAR,KAAmB;AAC5DN,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBE,IAAlB,EAAwBE,MAAxB;AAEA,0BACQ,QAAC,gBAAD;AACI,QAAA,IAAI,EAAEF,IADV;AAEI,QAAA,YAAY,EAAE;AAACG,UAAAA,MAAD;AAASF,UAAAA;AAAT,SAFlB;AAGI,QAAA,QAAQ,EAAER,QAHd;AAAA,kBAOKS;AAPL,SAIU,GAAEN,MAAM,CAACO,MAAD,CAAS,IAAGH,IAAK,IAAGG,MAAO,EAJ7C;AAAA;AAAA;AAAA;AAAA,cADR;AAWC,KAdwB,CAA7B;AAHJ,mBADJ;AAyBH,CA7BD;;KAAMX,Y;AA+BN,eAAeA,YAAf","sourcesContent":["// import React from 'react';\n\n// import GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n\n// const GenerateGrid = ( { onChange, header, ...props} ) => {\n    \n//     const { Symbol } = props;\n//     const itemNum = Symbol.length;\n//     console.log('map',header, Symbol)\n//     return (\n//         <>\n//         {   \n//             //loop through rows\n//             [...Array(itemNum)].map((value, rowIdx) => {\n//                     const rowValues = header.map((type, colIdx) => props[type][rowIdx]);            \n//                     return (\n//                         <>\n//                             <GridRow \n//                                 rowValues={rowValues} \n//                                 rowIdx={rowIdx} \n//                                 header={header}\n//                                 onChange={onChange}\n//                                 key={rowIdx}\n//                             />\n//                         </>\n//                     )\n//                 }\n//             )\n//         }\n//         </>\n//     )\n// }\n\n// const GridRow = ( { rowValues, rowIdx, header, onChange } ) => {\n//     // console.log(rowValues, rowIdx)\n//     return (\n//         <>\n//             {\n//                 rowValues.map((value, colIdx) => {\n//                     console.log('ggc',header[colIdx], value)\n//                     return (\n//                         <GenerateGridCell\n//                             type={header[colIdx]}\n//                             gridLocation={{rowIdx, colIdx}}\n//                             onChange={onChange}\n//                             key={header[colIdx]} \n//                         >\n//                             {value}\n//                         </GenerateGridCell>\n//                     )\n//                 })\n//             }\n//         </>\n//     )\n// }\n// \n// export default GenerateGrid;\n\n\nimport React from 'react';\n\nimport GenerateGridCell from '../generate-grid-cell/generate-grid-cell.component';\n\nconst GenerateGrid = ( { onChange, header, ...props} ) => {\n    \n    const { Symbol } = props;\n    console.log('map',header, Symbol)\n    return (\n        <>\n        {   \n            //loop through the header items (columns) and afterwards loop through stored values (rows)  \n            header.map((type, colIdx) => props[type].map((rowVal,rowIdx) => {\n                console.log('gg', type, rowVal)\n            \n                return  (\n                        <GenerateGridCell\n                            type={type}\n                            gridLocation={{rowIdx, colIdx}}\n                            onChange={onChange}\n                            key={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n                            // id={`${Symbol[rowIdx]}-${type}-${rowIdx}`} \n                        >\n                            {rowVal}\n                        </GenerateGridCell>\n                    )\n                }                    \n            \n            )\n            ) \n        }\n        </>\n    )\n}\n\nexport default GenerateGrid;\n"]},"metadata":{},"sourceType":"module"}