{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx\";\nimport React from 'react';\nimport './dropdown.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      defaultValue\n    } = props;\n    super(props);\n\n    this.handleClickOutside = event => {\n      if (!event.target.classList.contains('dropdown-option') && !event.target.classList.contains('selected-value')) {\n        this.setState({\n          showList: false\n        });\n      }\n    };\n\n    this.handleDisplay = () => {\n      this.setState(prevState => ({\n        showList: !prevState.showList // showList: false\n\n      }));\n    };\n\n    this.handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(event.target.getAttribute('value'))\n      // console.log(event)\n      this.setState({\n        selectedValue: event.target.getAttribute('value'),\n        showList: false\n      }, () => this.props.onChange(this.state.selectedValue, headerCol, valueRow));\n    };\n\n    this.state = {\n      selectedValue: defaultValue,\n      showList: false\n    };\n  } //on mounting add event listener to handle click outside the Custom Select Container\n\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  } //remove the event listner on component unmounting\n\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  } //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      options,\n      style\n    } = this.props;\n    const {\n      selectedValue,\n      showList\n    } = this.state; // console.log('a',this.props)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'dropdown-container',\n      style: {\n        gridRow: style.gridRow,\n        gridColumn: style.gridColumn\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"\",\n        type: \"text\",\n        name: \"userInput\",\n        value: selectedValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"options-list\",\n        children: options.map((value, index) => {\n          if (value !== selectedValue) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"dropdown-option\",\n              value: value,\n              onClick: e => this.handleOptionClick(e, style.gridColumn - 1, style.gridRow - 2),\n              children: value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 21\n            }, this);\n          } else return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","defaultValue","handleClickOutside","event","target","classList","contains","setState","showList","handleDisplay","prevState","handleOptionClick","headerCol","valueRow","selectedValue","getAttribute","onChange","state","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render","options","style","gridRow","gridColumn","map","value","index","e"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport './dropdown.styles.css';\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n      const {defaultValue} = props;\n      super(props);\n      this.state = {\n          selectedValue: defaultValue,\n          showList: false\n      };\n    }\n    \n    //on mounting add event listener to handle click outside the Custom Select Container\n    componentDidMount() {\n      document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    //remove the event listner on component unmounting\n    componentWillUnmount() {\n      document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    //if click happens outside the dropdown area close the list\n    handleClickOutside = event => {\n      if(\n        !event.target.classList.contains('dropdown-option') && \n        !event.target.classList.contains('selected-value')\n      ) {\n        this.setState({\n          showList: false\n        });\n      }\n    }\n\n    //handle the displaying of the list (if currently shown, then hide and vice versa)\n    handleDisplay = () => {\n      this.setState(prevState => ({\n            showList: !prevState.showList\n            // showList: false\n          })\n      );\n    };\n\n    // set text based on click in displayed list\n    handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(event.target.getAttribute('value'))\n      // console.log(event)\n\n      this.setState({\n        selectedValue: event.target.getAttribute('value'),\n        showList: false\n      }, () => this.props.onChange(this.state.selectedValue, headerCol, valueRow)      \n      );\n\n      \n    };\n\n  \n    render() {\n      const { options, style } = this.props;\n      const { selectedValue, showList } = this.state;\n      // console.log('a',this.props)\n      return (\n        <div \n          className={'dropdown-container'}\n          style={{ \n            gridRow: style.gridRow,\n            gridColumn: style.gridColumn,\n          }}\n        >\n          {/* <div \n            className={showList ? 'selected-value active' : 'selected-value'}\n            onClick={this.handleDisplay}  \n            // contentEditable='true'\n          >\n            {selectedValue}\n          </div> */}\n          <input\n            className=''\n            type='text'\n            name='userInput'\n            value={selectedValue}\n          />\n\n            {showList && (<ul className='options-list'>\n              {options.map((value, index) => {\n                if(value !== selectedValue) {\n                  return(\n                    <li \n                      className='dropdown-option'\n                      value={value} \n                      key={index}\n                      onClick={e => this.handleOptionClick(e, style.gridColumn-1, style.gridRow-2)}\n                    >\n                      {value}\n                    </li>\n                  )}\n                  else return null;\n              })}\n            </ul>)}\n        </div>\n      );\n    }\n  }\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}