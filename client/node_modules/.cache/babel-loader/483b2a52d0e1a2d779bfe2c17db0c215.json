{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx\";\nimport React from 'react';\nimport './dropdown.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(props) {\n    const {\n      defaultValue\n    } = props;\n    super(props);\n\n    this.handleClickOutside = event => {\n      if (!this.node.contains(event.target)) {\n        const priorValue = this.state.selectedValue;\n        console.log(priorValue, this.state.shownValue);\n        this.setState(prevState => ({\n          showList: false,\n          shownValue: priorValue\n        }), () => console.log('click out', this.state.selectedValue)); // console.log(this.node2, 'node2')\n\n        this.node2.innerText = 'test';\n      }\n    };\n\n    this.handleDisplay = () => {\n      this.setState(prevState => ({\n        showList: !prevState.showList // showList: false\n\n      }));\n    };\n\n    this.handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(event.target.getAttribute('value'))\n      // console.log(event)\n      this.setState({\n        selectedValue: event.target.getAttribute('value'),\n        showList: false\n      }, () => this.props.onChange(this.state.selectedValue, headerCol, valueRow));\n    };\n\n    this.onTextChange = event => {\n      // console.log(event.currentTarget.textContent,'text change')\n      const {\n        options\n      } = this.props;\n      const currentInput = event.currentTarget.textContent; // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0; //filter all with the same start\n      });\n      console.log(newFilteredOptions);\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput\n      }, () => console.log(this.state));\n    };\n\n    this.state = {\n      selectedValue: defaultValue,\n      showList: false,\n      displayedOptions: this.props.options,\n      selectedValueshownValue: defaultValue\n    };\n  } //on mounting add event listener to handle click outside the Custom Select Container\n\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  } //remove the event listener on component unmounting\n\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  } //if click happens outside the dropdown area close the list\n\n\n  render() {\n    const {\n      options,\n      style\n    } = this.props;\n    const {\n      selectedValue,\n      showList,\n      displayedOptions,\n      shownValue\n    } = this.state; // console.log('a',this.props)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'dropdown-container',\n      style: {\n        gridRow: style.gridRow,\n        gridColumn: style.gridColumn\n      },\n      ref: node => this.node = node,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: showList ? 'selected-value active' : 'selected-value',\n        onClick: this.handleDisplay,\n        contentEditable: \"true\",\n        suppressContentEditableWarning: true,\n        onInput: this.onTextChange,\n        ref: node2 => this.node2 = node2,\n        children: selectedValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"options-list\",\n        children: displayedOptions.map((value, index) => {\n          if (value !== selectedValue || shownValue !== selectedValue) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"dropdown-option\",\n              value: value,\n              onClick: e => this.handleOptionClick(e, style.gridColumn - 1, style.gridRow - 2),\n              children: value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 21\n            }, this);\n          } else return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Phil/Desktop/Web Dev/Projects/stock-screener/src/components/dropdown.component.jsx"],"names":["React","Dropdown","Component","constructor","props","defaultValue","handleClickOutside","event","node","contains","target","priorValue","state","selectedValue","console","log","shownValue","setState","prevState","showList","node2","innerText","handleDisplay","handleOptionClick","headerCol","valueRow","getAttribute","onChange","onTextChange","options","currentInput","currentTarget","textContent","newFilteredOptions","filter","item","toLowerCase","indexOf","displayedOptions","selectedValueshownValue","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render","style","gridRow","gridColumn","map","value","index","e"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport './dropdown.styles.css';\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n      const {defaultValue} = props;\n      super(props);\n      this.state = {\n          selectedValue: defaultValue,\n          showList: false,\n          displayedOptions: this.props.options,\n          selectedValueshownValue: defaultValue\n      };\n    }\n    \n    //on mounting add event listener to handle click outside the Custom Select Container\n    componentDidMount() {\n      document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    //remove the event listener on component unmounting\n    componentWillUnmount() {\n      document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    //if click happens outside the dropdown area close the list\n    handleClickOutside = event => {\n      if(!this.node.contains(event.target)) {\n        const priorValue = this.state.selectedValue;\n        console.log(priorValue, this.state.shownValue)\n        \n        this.setState((prevState) => ({\n          showList: false,\n          shownValue: priorValue\n        }),\n        ()=>console.log('click out',this.state.selectedValue));\n        // console.log(this.node2, 'node2')\n\n        this.node2.innerText = 'test'\n      }\n    }\n\n    //handle the displaying of the list (if currently shown, then hide and vice versa)\n    handleDisplay = () => {\n      this.setState(prevState => ({\n            showList: !prevState.showList\n            // showList: false\n          })\n      );\n    };\n\n    // set text based on click in displayed list\n    handleOptionClick = (event, headerCol, valueRow) => {\n      // console.log(event.target.getAttribute('value'))\n      // console.log(event)\n\n      this.setState({\n        selectedValue: event.target.getAttribute('value'),\n        showList: false\n      }, () => this.props.onChange(this.state.selectedValue, headerCol, valueRow)      \n      );\n    };\n\n    onTextChange = event => {\n      // console.log(event.currentTarget.textContent,'text change')\n      const { options } = this.props;\n\n      const currentInput = event.currentTarget.textContent;\n      // console.log(currentInput)\n\n      const newFilteredOptions = options.filter(item => {\n        // console.log(item.toLowerCase().indexOf(currentInput.toLowerCase()), item)\n        // return item.toLowerCase().indexOf(currentInput.toLowerCase()) > -1 //filter if occurs at all\n        return item.toLowerCase().indexOf(currentInput.toLowerCase()) === 0 //filter all with the same start\n      });\n\n      console.log(newFilteredOptions);\n\n      this.setState({\n        displayedOptions: newFilteredOptions,\n        showList: true,\n        shownValue: currentInput\n      },\n      ()=>console.log(this.state))\n\n      \n    }\n\n  \n    render() {\n      const { options, style } = this.props;\n      const { selectedValue, showList, displayedOptions, shownValue } = this.state;\n      // console.log('a',this.props)\n      \n\n      return (\n        <div \n          className={'dropdown-container'}\n          style={{ \n            gridRow: style.gridRow,\n            gridColumn: style.gridColumn,\n          }}\n          ref = {node => this.node=node}\n        >\n          <div \n            className={showList ? 'selected-value active' : 'selected-value'}\n            onClick={this.handleDisplay}  \n            contentEditable='true'\n            suppressContentEditableWarning={true}\n            onInput={this.onTextChange}\n            ref = {node2 => this.node2=node2}\n          >\n            {selectedValue}\n          </div>\n          {/* WON'T WORK AS INPUT DOES NOT SUPPORT PSEUDO ELEMENTS\n          <input\n            className={showList ? 'selected-value active' : 'selected-value'}\n            type='text'\n            name='userInput'\n            value={selectedValue}\n            onClick={this.handleDisplay}  \n          /> */}\n\n            {showList && (<ul className='options-list'>\n              {displayedOptions.map((value, index) => {\n                if(value !== selectedValue || shownValue !== selectedValue) {\n                  return(\n                    <li \n                      className='dropdown-option'\n                      value={value} \n                      key={index}\n                      onClick={e => this.handleOptionClick(e, style.gridColumn-1, style.gridRow-2)}\n                    >\n                      {value}\n                    </li>\n                  )}\n                  else return null;\n              })}\n            </ul>)}\n        </div>\n      );\n    }\n  }\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}